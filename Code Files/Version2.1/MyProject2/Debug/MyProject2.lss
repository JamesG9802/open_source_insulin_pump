
MyProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003134  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00003134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  2000001c  00003150  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000158  0000328c  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b189  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055f1  00000000  00000000  0005b226  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001689f  00000000  00000000  00060817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011e8  00000000  00000000  000770b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016d8  00000000  00000000  0007829e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e57d  00000000  00000000  00079976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001af62  00000000  00000000  00097ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090361  00000000  00000000  000b2e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d00  00000000  00000000  001431b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 21 00 20 65 03 00 00 63 03 00 00 63 03 00 00     X!. e...c...c...
	...
      2c:	63 03 00 00 00 00 00 00 00 00 00 00 63 03 00 00     c...........c...
      3c:	63 03 00 00 63 03 00 00 63 03 00 00 63 03 00 00     c...c...c...c...
      4c:	e1 21 00 00 0d 1c 00 00 5d 20 00 00 63 03 00 00     .!......] ..c...
      5c:	63 03 00 00 63 03 00 00 63 03 00 00 63 03 00 00     c...c...c...c...
      6c:	63 03 00 00 63 03 00 00 63 03 00 00 63 03 00 00     c...c...c...c...
      7c:	63 03 00 00 63 03 00 00 63 03 00 00 01 28 00 00     c...c...c....(..
      8c:	63 03 00 00 63 03 00 00 00 00 00 00 00 00 00 00     c...c...........
      9c:	63 03 00 00 63 03 00 00 63 03 00 00 63 03 00 00     c...c...c...c...
      ac:	63 03 00 00 00 00 00 00                             c.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00003134 	.word	0x00003134

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00003134 	.word	0x00003134
     10c:	00003134 	.word	0x00003134
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000008bd 	.word	0x000008bd

00000120 <button_3_cb>:
	timer_start(&TIMER_0);
}

// cb function which starts TIMER_0 when button 3 pressed
static void button_3_cb(void)
{
     120:	b510      	push	{r4, lr}
	button_3 = true;
     122:	2201      	movs	r2, #1
     124:	4b02      	ldr	r3, [pc, #8]	; (130 <button_3_cb+0x10>)
     126:	701a      	strb	r2, [r3, #0]
	timer_start(&TIMER_0);
     128:	4802      	ldr	r0, [pc, #8]	; (134 <button_3_cb+0x14>)
     12a:	4b03      	ldr	r3, [pc, #12]	; (138 <button_3_cb+0x18>)
     12c:	4798      	blx	r3
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000038 	.word	0x20000038
     134:	20000104 	.word	0x20000104
     138:	00001789 	.word	0x00001789

0000013c <button_1_cb>:
{
     13c:	b510      	push	{r4, lr}
	button_1 = true;
     13e:	2201      	movs	r2, #1
     140:	4b02      	ldr	r3, [pc, #8]	; (14c <button_1_cb+0x10>)
     142:	705a      	strb	r2, [r3, #1]
	timer_start(&TIMER_0);
     144:	4802      	ldr	r0, [pc, #8]	; (150 <button_1_cb+0x14>)
     146:	4b03      	ldr	r3, [pc, #12]	; (154 <button_1_cb+0x18>)
     148:	4798      	blx	r3
}
     14a:	bd10      	pop	{r4, pc}
     14c:	20000038 	.word	0x20000038
     150:	20000104 	.word	0x20000104
     154:	00001789 	.word	0x00001789

00000158 <button_2_cb>:
{
     158:	b510      	push	{r4, lr}
	button_2 = true;
     15a:	2201      	movs	r2, #1
     15c:	4b02      	ldr	r3, [pc, #8]	; (168 <button_2_cb+0x10>)
     15e:	709a      	strb	r2, [r3, #2]
	timer_start(&TIMER_0);
     160:	4802      	ldr	r0, [pc, #8]	; (16c <button_2_cb+0x14>)
     162:	4b03      	ldr	r3, [pc, #12]	; (170 <button_2_cb+0x18>)
     164:	4798      	blx	r3
}
     166:	bd10      	pop	{r4, pc}
     168:	20000038 	.word	0x20000038
     16c:	20000104 	.word	0x20000104
     170:	00001789 	.word	0x00001789

00000174 <TIMER_0_setup>:
{
     174:	b510      	push	{r4, lr}
	TIMER_0_task1.interval = 10;
     176:	4906      	ldr	r1, [pc, #24]	; (190 <TIMER_0_setup+0x1c>)
     178:	230a      	movs	r3, #10
     17a:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <TIMER_0_setup+0x20>)
     17e:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
     180:	2301      	movs	r3, #1
     182:	750b      	strb	r3, [r1, #20]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
     184:	3104      	adds	r1, #4
     186:	4804      	ldr	r0, [pc, #16]	; (198 <TIMER_0_setup+0x24>)
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <TIMER_0_setup+0x28>)
     18a:	4798      	blx	r3
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	20000038 	.word	0x20000038
     194:	00000295 	.word	0x00000295
     198:	20000104 	.word	0x20000104
     19c:	00001801 	.word	0x00001801

000001a0 <init_interrupts>:

// Initialise external interrupts, and tie them to callback functions.
// Interrupts are disabled and then enabled, otherwise they are triggered
// on startup.
void init_interrupts(void)
{
     1a0:	b510      	push	{r4, lr}
	ext_irq_disable(BUTTON1);
     1a2:	2006      	movs	r0, #6
     1a4:	4c0b      	ldr	r4, [pc, #44]	; (1d4 <init_interrupts+0x34>)
     1a6:	47a0      	blx	r4
	ext_irq_disable(BUTTON2);
     1a8:	2005      	movs	r0, #5
     1aa:	47a0      	blx	r4
	ext_irq_disable(BUTTON3);
     1ac:	2009      	movs	r0, #9
     1ae:	47a0      	blx	r4
	ext_irq_register(BUTTON2, button_2_cb);
     1b0:	4909      	ldr	r1, [pc, #36]	; (1d8 <init_interrupts+0x38>)
     1b2:	2005      	movs	r0, #5
     1b4:	4c09      	ldr	r4, [pc, #36]	; (1dc <init_interrupts+0x3c>)
     1b6:	47a0      	blx	r4
	ext_irq_register(BUTTON1, button_1_cb);
     1b8:	4909      	ldr	r1, [pc, #36]	; (1e0 <init_interrupts+0x40>)
     1ba:	2006      	movs	r0, #6
     1bc:	47a0      	blx	r4
	ext_irq_register(BUTTON3, button_3_cb);
     1be:	4909      	ldr	r1, [pc, #36]	; (1e4 <init_interrupts+0x44>)
     1c0:	2009      	movs	r0, #9
     1c2:	47a0      	blx	r4
	ext_irq_enable(BUTTON1);
     1c4:	2006      	movs	r0, #6
     1c6:	4c08      	ldr	r4, [pc, #32]	; (1e8 <init_interrupts+0x48>)
     1c8:	47a0      	blx	r4
	ext_irq_enable(BUTTON2);
     1ca:	2005      	movs	r0, #5
     1cc:	47a0      	blx	r4
	ext_irq_enable(BUTTON3);
     1ce:	2009      	movs	r0, #9
     1d0:	47a0      	blx	r4
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	000010b5 	.word	0x000010b5
     1d8:	00000159 	.word	0x00000159
     1dc:	00000fbd 	.word	0x00000fbd
     1e0:	0000013d 	.word	0x0000013d
     1e4:	00000121 	.word	0x00000121
     1e8:	000010a5 	.word	0x000010a5

000001ec <set_leds>:

void set_leds(uint8_t button_count)
{
	if(button_count < 1) 
     1ec:	2800      	cmp	r0, #0
     1ee:	d11e      	bne.n	22e <set_leds+0x42>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1f0:	23c0      	movs	r3, #192	; 0xc0
     1f2:	05db      	lsls	r3, r3, #23
     1f4:	2280      	movs	r2, #128	; 0x80
     1f6:	0412      	lsls	r2, r2, #16
     1f8:	615a      	str	r2, [r3, #20]
     1fa:	2280      	movs	r2, #128	; 0x80
     1fc:	0112      	lsls	r2, r2, #4
     1fe:	615a      	str	r2, [r3, #20]
     200:	2280      	movs	r2, #128	; 0x80
     202:	0352      	lsls	r2, r2, #13
     204:	615a      	str	r2, [r3, #20]
     206:	2280      	movs	r2, #128	; 0x80
     208:	0292      	lsls	r2, r2, #10
     20a:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, false);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 3 )
     20c:	2803      	cmp	r0, #3
     20e:	d11e      	bne.n	24e <set_leds+0x62>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     210:	23c0      	movs	r3, #192	; 0xc0
     212:	05db      	lsls	r3, r3, #23
     214:	2280      	movs	r2, #128	; 0x80
     216:	0412      	lsls	r2, r2, #16
     218:	619a      	str	r2, [r3, #24]
     21a:	2280      	movs	r2, #128	; 0x80
     21c:	0112      	lsls	r2, r2, #4
     21e:	619a      	str	r2, [r3, #24]
     220:	2280      	movs	r2, #128	; 0x80
     222:	0352      	lsls	r2, r2, #13
     224:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     226:	2280      	movs	r2, #128	; 0x80
     228:	0292      	lsls	r2, r2, #10
     22a:	615a      	str	r2, [r3, #20]
     22c:	e01f      	b.n	26e <set_leds+0x82>
	if (button_count == 1 )
     22e:	2801      	cmp	r0, #1
     230:	d11e      	bne.n	270 <set_leds+0x84>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     232:	23c0      	movs	r3, #192	; 0xc0
     234:	05db      	lsls	r3, r3, #23
     236:	2280      	movs	r2, #128	; 0x80
     238:	0412      	lsls	r2, r2, #16
     23a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	0112      	lsls	r2, r2, #4
     240:	615a      	str	r2, [r3, #20]
     242:	2280      	movs	r2, #128	; 0x80
     244:	0352      	lsls	r2, r2, #13
     246:	615a      	str	r2, [r3, #20]
     248:	2280      	movs	r2, #128	; 0x80
     24a:	0292      	lsls	r2, r2, #10
     24c:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 4 )
     24e:	2804      	cmp	r0, #4
     250:	d10d      	bne.n	26e <set_leds+0x82>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     252:	23c0      	movs	r3, #192	; 0xc0
     254:	05db      	lsls	r3, r3, #23
     256:	2280      	movs	r2, #128	; 0x80
     258:	0412      	lsls	r2, r2, #16
     25a:	619a      	str	r2, [r3, #24]
     25c:	2280      	movs	r2, #128	; 0x80
     25e:	0112      	lsls	r2, r2, #4
     260:	619a      	str	r2, [r3, #24]
     262:	2280      	movs	r2, #128	; 0x80
     264:	0352      	lsls	r2, r2, #13
     266:	619a      	str	r2, [r3, #24]
     268:	2280      	movs	r2, #128	; 0x80
     26a:	0292      	lsls	r2, r2, #10
     26c:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(OUT7, true);
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, true);
	}
}
     26e:	4770      	bx	lr
	if (button_count == 2 )
     270:	2802      	cmp	r0, #2
     272:	d1cb      	bne.n	20c <set_leds+0x20>
     274:	23c0      	movs	r3, #192	; 0xc0
     276:	05db      	lsls	r3, r3, #23
     278:	2280      	movs	r2, #128	; 0x80
     27a:	0412      	lsls	r2, r2, #16
     27c:	619a      	str	r2, [r3, #24]
     27e:	2280      	movs	r2, #128	; 0x80
     280:	0112      	lsls	r2, r2, #4
     282:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     284:	2280      	movs	r2, #128	; 0x80
     286:	0352      	lsls	r2, r2, #13
     288:	615a      	str	r2, [r3, #20]
     28a:	2280      	movs	r2, #128	; 0x80
     28c:	0292      	lsls	r2, r2, #10
     28e:	615a      	str	r2, [r3, #20]
     290:	e7ed      	b.n	26e <set_leds+0x82>
	...

00000294 <TIMER_0_task1_cb>:
{
     294:	b510      	push	{r4, lr}
	if (button_1)
     296:	4b21      	ldr	r3, [pc, #132]	; (31c <TIMER_0_task1_cb+0x88>)
     298:	785b      	ldrb	r3, [r3, #1]
     29a:	2b00      	cmp	r3, #0
     29c:	d108      	bne.n	2b0 <TIMER_0_task1_cb+0x1c>
	else if (button_2)
     29e:	4b1f      	ldr	r3, [pc, #124]	; (31c <TIMER_0_task1_cb+0x88>)
     2a0:	789b      	ldrb	r3, [r3, #2]
     2a2:	2b00      	cmp	r3, #0
     2a4:	d11a      	bne.n	2dc <TIMER_0_task1_cb+0x48>
	else if  (button_3)
     2a6:	4b1d      	ldr	r3, [pc, #116]	; (31c <TIMER_0_task1_cb+0x88>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	2b00      	cmp	r3, #0
     2ac:	d12c      	bne.n	308 <TIMER_0_task1_cb+0x74>
}
     2ae:	bd10      	pop	{r4, pc}
		button_array[0]++;
     2b0:	4c1b      	ldr	r4, [pc, #108]	; (320 <TIMER_0_task1_cb+0x8c>)
     2b2:	7823      	ldrb	r3, [r4, #0]
     2b4:	3301      	adds	r3, #1
     2b6:	7023      	strb	r3, [r4, #0]
		button_1 = false;
     2b8:	2200      	movs	r2, #0
     2ba:	4b18      	ldr	r3, [pc, #96]	; (31c <TIMER_0_task1_cb+0x88>)
     2bc:	705a      	strb	r2, [r3, #1]
		timer_stop(&TIMER_0);
     2be:	4819      	ldr	r0, [pc, #100]	; (324 <TIMER_0_task1_cb+0x90>)
     2c0:	4b19      	ldr	r3, [pc, #100]	; (328 <TIMER_0_task1_cb+0x94>)
     2c2:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     2c4:	4b19      	ldr	r3, [pc, #100]	; (32c <TIMER_0_task1_cb+0x98>)
     2c6:	8819      	ldrh	r1, [r3, #0]
     2c8:	2201      	movs	r2, #1
     2ca:	4819      	ldr	r0, [pc, #100]	; (330 <TIMER_0_task1_cb+0x9c>)
     2cc:	4b19      	ldr	r3, [pc, #100]	; (334 <TIMER_0_task1_cb+0xa0>)
     2ce:	4798      	blx	r3
		store_delivery_data();
     2d0:	4b19      	ldr	r3, [pc, #100]	; (338 <TIMER_0_task1_cb+0xa4>)
     2d2:	4798      	blx	r3
		set_leds(button_array[0]);
     2d4:	7820      	ldrb	r0, [r4, #0]
     2d6:	4b19      	ldr	r3, [pc, #100]	; (33c <TIMER_0_task1_cb+0xa8>)
     2d8:	4798      	blx	r3
     2da:	e7e8      	b.n	2ae <TIMER_0_task1_cb+0x1a>
		button_array[0]--;
     2dc:	4c10      	ldr	r4, [pc, #64]	; (320 <TIMER_0_task1_cb+0x8c>)
     2de:	7823      	ldrb	r3, [r4, #0]
     2e0:	3b01      	subs	r3, #1
     2e2:	7023      	strb	r3, [r4, #0]
		button_2 = false;
     2e4:	2200      	movs	r2, #0
     2e6:	4b0d      	ldr	r3, [pc, #52]	; (31c <TIMER_0_task1_cb+0x88>)
     2e8:	709a      	strb	r2, [r3, #2]
		timer_stop(&TIMER_0);
     2ea:	480e      	ldr	r0, [pc, #56]	; (324 <TIMER_0_task1_cb+0x90>)
     2ec:	4b0e      	ldr	r3, [pc, #56]	; (328 <TIMER_0_task1_cb+0x94>)
     2ee:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     2f0:	4b0e      	ldr	r3, [pc, #56]	; (32c <TIMER_0_task1_cb+0x98>)
     2f2:	8819      	ldrh	r1, [r3, #0]
     2f4:	2201      	movs	r2, #1
     2f6:	480e      	ldr	r0, [pc, #56]	; (330 <TIMER_0_task1_cb+0x9c>)
     2f8:	4b0e      	ldr	r3, [pc, #56]	; (334 <TIMER_0_task1_cb+0xa0>)
     2fa:	4798      	blx	r3
		store_delivery_data();
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <TIMER_0_task1_cb+0xa4>)
     2fe:	4798      	blx	r3
		set_leds(button_array[0]);
     300:	7820      	ldrb	r0, [r4, #0]
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <TIMER_0_task1_cb+0xa8>)
     304:	4798      	blx	r3
     306:	e7d2      	b.n	2ae <TIMER_0_task1_cb+0x1a>
		button_array[2]++;
     308:	4a05      	ldr	r2, [pc, #20]	; (320 <TIMER_0_task1_cb+0x8c>)
     30a:	7893      	ldrb	r3, [r2, #2]
     30c:	3301      	adds	r3, #1
     30e:	7093      	strb	r3, [r2, #2]
		button_3 = false;
     310:	2200      	movs	r2, #0
     312:	4b02      	ldr	r3, [pc, #8]	; (31c <TIMER_0_task1_cb+0x88>)
     314:	701a      	strb	r2, [r3, #0]
		main();
     316:	4b0a      	ldr	r3, [pc, #40]	; (340 <TIMER_0_task1_cb+0xac>)
     318:	4798      	blx	r3
}
     31a:	e7c8      	b.n	2ae <TIMER_0_task1_cb+0x1a>
     31c:	20000038 	.word	0x20000038
     320:	2000007c 	.word	0x2000007c
     324:	20000104 	.word	0x20000104
     328:	000017c5 	.word	0x000017c5
     32c:	20000014 	.word	0x20000014
     330:	200000a4 	.word	0x200000a4
     334:	000012c5 	.word	0x000012c5
     338:	00000c81 	.word	0x00000c81
     33c:	000001ed 	.word	0x000001ed
     340:	000028a5 	.word	0x000028a5

00000344 <leds_off>:
     344:	23c0      	movs	r3, #192	; 0xc0
     346:	05db      	lsls	r3, r3, #23
     348:	2280      	movs	r2, #128	; 0x80
     34a:	0112      	lsls	r2, r2, #4
     34c:	615a      	str	r2, [r3, #20]
     34e:	2280      	movs	r2, #128	; 0x80
     350:	0352      	lsls	r2, r2, #13
     352:	615a      	str	r2, [r3, #20]
     354:	2280      	movs	r2, #128	; 0x80
     356:	0412      	lsls	r2, r2, #16
     358:	615a      	str	r2, [r3, #20]
     35a:	2280      	movs	r2, #128	; 0x80
     35c:	0292      	lsls	r2, r2, #10
     35e:	615a      	str	r2, [r3, #20]
{
	gpio_set_pin_level(OUT1, false);
	gpio_set_pin_level(OUT6, false);
	gpio_set_pin_level(OUT7, false);
	gpio_set_pin_level(OUT4, false);
}
     360:	4770      	bx	lr

00000362 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     362:	e7fe      	b.n	362 <Dummy_Handler>

00000364 <Reset_Handler>:
{
     364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     366:	4a2a      	ldr	r2, [pc, #168]	; (410 <Reset_Handler+0xac>)
     368:	4b2a      	ldr	r3, [pc, #168]	; (414 <Reset_Handler+0xb0>)
     36a:	429a      	cmp	r2, r3
     36c:	d011      	beq.n	392 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     36e:	001a      	movs	r2, r3
     370:	4b29      	ldr	r3, [pc, #164]	; (418 <Reset_Handler+0xb4>)
     372:	429a      	cmp	r2, r3
     374:	d20d      	bcs.n	392 <Reset_Handler+0x2e>
     376:	4a29      	ldr	r2, [pc, #164]	; (41c <Reset_Handler+0xb8>)
     378:	3303      	adds	r3, #3
     37a:	1a9b      	subs	r3, r3, r2
     37c:	089b      	lsrs	r3, r3, #2
     37e:	3301      	adds	r3, #1
     380:	009b      	lsls	r3, r3, #2
     382:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     384:	4823      	ldr	r0, [pc, #140]	; (414 <Reset_Handler+0xb0>)
     386:	4922      	ldr	r1, [pc, #136]	; (410 <Reset_Handler+0xac>)
     388:	588c      	ldr	r4, [r1, r2]
     38a:	5084      	str	r4, [r0, r2]
     38c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     38e:	429a      	cmp	r2, r3
     390:	d1fa      	bne.n	388 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     392:	4a23      	ldr	r2, [pc, #140]	; (420 <Reset_Handler+0xbc>)
     394:	4b23      	ldr	r3, [pc, #140]	; (424 <Reset_Handler+0xc0>)
     396:	429a      	cmp	r2, r3
     398:	d20a      	bcs.n	3b0 <Reset_Handler+0x4c>
     39a:	43d3      	mvns	r3, r2
     39c:	4921      	ldr	r1, [pc, #132]	; (424 <Reset_Handler+0xc0>)
     39e:	185b      	adds	r3, r3, r1
     3a0:	2103      	movs	r1, #3
     3a2:	438b      	bics	r3, r1
     3a4:	3304      	adds	r3, #4
     3a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     3a8:	2100      	movs	r1, #0
     3aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     3ac:	4293      	cmp	r3, r2
     3ae:	d1fc      	bne.n	3aa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3b0:	4a1d      	ldr	r2, [pc, #116]	; (428 <Reset_Handler+0xc4>)
     3b2:	21ff      	movs	r1, #255	; 0xff
     3b4:	4b1d      	ldr	r3, [pc, #116]	; (42c <Reset_Handler+0xc8>)
     3b6:	438b      	bics	r3, r1
     3b8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     3ba:	39fd      	subs	r1, #253	; 0xfd
     3bc:	2390      	movs	r3, #144	; 0x90
     3be:	005b      	lsls	r3, r3, #1
     3c0:	4a1b      	ldr	r2, [pc, #108]	; (430 <Reset_Handler+0xcc>)
     3c2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     3c4:	4a1b      	ldr	r2, [pc, #108]	; (434 <Reset_Handler+0xd0>)
     3c6:	78d3      	ldrb	r3, [r2, #3]
     3c8:	2503      	movs	r5, #3
     3ca:	43ab      	bics	r3, r5
     3cc:	2402      	movs	r4, #2
     3ce:	4323      	orrs	r3, r4
     3d0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     3d2:	78d3      	ldrb	r3, [r2, #3]
     3d4:	270c      	movs	r7, #12
     3d6:	43bb      	bics	r3, r7
     3d8:	2608      	movs	r6, #8
     3da:	4333      	orrs	r3, r6
     3dc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     3de:	4b16      	ldr	r3, [pc, #88]	; (438 <Reset_Handler+0xd4>)
     3e0:	7b98      	ldrb	r0, [r3, #14]
     3e2:	2230      	movs	r2, #48	; 0x30
     3e4:	4390      	bics	r0, r2
     3e6:	2220      	movs	r2, #32
     3e8:	4310      	orrs	r0, r2
     3ea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     3ec:	7b99      	ldrb	r1, [r3, #14]
     3ee:	43b9      	bics	r1, r7
     3f0:	4331      	orrs	r1, r6
     3f2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     3f4:	7b9a      	ldrb	r2, [r3, #14]
     3f6:	43aa      	bics	r2, r5
     3f8:	4322      	orrs	r2, r4
     3fa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     3fc:	4a0f      	ldr	r2, [pc, #60]	; (43c <Reset_Handler+0xd8>)
     3fe:	6853      	ldr	r3, [r2, #4]
     400:	2180      	movs	r1, #128	; 0x80
     402:	430b      	orrs	r3, r1
     404:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     406:	4b0e      	ldr	r3, [pc, #56]	; (440 <Reset_Handler+0xdc>)
     408:	4798      	blx	r3
        main();
     40a:	4b0e      	ldr	r3, [pc, #56]	; (444 <Reset_Handler+0xe0>)
     40c:	4798      	blx	r3
     40e:	e7fe      	b.n	40e <Reset_Handler+0xaa>
     410:	00003134 	.word	0x00003134
     414:	20000000 	.word	0x20000000
     418:	2000001c 	.word	0x2000001c
     41c:	20000004 	.word	0x20000004
     420:	2000001c 	.word	0x2000001c
     424:	20000158 	.word	0x20000158
     428:	e000ed00 	.word	0xe000ed00
     42c:	00000000 	.word	0x00000000
     430:	41007000 	.word	0x41007000
     434:	41005000 	.word	0x41005000
     438:	41004800 	.word	0x41004800
     43c:	41004000 	.word	0x41004000
     440:	00002e99 	.word	0x00002e99
     444:	000028a5 	.word	0x000028a5

00000448 <ADC_0_PORT_init>:
struct dac_sync_descriptor DAC_0;

struct wdt_descriptor WDT_0;

void ADC_0_PORT_init(void)
{
     448:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	2204      	movs	r2, #4
     44c:	23c0      	movs	r3, #192	; 0xc0
     44e:	05db      	lsls	r3, r3, #23
     450:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     452:	490a      	ldr	r1, [pc, #40]	; (47c <ADC_0_PORT_init+0x34>)
     454:	4b0a      	ldr	r3, [pc, #40]	; (480 <ADC_0_PORT_init+0x38>)
     456:	628b      	str	r3, [r1, #40]	; 0x28
     458:	23c0      	movs	r3, #192	; 0xc0
     45a:	061b      	lsls	r3, r3, #24
     45c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45e:	2342      	movs	r3, #66	; 0x42
     460:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     462:	2001      	movs	r0, #1
     464:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     466:	4302      	orrs	r2, r0
     468:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46c:	2231      	movs	r2, #49	; 0x31
     46e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     470:	240f      	movs	r4, #15
     472:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     474:	4303      	orrs	r3, r0
     476:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     478:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(ADC_BATT_TEST, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(ADC_BATT_TEST, PINMUX_PA02B_ADC_AIN0);
}
     47a:	bd10      	pop	{r4, pc}
     47c:	41004400 	.word	0x41004400
     480:	40000004 	.word	0x40000004

00000484 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     484:	4a04      	ldr	r2, [pc, #16]	; (498 <ADC_0_CLOCK_init+0x14>)
     486:	6a11      	ldr	r1, [r2, #32]
     488:	2380      	movs	r3, #128	; 0x80
     48a:	025b      	lsls	r3, r3, #9
     48c:	430b      	orrs	r3, r1
     48e:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     490:	4a02      	ldr	r2, [pc, #8]	; (49c <ADC_0_CLOCK_init+0x18>)
     492:	4b03      	ldr	r3, [pc, #12]	; (4a0 <ADC_0_CLOCK_init+0x1c>)
     494:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     496:	4770      	bx	lr
     498:	40000400 	.word	0x40000400
     49c:	0000401e 	.word	0x0000401e
     4a0:	40000c00 	.word	0x40000c00

000004a4 <ADC_0_init>:

void ADC_0_init(void)
{
     4a4:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     4a6:	4b05      	ldr	r3, [pc, #20]	; (4bc <ADC_0_init+0x18>)
     4a8:	4798      	blx	r3
	ADC_0_PORT_init();
     4aa:	4b05      	ldr	r3, [pc, #20]	; (4c0 <ADC_0_init+0x1c>)
     4ac:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     4ae:	2200      	movs	r2, #0
     4b0:	4904      	ldr	r1, [pc, #16]	; (4c4 <ADC_0_init+0x20>)
     4b2:	4805      	ldr	r0, [pc, #20]	; (4c8 <ADC_0_init+0x24>)
     4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <ADC_0_init+0x28>)
     4b6:	4798      	blx	r3
}
     4b8:	bd10      	pop	{r4, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00000485 	.word	0x00000485
     4c0:	00000449 	.word	0x00000449
     4c4:	42004000 	.word	0x42004000
     4c8:	200000d8 	.word	0x200000d8
     4cc:	00000e59 	.word	0x00000e59

000004d0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4d2:	46ce      	mov	lr, r9
     4d4:	4647      	mov	r7, r8
     4d6:	b580      	push	{r7, lr}
     4d8:	4a28      	ldr	r2, [pc, #160]	; (57c <EXTERNAL_IRQ_0_init+0xac>)
     4da:	4b29      	ldr	r3, [pc, #164]	; (580 <EXTERNAL_IRQ_0_init+0xb0>)
     4dc:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4de:	27c0      	movs	r7, #192	; 0xc0
     4e0:	05ff      	lsls	r7, r7, #23
     4e2:	2320      	movs	r3, #32
     4e4:	607b      	str	r3, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e6:	4b27      	ldr	r3, [pc, #156]	; (584 <EXTERNAL_IRQ_0_init+0xb4>)
     4e8:	4a27      	ldr	r2, [pc, #156]	; (588 <EXTERNAL_IRQ_0_init+0xb8>)
     4ea:	629a      	str	r2, [r3, #40]	; 0x28
     4ec:	4e27      	ldr	r6, [pc, #156]	; (58c <EXTERNAL_IRQ_0_init+0xbc>)
     4ee:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f0:	2545      	movs	r5, #69	; 0x45
     4f2:	5d59      	ldrb	r1, [r3, r5]
     4f4:	2204      	movs	r2, #4
     4f6:	4391      	bics	r1, r2
     4f8:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fa:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fc:	2401      	movs	r4, #1
     4fe:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     500:	2001      	movs	r0, #1
     502:	4301      	orrs	r1, r0
     504:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     506:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     508:	2132      	movs	r1, #50	; 0x32
     50a:	468c      	mov	ip, r1
     50c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     50e:	3d36      	subs	r5, #54	; 0x36
     510:	46a9      	mov	r9, r5
     512:	4029      	ands	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     514:	4665      	mov	r5, ip
     516:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     518:	2140      	movs	r1, #64	; 0x40
     51a:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51c:	491c      	ldr	r1, [pc, #112]	; (590 <EXTERNAL_IRQ_0_init+0xc0>)
     51e:	6299      	str	r1, [r3, #40]	; 0x28
     520:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     522:	2146      	movs	r1, #70	; 0x46
     524:	468c      	mov	ip, r1
     526:	5c59      	ldrb	r1, [r3, r1]
     528:	4391      	bics	r1, r2
     52a:	4665      	mov	r5, ip
     52c:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52e:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     530:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	4301      	orrs	r1, r0
     534:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     538:	2133      	movs	r1, #51	; 0x33
     53a:	468c      	mov	ip, r1
     53c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     53e:	3d37      	subs	r5, #55	; 0x37
     540:	43a9      	bics	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     542:	4665      	mov	r5, ip
     544:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     546:	2180      	movs	r1, #128	; 0x80
     548:	0089      	lsls	r1, r1, #2
     54a:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     54c:	4911      	ldr	r1, [pc, #68]	; (594 <EXTERNAL_IRQ_0_init+0xc4>)
     54e:	6299      	str	r1, [r3, #40]	; 0x28
     550:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     552:	2149      	movs	r1, #73	; 0x49
     554:	5c5e      	ldrb	r6, [r3, r1]
     556:	4396      	bics	r6, r2
     558:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     55a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     55c:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	4302      	orrs	r2, r0
     560:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     564:	3915      	subs	r1, #21
     566:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     568:	464d      	mov	r5, r9
     56a:	4015      	ands	r5, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56c:	545d      	strb	r5, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BUTTON3, PINMUX_PA09A_EIC_EXTINT9);

	ext_irq_init();
     56e:	4b0a      	ldr	r3, [pc, #40]	; (598 <EXTERNAL_IRQ_0_init+0xc8>)
     570:	4798      	blx	r3
}
     572:	bc0c      	pop	{r2, r3}
     574:	4690      	mov	r8, r2
     576:	4699      	mov	r9, r3
     578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	00004005 	.word	0x00004005
     580:	40000c00 	.word	0x40000c00
     584:	41004400 	.word	0x41004400
     588:	40020020 	.word	0x40020020
     58c:	c0020000 	.word	0xc0020000
     590:	40020040 	.word	0x40020040
     594:	40020200 	.word	0x40020200
     598:	00000f91 	.word	0x00000f91

0000059c <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     59c:	4a02      	ldr	r2, [pc, #8]	; (5a8 <FLASH_0_CLOCK_init+0xc>)
     59e:	69d3      	ldr	r3, [r2, #28]
     5a0:	2104      	movs	r1, #4
     5a2:	430b      	orrs	r3, r1
     5a4:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     5a6:	4770      	bx	lr
     5a8:	40000400 	.word	0x40000400

000005ac <FLASH_0_init>:

void FLASH_0_init(void)
{
     5ac:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     5ae:	4b03      	ldr	r3, [pc, #12]	; (5bc <FLASH_0_init+0x10>)
     5b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     5b2:	4903      	ldr	r1, [pc, #12]	; (5c0 <FLASH_0_init+0x14>)
     5b4:	4803      	ldr	r0, [pc, #12]	; (5c4 <FLASH_0_init+0x18>)
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <FLASH_0_init+0x1c>)
     5b8:	4798      	blx	r3
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	0000059d 	.word	0x0000059d
     5c0:	41004000 	.word	0x41004000
     5c4:	200000a4 	.word	0x200000a4
     5c8:	00001115 	.word	0x00001115

000005cc <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	46c6      	mov	lr, r8
     5d0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5d2:	22c0      	movs	r2, #192	; 0xc0
     5d4:	05d2      	lsls	r2, r2, #23
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	005b      	lsls	r3, r3, #1
     5da:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5dc:	4b23      	ldr	r3, [pc, #140]	; (66c <SPI_0_PORT_init+0xa0>)
     5de:	4924      	ldr	r1, [pc, #144]	; (670 <SPI_0_PORT_init+0xa4>)
     5e0:	6299      	str	r1, [r3, #40]	; 0x28
     5e2:	4924      	ldr	r1, [pc, #144]	; (674 <SPI_0_PORT_init+0xa8>)
     5e4:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e6:	2048      	movs	r0, #72	; 0x48
     5e8:	5c19      	ldrb	r1, [r3, r0]
     5ea:	2404      	movs	r4, #4
     5ec:	43a1      	bics	r1, r4
     5ee:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	2501      	movs	r5, #1
     5f4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	2401      	movs	r4, #1
     5f8:	4321      	orrs	r1, r4
     5fa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	2134      	movs	r1, #52	; 0x34
     600:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	260f      	movs	r6, #15
     604:	46b4      	mov	ip, r6
     606:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     608:	2702      	movs	r7, #2
     60a:	4338      	orrs	r0, r7
     60c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     610:	2180      	movs	r1, #128	; 0x80
     612:	00c9      	lsls	r1, r1, #3
     614:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     616:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     618:	4917      	ldr	r1, [pc, #92]	; (678 <SPI_0_PORT_init+0xac>)
     61a:	6299      	str	r1, [r3, #40]	; 0x28
     61c:	26c0      	movs	r6, #192	; 0xc0
     61e:	0636      	lsls	r6, r6, #24
     620:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     622:	214a      	movs	r1, #74	; 0x4a
     624:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     626:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     628:	4320      	orrs	r0, r4
     62a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62c:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62e:	3915      	subs	r1, #21
     630:	4688      	mov	r8, r1
     632:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     634:	4660      	mov	r0, ip
     636:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     638:	4339      	orrs	r1, r7
     63a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63c:	4640      	mov	r0, r8
     63e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     640:	2180      	movs	r1, #128	; 0x80
     642:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     644:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     646:	4a0d      	ldr	r2, [pc, #52]	; (67c <SPI_0_PORT_init+0xb0>)
     648:	629a      	str	r2, [r3, #40]	; 0x28
     64a:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64c:	3939      	subs	r1, #57	; 0x39
     64e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     650:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     652:	4322      	orrs	r2, r4
     654:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     656:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     658:	3914      	subs	r1, #20
     65a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     65c:	3826      	subs	r0, #38	; 0x26
     65e:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     660:	3021      	adds	r0, #33	; 0x21
     662:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     664:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK, PINMUX_PA07D_SERCOM0_PAD3);
}
     666:	bc04      	pop	{r2}
     668:	4690      	mov	r8, r2
     66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     66c:	41004400 	.word	0x41004400
     670:	40020100 	.word	0x40020100
     674:	c0020000 	.word	0xc0020000
     678:	40000400 	.word	0x40000400
     67c:	40000080 	.word	0x40000080

00000680 <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     680:	4a04      	ldr	r2, [pc, #16]	; (694 <SPI_0_CLOCK_init+0x14>)
     682:	6a13      	ldr	r3, [r2, #32]
     684:	2104      	movs	r1, #4
     686:	430b      	orrs	r3, r1
     688:	6213      	str	r3, [r2, #32]
     68a:	4a03      	ldr	r2, [pc, #12]	; (698 <SPI_0_CLOCK_init+0x18>)
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <SPI_0_CLOCK_init+0x1c>)
     68e:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     690:	4770      	bx	lr
     692:	46c0      	nop			; (mov r8, r8)
     694:	40000400 	.word	0x40000400
     698:	00004014 	.word	0x00004014
     69c:	40000c00 	.word	0x40000c00

000006a0 <SPI_0_init>:

void SPI_0_init(void)
{
     6a0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     6a2:	4b04      	ldr	r3, [pc, #16]	; (6b4 <SPI_0_init+0x14>)
     6a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     6a6:	4904      	ldr	r1, [pc, #16]	; (6b8 <SPI_0_init+0x18>)
     6a8:	4804      	ldr	r0, [pc, #16]	; (6bc <SPI_0_init+0x1c>)
     6aa:	4b05      	ldr	r3, [pc, #20]	; (6c0 <SPI_0_init+0x20>)
     6ac:	4798      	blx	r3
	SPI_0_PORT_init();
     6ae:	4b05      	ldr	r3, [pc, #20]	; (6c4 <SPI_0_init+0x24>)
     6b0:	4798      	blx	r3
}
     6b2:	bd10      	pop	{r4, pc}
     6b4:	00000681 	.word	0x00000681
     6b8:	42000800 	.word	0x42000800
     6bc:	200000ec 	.word	0x200000ec
     6c0:	00001485 	.word	0x00001485
     6c4:	000005cd 	.word	0x000005cd

000006c8 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ca:	46c6      	mov	lr, r8
     6cc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ce:	22c0      	movs	r2, #192	; 0xc0
     6d0:	05d2      	lsls	r2, r2, #23
     6d2:	2380      	movs	r3, #128	; 0x80
     6d4:	03db      	lsls	r3, r3, #15
     6d6:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d8:	4b24      	ldr	r3, [pc, #144]	; (76c <SPI_1_PORT_init+0xa4>)
     6da:	4925      	ldr	r1, [pc, #148]	; (770 <SPI_1_PORT_init+0xa8>)
     6dc:	6299      	str	r1, [r3, #40]	; 0x28
     6de:	4925      	ldr	r1, [pc, #148]	; (774 <SPI_1_PORT_init+0xac>)
     6e0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e2:	2056      	movs	r0, #86	; 0x56
     6e4:	5c19      	ldrb	r1, [r3, r0]
     6e6:	2404      	movs	r4, #4
     6e8:	43a1      	bics	r1, r4
     6ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ec:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ee:	2501      	movs	r5, #1
     6f0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f2:	2401      	movs	r4, #1
     6f4:	4321      	orrs	r1, r4
     6f6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fa:	213b      	movs	r1, #59	; 0x3b
     6fc:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6fe:	260f      	movs	r6, #15
     700:	46b4      	mov	ip, r6
     702:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     704:	2702      	movs	r7, #2
     706:	4338      	orrs	r0, r7
     708:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70a:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     70c:	2180      	movs	r1, #128	; 0x80
     70e:	0449      	lsls	r1, r1, #17
     710:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     712:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     714:	2680      	movs	r6, #128	; 0x80
     716:	05f6      	lsls	r6, r6, #23
     718:	629e      	str	r6, [r3, #40]	; 0x28
     71a:	4917      	ldr	r1, [pc, #92]	; (778 <SPI_1_PORT_init+0xb0>)
     71c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     71e:	2158      	movs	r1, #88	; 0x58
     720:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     722:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     724:	4320      	orrs	r0, r4
     726:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     728:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     72a:	391c      	subs	r1, #28
     72c:	4688      	mov	r8, r1
     72e:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     730:	4660      	mov	r0, ip
     732:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     734:	4339      	orrs	r1, r7
     736:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     738:	4640      	mov	r0, r8
     73a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     73c:	2180      	movs	r1, #128	; 0x80
     73e:	0309      	lsls	r1, r1, #12
     740:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     742:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     744:	629e      	str	r6, [r3, #40]	; 0x28
     746:	4a0d      	ldr	r2, [pc, #52]	; (77c <SPI_1_PORT_init+0xb4>)
     748:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     74a:	2153      	movs	r1, #83	; 0x53
     74c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     74e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     750:	4322      	orrs	r2, r4
     752:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     754:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	391a      	subs	r1, #26
     758:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	382d      	subs	r0, #45	; 0x2d
     75c:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	3021      	adds	r0, #33	; 0x21
     760:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK_EXT, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK_EXT, PINMUX_PA19D_SERCOM3_PAD3);
}
     764:	bc04      	pop	{r2}
     766:	4690      	mov	r8, r2
     768:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	41004400 	.word	0x41004400
     770:	40020000 	.word	0x40020000
     774:	c0020040 	.word	0xc0020040
     778:	c0000100 	.word	0xc0000100
     77c:	c0000008 	.word	0xc0000008

00000780 <SPI_1_CLOCK_init>:
     780:	4a04      	ldr	r2, [pc, #16]	; (794 <SPI_1_CLOCK_init+0x14>)
     782:	6a13      	ldr	r3, [r2, #32]
     784:	2120      	movs	r1, #32
     786:	430b      	orrs	r3, r1
     788:	6213      	str	r3, [r2, #32]
     78a:	4a03      	ldr	r2, [pc, #12]	; (798 <SPI_1_CLOCK_init+0x18>)
     78c:	4b03      	ldr	r3, [pc, #12]	; (79c <SPI_1_CLOCK_init+0x1c>)
     78e:	805a      	strh	r2, [r3, #2]

void SPI_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     790:	4770      	bx	lr
     792:	46c0      	nop			; (mov r8, r8)
     794:	40000400 	.word	0x40000400
     798:	00004017 	.word	0x00004017
     79c:	40000c00 	.word	0x40000c00

000007a0 <SPI_1_init>:

void SPI_1_init(void)
{
     7a0:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
     7a2:	4b04      	ldr	r3, [pc, #16]	; (7b4 <SPI_1_init+0x14>)
     7a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM3);
     7a6:	4904      	ldr	r1, [pc, #16]	; (7b8 <SPI_1_init+0x18>)
     7a8:	4804      	ldr	r0, [pc, #16]	; (7bc <SPI_1_init+0x1c>)
     7aa:	4b05      	ldr	r3, [pc, #20]	; (7c0 <SPI_1_init+0x20>)
     7ac:	4798      	blx	r3
	SPI_1_PORT_init();
     7ae:	4b05      	ldr	r3, [pc, #20]	; (7c4 <SPI_1_init+0x24>)
     7b0:	4798      	blx	r3
}
     7b2:	bd10      	pop	{r4, pc}
     7b4:	00000781 	.word	0x00000781
     7b8:	42001400 	.word	0x42001400
     7bc:	200000c0 	.word	0x200000c0
     7c0:	00001485 	.word	0x00001485
     7c4:	000006c9 	.word	0x000006c9

000007c8 <delay_driver_init>:

void delay_driver_init(void)
{
     7c8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     7ca:	4802      	ldr	r0, [pc, #8]	; (7d4 <delay_driver_init+0xc>)
     7cc:	4b02      	ldr	r3, [pc, #8]	; (7d8 <delay_driver_init+0x10>)
     7ce:	4798      	blx	r3
}
     7d0:	bd10      	pop	{r4, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	e000e010 	.word	0xe000e010
     7d8:	00000ee9 	.word	0x00000ee9

000007dc <PWM_0_CLOCK_init>:
     7dc:	4a04      	ldr	r2, [pc, #16]	; (7f0 <PWM_0_CLOCK_init+0x14>)
     7de:	6a11      	ldr	r1, [r2, #32]
     7e0:	2380      	movs	r3, #128	; 0x80
     7e2:	011b      	lsls	r3, r3, #4
     7e4:	430b      	orrs	r3, r1
     7e6:	6213      	str	r3, [r2, #32]
     7e8:	4a02      	ldr	r2, [pc, #8]	; (7f4 <PWM_0_CLOCK_init+0x18>)
     7ea:	4b03      	ldr	r3, [pc, #12]	; (7f8 <PWM_0_CLOCK_init+0x1c>)
     7ec:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     7ee:	4770      	bx	lr
     7f0:	40000400 	.word	0x40000400
     7f4:	0000401b 	.word	0x0000401b
     7f8:	40000c00 	.word	0x40000c00

000007fc <PWM_0_init>:

void PWM_0_init(void)
{
     7fc:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     7fe:	4b05      	ldr	r3, [pc, #20]	; (814 <PWM_0_init+0x18>)
     800:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     802:	4b05      	ldr	r3, [pc, #20]	; (818 <PWM_0_init+0x1c>)
     804:	4798      	blx	r3
     806:	0002      	movs	r2, r0
     808:	4904      	ldr	r1, [pc, #16]	; (81c <PWM_0_init+0x20>)
     80a:	4805      	ldr	r0, [pc, #20]	; (820 <PWM_0_init+0x24>)
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <PWM_0_init+0x28>)
     80e:	4798      	blx	r3
}
     810:	bd10      	pop	{r4, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	000007dd 	.word	0x000007dd
     818:	000027fd 	.word	0x000027fd
     81c:	42002c00 	.word	0x42002c00
     820:	20000088 	.word	0x20000088
     824:	0000141d 	.word	0x0000141d

00000828 <DAC_0_CLOCK_init>:
     828:	4a04      	ldr	r2, [pc, #16]	; (83c <DAC_0_CLOCK_init+0x14>)
     82a:	6a11      	ldr	r1, [r2, #32]
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	02db      	lsls	r3, r3, #11
     830:	430b      	orrs	r3, r1
     832:	6213      	str	r3, [r2, #32]
     834:	4a02      	ldr	r2, [pc, #8]	; (840 <DAC_0_CLOCK_init+0x18>)
     836:	4b03      	ldr	r3, [pc, #12]	; (844 <DAC_0_CLOCK_init+0x1c>)
     838:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     83a:	4770      	bx	lr
     83c:	40000400 	.word	0x40000400
     840:	00004021 	.word	0x00004021
     844:	40000c00 	.word	0x40000c00

00000848 <DAC_0_init>:

void DAC_0_init(void)
{
     848:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     84a:	4b03      	ldr	r3, [pc, #12]	; (858 <DAC_0_init+0x10>)
     84c:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     84e:	4903      	ldr	r1, [pc, #12]	; (85c <DAC_0_init+0x14>)
     850:	4803      	ldr	r0, [pc, #12]	; (860 <DAC_0_init+0x18>)
     852:	4b04      	ldr	r3, [pc, #16]	; (864 <DAC_0_init+0x1c>)
     854:	4798      	blx	r3
	DAC_0_PORT_init();
}
     856:	bd10      	pop	{r4, pc}
     858:	00000829 	.word	0x00000829
     85c:	42004800 	.word	0x42004800
     860:	200000e0 	.word	0x200000e0
     864:	00000ea9 	.word	0x00000ea9

00000868 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     868:	4a04      	ldr	r2, [pc, #16]	; (87c <WDT_0_CLOCK_init+0x14>)
     86a:	6993      	ldr	r3, [r2, #24]
     86c:	2110      	movs	r1, #16
     86e:	430b      	orrs	r3, r1
     870:	6193      	str	r3, [r2, #24]
     872:	4a03      	ldr	r2, [pc, #12]	; (880 <WDT_0_CLOCK_init+0x18>)
     874:	4b03      	ldr	r3, [pc, #12]	; (884 <WDT_0_CLOCK_init+0x1c>)
     876:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     878:	4770      	bx	lr
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	40000400 	.word	0x40000400
     880:	00004003 	.word	0x00004003
     884:	40000c00 	.word	0x40000c00

00000888 <WDT_0_init>:

void WDT_0_init(void)
{
     888:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     88a:	4b06      	ldr	r3, [pc, #24]	; (8a4 <WDT_0_init+0x1c>)
     88c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     88e:	2248      	movs	r2, #72	; 0x48
     890:	4905      	ldr	r1, [pc, #20]	; (8a8 <WDT_0_init+0x20>)
     892:	2001      	movs	r0, #1
     894:	4b05      	ldr	r3, [pc, #20]	; (8ac <WDT_0_init+0x24>)
     896:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     898:	4805      	ldr	r0, [pc, #20]	; (8b0 <WDT_0_init+0x28>)
     89a:	4b06      	ldr	r3, [pc, #24]	; (8b4 <WDT_0_init+0x2c>)
     89c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     89e:	4b06      	ldr	r3, [pc, #24]	; (8b8 <WDT_0_init+0x30>)
     8a0:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	00000869 	.word	0x00000869
     8a8:	00002ef0 	.word	0x00002ef0
     8ac:	000018ad 	.word	0x000018ad
     8b0:	200000dc 	.word	0x200000dc
     8b4:	40001000 	.word	0x40001000
     8b8:	00002839 	.word	0x00002839

000008bc <system_init>:

void system_init(void)
{
     8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8be:	46de      	mov	lr, fp
     8c0:	4657      	mov	r7, sl
     8c2:	464e      	mov	r6, r9
     8c4:	4645      	mov	r5, r8
     8c6:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     8c8:	4bba      	ldr	r3, [pc, #744]	; (bb4 <system_init+0x2f8>)
     8ca:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8cc:	22c0      	movs	r2, #192	; 0xc0
     8ce:	05d2      	lsls	r2, r2, #23
     8d0:	2101      	movs	r1, #1
     8d2:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8d4:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8d6:	4bb8      	ldr	r3, [pc, #736]	; (bb8 <system_init+0x2fc>)
     8d8:	48b8      	ldr	r0, [pc, #736]	; (bbc <system_init+0x300>)
     8da:	6298      	str	r0, [r3, #40]	; 0x28
     8dc:	20c0      	movs	r0, #192	; 0xc0
     8de:	0600      	lsls	r0, r0, #24
     8e0:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8e2:	2540      	movs	r5, #64	; 0x40
     8e4:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8e6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ea:	2002      	movs	r0, #2
     8ec:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8ee:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f0:	48b3      	ldr	r0, [pc, #716]	; (bc0 <system_init+0x304>)
     8f2:	6298      	str	r0, [r3, #40]	; 0x28
     8f4:	20c0      	movs	r0, #192	; 0xc0
     8f6:	0600      	lsls	r0, r0, #24
     8f8:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8fa:	3501      	adds	r5, #1
     8fc:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8fe:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     900:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     902:	2708      	movs	r7, #8
     904:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     906:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     908:	48ae      	ldr	r0, [pc, #696]	; (bc4 <system_init+0x308>)
     90a:	4682      	mov	sl, r0
     90c:	6298      	str	r0, [r3, #40]	; 0x28
     90e:	20c0      	movs	r0, #192	; 0xc0
     910:	0600      	lsls	r0, r0, #24
     912:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     914:	3502      	adds	r5, #2
     916:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     918:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     91a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     91c:	2010      	movs	r0, #16
     91e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     920:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     922:	48a9      	ldr	r0, [pc, #676]	; (bc8 <system_init+0x30c>)
     924:	6298      	str	r0, [r3, #40]	; 0x28
     926:	20c0      	movs	r0, #192	; 0xc0
     928:	0600      	lsls	r0, r0, #24
     92a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     92c:	3501      	adds	r5, #1
     92e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     930:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     932:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     934:	2080      	movs	r0, #128	; 0x80
     936:	0100      	lsls	r0, r0, #4
     938:	4680      	mov	r8, r0
     93a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     93c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     93e:	48a3      	ldr	r0, [pc, #652]	; (bcc <system_init+0x310>)
     940:	6298      	str	r0, [r3, #40]	; 0x28
     942:	20c0      	movs	r0, #192	; 0xc0
     944:	0600      	lsls	r0, r0, #24
     946:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     948:	3507      	adds	r5, #7
     94a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     94c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     94e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     950:	2080      	movs	r0, #128	; 0x80
     952:	0140      	lsls	r0, r0, #5
     954:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     956:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     958:	489d      	ldr	r0, [pc, #628]	; (bd0 <system_init+0x314>)
     95a:	6298      	str	r0, [r3, #40]	; 0x28
     95c:	20c0      	movs	r0, #192	; 0xc0
     95e:	0600      	lsls	r0, r0, #24
     960:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     962:	3501      	adds	r5, #1
     964:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     966:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     968:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     96a:	2080      	movs	r0, #128	; 0x80
     96c:	0180      	lsls	r0, r0, #6
     96e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     970:	4898      	ldr	r0, [pc, #608]	; (bd4 <system_init+0x318>)
     972:	6298      	str	r0, [r3, #40]	; 0x28
     974:	4898      	ldr	r0, [pc, #608]	; (bd8 <system_init+0x31c>)
     976:	4683      	mov	fp, r0
     978:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     97a:	204d      	movs	r0, #77	; 0x4d
     97c:	5c1c      	ldrb	r4, [r3, r0]
     97e:	3d48      	subs	r5, #72	; 0x48
     980:	43ac      	bics	r4, r5
     982:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     984:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     986:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     988:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     98a:	2080      	movs	r0, #128	; 0x80
     98c:	01c0      	lsls	r0, r0, #7
     98e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     990:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     992:	4892      	ldr	r0, [pc, #584]	; (bdc <system_init+0x320>)
     994:	6298      	str	r0, [r3, #40]	; 0x28
     996:	20c0      	movs	r0, #192	; 0xc0
     998:	0600      	lsls	r0, r0, #24
     99a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     99c:	204e      	movs	r0, #78	; 0x4e
     99e:	4684      	mov	ip, r0
     9a0:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9a2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9a4:	4664      	mov	r4, ip
     9a6:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9a8:	2080      	movs	r0, #128	; 0x80
     9aa:	0200      	lsls	r0, r0, #8
     9ac:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ae:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9b0:	488b      	ldr	r0, [pc, #556]	; (be0 <system_init+0x324>)
     9b2:	6298      	str	r0, [r3, #40]	; 0x28
     9b4:	20c0      	movs	r0, #192	; 0xc0
     9b6:	0600      	lsls	r0, r0, #24
     9b8:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ba:	204f      	movs	r0, #79	; 0x4f
     9bc:	4684      	mov	ip, r0
     9be:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9c0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	4664      	mov	r4, ip
     9c4:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c6:	2080      	movs	r0, #128	; 0x80
     9c8:	0240      	lsls	r0, r0, #9
     9ca:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9cc:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ce:	2080      	movs	r0, #128	; 0x80
     9d0:	05c0      	lsls	r0, r0, #23
     9d2:	6298      	str	r0, [r3, #40]	; 0x28
     9d4:	4c83      	ldr	r4, [pc, #524]	; (be4 <system_init+0x328>)
     9d6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d8:	2450      	movs	r4, #80	; 0x50
     9da:	46a1      	mov	r9, r4
     9dc:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9de:	438c      	bics	r4, r1
     9e0:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	464c      	mov	r4, r9
     9e4:	4666      	mov	r6, ip
     9e6:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e8:	2480      	movs	r4, #128	; 0x80
     9ea:	02a4      	lsls	r4, r4, #10
     9ec:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ee:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f0:	6298      	str	r0, [r3, #40]	; 0x28
     9f2:	4c7d      	ldr	r4, [pc, #500]	; (be8 <system_init+0x32c>)
     9f4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f6:	2451      	movs	r4, #81	; 0x51
     9f8:	46a1      	mov	r9, r4
     9fa:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9fc:	438c      	bics	r4, r1
     9fe:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a00:	464c      	mov	r4, r9
     a02:	4666      	mov	r6, ip
     a04:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a06:	2480      	movs	r4, #128	; 0x80
     a08:	02e4      	lsls	r4, r4, #11
     a0a:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a0e:	6298      	str	r0, [r3, #40]	; 0x28
     a10:	4c76      	ldr	r4, [pc, #472]	; (bec <system_init+0x330>)
     a12:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a14:	2452      	movs	r4, #82	; 0x52
     a16:	46a1      	mov	r9, r4
     a18:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	438c      	bics	r4, r1
     a1c:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	464c      	mov	r4, r9
     a20:	4666      	mov	r6, ip
     a22:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a24:	2480      	movs	r4, #128	; 0x80
     a26:	0364      	lsls	r4, r4, #13
     a28:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a2a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a2c:	6298      	str	r0, [r3, #40]	; 0x28
     a2e:	4c70      	ldr	r4, [pc, #448]	; (bf0 <system_init+0x334>)
     a30:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a32:	2454      	movs	r4, #84	; 0x54
     a34:	46a1      	mov	r9, r4
     a36:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a38:	438c      	bics	r4, r1
     a3a:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3c:	464c      	mov	r4, r9
     a3e:	4666      	mov	r6, ip
     a40:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a42:	2480      	movs	r4, #128	; 0x80
     a44:	0424      	lsls	r4, r4, #16
     a46:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a48:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a4a:	6298      	str	r0, [r3, #40]	; 0x28
     a4c:	4c69      	ldr	r4, [pc, #420]	; (bf4 <system_init+0x338>)
     a4e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a50:	2457      	movs	r4, #87	; 0x57
     a52:	46a1      	mov	r9, r4
     a54:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	438c      	bics	r4, r1
     a58:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	464c      	mov	r4, r9
     a5c:	4666      	mov	r6, ip
     a5e:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a60:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a62:	4865      	ldr	r0, [pc, #404]	; (bf8 <system_init+0x33c>)
     a64:	4681      	mov	r9, r0
     a66:	6298      	str	r0, [r3, #40]	; 0x28
     a68:	4864      	ldr	r0, [pc, #400]	; (bfc <system_init+0x340>)
     a6a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a6c:	205e      	movs	r0, #94	; 0x5e
     a6e:	5c1c      	ldrb	r4, [r3, r0]
     a70:	43ac      	bics	r4, r5
     a72:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a74:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a76:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a78:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a7a:	2080      	movs	r0, #128	; 0x80
     a7c:	0600      	lsls	r0, r0, #24
     a7e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a80:	4648      	mov	r0, r9
     a82:	6298      	str	r0, [r3, #40]	; 0x28
     a84:	485e      	ldr	r0, [pc, #376]	; (c00 <system_init+0x344>)
     a86:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a88:	205f      	movs	r0, #95	; 0x5f
     a8a:	5c1c      	ldrb	r4, [r3, r0]
     a8c:	43ac      	bics	r4, r5
     a8e:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a90:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a92:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a94:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a96:	3025      	adds	r0, #37	; 0x25
     a98:	5015      	str	r5, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9a:	3024      	adds	r0, #36	; 0x24
     a9c:	4c59      	ldr	r4, [pc, #356]	; (c04 <system_init+0x348>)
     a9e:	501c      	str	r4, [r3, r0]
     aa0:	465c      	mov	r4, fp
     aa2:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aa4:	26c2      	movs	r6, #194	; 0xc2
     aa6:	5d9c      	ldrb	r4, [r3, r6]
     aa8:	43ac      	bics	r4, r5
     aaa:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aac:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aae:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab0:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab2:	2494      	movs	r4, #148	; 0x94
     ab4:	46a4      	mov	ip, r4
     ab6:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab8:	3e3a      	subs	r6, #58	; 0x3a
     aba:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     abc:	4654      	mov	r4, sl
     abe:	501c      	str	r4, [r3, r0]
     ac0:	24c0      	movs	r4, #192	; 0xc0
     ac2:	0624      	lsls	r4, r4, #24
     ac4:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac6:	24c3      	movs	r4, #195	; 0xc3
     ac8:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aca:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     acc:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2780      	movs	r7, #128	; 0x80
     ad0:	007f      	lsls	r7, r7, #1
     ad2:	4664      	mov	r4, ip
     ad4:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad6:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	4f4b      	ldr	r7, [pc, #300]	; (c08 <system_init+0x34c>)
     ada:	501f      	str	r7, [r3, r0]
     adc:	24c0      	movs	r4, #192	; 0xc0
     ade:	0624      	lsls	r4, r4, #24
     ae0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae2:	24c8      	movs	r4, #200	; 0xc8
     ae4:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae6:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae8:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aea:	2780      	movs	r7, #128	; 0x80
     aec:	00bf      	lsls	r7, r7, #2
     aee:	4664      	mov	r4, ip
     af0:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af2:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     af4:	4f45      	ldr	r7, [pc, #276]	; (c0c <system_init+0x350>)
     af6:	501f      	str	r7, [r3, r0]
     af8:	24c0      	movs	r4, #192	; 0xc0
     afa:	0624      	lsls	r4, r4, #24
     afc:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afe:	24c9      	movs	r4, #201	; 0xc9
     b00:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b02:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b04:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b06:	2780      	movs	r7, #128	; 0x80
     b08:	00ff      	lsls	r7, r7, #3
     b0a:	4664      	mov	r4, ip
     b0c:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b0e:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b10:	4c3f      	ldr	r4, [pc, #252]	; (c10 <system_init+0x354>)
     b12:	501c      	str	r4, [r3, r0]
     b14:	24c0      	movs	r4, #192	; 0xc0
     b16:	0624      	lsls	r4, r4, #24
     b18:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b1a:	24ca      	movs	r4, #202	; 0xca
     b1c:	46a3      	mov	fp, r4
     b1e:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b20:	438c      	bics	r4, r1
     b22:	46a2      	mov	sl, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b24:	465c      	mov	r4, fp
     b26:	4657      	mov	r7, sl
     b28:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b2a:	4664      	mov	r4, ip
     b2c:	4647      	mov	r7, r8
     b2e:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b30:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b32:	4c26      	ldr	r4, [pc, #152]	; (bcc <system_init+0x310>)
     b34:	501c      	str	r4, [r3, r0]
     b36:	24c0      	movs	r4, #192	; 0xc0
     b38:	0624      	lsls	r4, r4, #24
     b3a:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3c:	3643      	adds	r6, #67	; 0x43
     b3e:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b40:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b42:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b44:	2480      	movs	r4, #128	; 0x80
     b46:	03e4      	lsls	r4, r4, #15
     b48:	3e47      	subs	r6, #71	; 0x47
     b4a:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4c:	464a      	mov	r2, r9
     b4e:	501a      	str	r2, [r3, r0]
     b50:	4a30      	ldr	r2, [pc, #192]	; (c14 <system_init+0x358>)
     b52:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b54:	22d6      	movs	r2, #214	; 0xd6
     b56:	5c98      	ldrb	r0, [r3, r2]
     b58:	43a8      	bics	r0, r5
     b5a:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b5c:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b60:	5498      	strb	r0, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DETECT, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     b62:	4b2d      	ldr	r3, [pc, #180]	; (c18 <system_init+0x35c>)
     b64:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     b66:	4b2d      	ldr	r3, [pc, #180]	; (c1c <system_init+0x360>)
     b68:	4798      	blx	r3

	FLASH_0_init();
     b6a:	4b2d      	ldr	r3, [pc, #180]	; (c20 <system_init+0x364>)
     b6c:	4798      	blx	r3

	SPI_0_init();
     b6e:	4b2d      	ldr	r3, [pc, #180]	; (c24 <system_init+0x368>)
     b70:	4798      	blx	r3

	SPI_1_init();
     b72:	4b2d      	ldr	r3, [pc, #180]	; (c28 <system_init+0x36c>)
     b74:	4798      	blx	r3

	delay_driver_init();
     b76:	4b2d      	ldr	r3, [pc, #180]	; (c2c <system_init+0x370>)
     b78:	4798      	blx	r3
     b7a:	4b25      	ldr	r3, [pc, #148]	; (c10 <system_init+0x354>)
     b7c:	699b      	ldr	r3, [r3, #24]
     b7e:	2220      	movs	r2, #32
     b80:	4313      	orrs	r3, r2
     b82:	4a23      	ldr	r2, [pc, #140]	; (c10 <system_init+0x354>)
     b84:	6193      	str	r3, [r2, #24]
     b86:	4a2a      	ldr	r2, [pc, #168]	; (c30 <system_init+0x374>)
     b88:	4b2a      	ldr	r3, [pc, #168]	; (c34 <system_init+0x378>)
     b8a:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b8c:	4b2a      	ldr	r3, [pc, #168]	; (c38 <system_init+0x37c>)
     b8e:	4798      	blx	r3
     b90:	0002      	movs	r2, r0
     b92:	492a      	ldr	r1, [pc, #168]	; (c3c <system_init+0x380>)
     b94:	482a      	ldr	r0, [pc, #168]	; (c40 <system_init+0x384>)
     b96:	4b2b      	ldr	r3, [pc, #172]	; (c44 <system_init+0x388>)
     b98:	4798      	blx	r3

	TIMER_0_init();

	PWM_0_init();
     b9a:	4b2b      	ldr	r3, [pc, #172]	; (c48 <system_init+0x38c>)
     b9c:	4798      	blx	r3

	DAC_0_init();
     b9e:	4b2b      	ldr	r3, [pc, #172]	; (c4c <system_init+0x390>)
     ba0:	4798      	blx	r3

	WDT_0_init();
     ba2:	4b2b      	ldr	r3, [pc, #172]	; (c50 <system_init+0x394>)
     ba4:	4798      	blx	r3
}
     ba6:	bc3c      	pop	{r2, r3, r4, r5}
     ba8:	4690      	mov	r8, r2
     baa:	4699      	mov	r9, r3
     bac:	46a2      	mov	sl, r4
     bae:	46ab      	mov	fp, r5
     bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00001a85 	.word	0x00001a85
     bb8:	41004400 	.word	0x41004400
     bbc:	40000001 	.word	0x40000001
     bc0:	40000002 	.word	0x40000002
     bc4:	40000008 	.word	0x40000008
     bc8:	40000010 	.word	0x40000010
     bcc:	40000800 	.word	0x40000800
     bd0:	40001000 	.word	0x40001000
     bd4:	40022000 	.word	0x40022000
     bd8:	c0020000 	.word	0xc0020000
     bdc:	40004000 	.word	0x40004000
     be0:	40008000 	.word	0x40008000
     be4:	c0000001 	.word	0xc0000001
     be8:	c0000002 	.word	0xc0000002
     bec:	c0000004 	.word	0xc0000004
     bf0:	c0000010 	.word	0xc0000010
     bf4:	c0000080 	.word	0xc0000080
     bf8:	40020000 	.word	0x40020000
     bfc:	c0024000 	.word	0xc0024000
     c00:	c0028000 	.word	0xc0028000
     c04:	40020004 	.word	0x40020004
     c08:	40000100 	.word	0x40000100
     c0c:	40000200 	.word	0x40000200
     c10:	40000400 	.word	0x40000400
     c14:	c0020040 	.word	0xc0020040
     c18:	000004a5 	.word	0x000004a5
     c1c:	000004d1 	.word	0x000004d1
     c20:	000005ad 	.word	0x000005ad
     c24:	000006a1 	.word	0x000006a1
     c28:	000007a1 	.word	0x000007a1
     c2c:	000007c9 	.word	0x000007c9
     c30:	00004004 	.word	0x00004004
     c34:	40000c00 	.word	0x40000c00
     c38:	000021db 	.word	0x000021db
     c3c:	40001400 	.word	0x40001400
     c40:	20000104 	.word	0x20000104
     c44:	00001745 	.word	0x00001745
     c48:	000007fd 	.word	0x000007fd
     c4c:	00000849 	.word	0x00000849
     c50:	00000889 	.word	0x00000889

00000c54 <split_to_8>:
	store_delivery_data();
}

void split_to_8(void)
{
	write_array[0] = writes >> 8;
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <split_to_8+0x1c>)
     c56:	881a      	ldrh	r2, [r3, #0]
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <split_to_8+0x20>)
     c5a:	0a11      	lsrs	r1, r2, #8
     c5c:	7019      	strb	r1, [r3, #0]
	write_array[1] = writes;
     c5e:	705a      	strb	r2, [r3, #1]
	address_array[0] = flash_address >> 8;
     c60:	4b05      	ldr	r3, [pc, #20]	; (c78 <split_to_8+0x24>)
     c62:	881a      	ldrh	r2, [r3, #0]
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <split_to_8+0x28>)
     c66:	0a11      	lsrs	r1, r2, #8
     c68:	8019      	strh	r1, [r3, #0]
	address_array[1] = flash_address;
     c6a:	805a      	strh	r2, [r3, #2]
}
     c6c:	4770      	bx	lr
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	20000082 	.word	0x20000082
     c74:	20000150 	.word	0x20000150
     c78:	20000014 	.word	0x20000014
     c7c:	20000154 	.word	0x20000154

00000c80 <store_delivery_data>:
{
     c80:	b530      	push	{r4, r5, lr}
     c82:	b0a1      	sub	sp, #132	; 0x84
	page_size = flash_get_page_size(&FLASH_0);
     c84:	4c14      	ldr	r4, [pc, #80]	; (cd8 <store_delivery_data+0x58>)
     c86:	0020      	movs	r0, r4
     c88:	4b14      	ldr	r3, [pc, #80]	; (cdc <store_delivery_data+0x5c>)
     c8a:	4798      	blx	r3
     c8c:	0005      	movs	r5, r0
	writes++;
     c8e:	4a14      	ldr	r2, [pc, #80]	; (ce0 <store_delivery_data+0x60>)
     c90:	8813      	ldrh	r3, [r2, #0]
     c92:	3301      	adds	r3, #1
     c94:	8013      	strh	r3, [r2, #0]
	split_to_8();
     c96:	4b13      	ldr	r3, [pc, #76]	; (ce4 <store_delivery_data+0x64>)
     c98:	4798      	blx	r3
	storage_array[0] = button_array[0];
     c9a:	4b13      	ldr	r3, [pc, #76]	; (ce8 <store_delivery_data+0x68>)
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	466a      	mov	r2, sp
     ca0:	7013      	strb	r3, [r2, #0]
	storage_array[1] = basal_rate[0];
     ca2:	4b12      	ldr	r3, [pc, #72]	; (cec <store_delivery_data+0x6c>)
     ca4:	781b      	ldrb	r3, [r3, #0]
     ca6:	7053      	strb	r3, [r2, #1]
	storage_array[2] = count[0];
     ca8:	4b11      	ldr	r3, [pc, #68]	; (cf0 <store_delivery_data+0x70>)
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	7093      	strb	r3, [r2, #2]
	storage_array[3] = write_array[0];
     cae:	4b11      	ldr	r3, [pc, #68]	; (cf4 <store_delivery_data+0x74>)
     cb0:	781a      	ldrb	r2, [r3, #0]
     cb2:	4669      	mov	r1, sp
     cb4:	70ca      	strb	r2, [r1, #3]
	storage_array[4] = write_array[1];
     cb6:	785b      	ldrb	r3, [r3, #1]
     cb8:	710b      	strb	r3, [r1, #4]
	storage_array[5] = address_array[0];
     cba:	4b0f      	ldr	r3, [pc, #60]	; (cf8 <store_delivery_data+0x78>)
     cbc:	881a      	ldrh	r2, [r3, #0]
     cbe:	714a      	strb	r2, [r1, #5]
	storage_array[6] = address_array[1];
     cc0:	885b      	ldrh	r3, [r3, #2]
     cc2:	466a      	mov	r2, sp
     cc4:	718b      	strb	r3, [r1, #6]
	flash_write(&FLASH_0, flash_address, storage_array, page_size);
     cc6:	4b0d      	ldr	r3, [pc, #52]	; (cfc <store_delivery_data+0x7c>)
     cc8:	8819      	ldrh	r1, [r3, #0]
     cca:	002b      	movs	r3, r5
     ccc:	0020      	movs	r0, r4
     cce:	4c0c      	ldr	r4, [pc, #48]	; (d00 <store_delivery_data+0x80>)
     cd0:	47a0      	blx	r4
}
     cd2:	b021      	add	sp, #132	; 0x84
     cd4:	bd30      	pop	{r4, r5, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	200000a4 	.word	0x200000a4
     cdc:	00001375 	.word	0x00001375
     ce0:	20000082 	.word	0x20000082
     ce4:	00000c55 	.word	0x00000c55
     ce8:	2000007c 	.word	0x2000007c
     cec:	20000018 	.word	0x20000018
     cf0:	20000080 	.word	0x20000080
     cf4:	20000150 	.word	0x20000150
     cf8:	20000154 	.word	0x20000154
     cfc:	20000014 	.word	0x20000014
     d00:	00001205 	.word	0x00001205

00000d04 <flash_initialise>:
{
     d04:	b510      	push	{r4, lr}
	flash_address = 0x4000;
     d06:	2180      	movs	r1, #128	; 0x80
     d08:	01c9      	lsls	r1, r1, #7
     d0a:	4b04      	ldr	r3, [pc, #16]	; (d1c <flash_initialise+0x18>)
     d0c:	8019      	strh	r1, [r3, #0]
	flash_erase(&FLASH_0, flash_address, 1);
     d0e:	2201      	movs	r2, #1
     d10:	4803      	ldr	r0, [pc, #12]	; (d20 <flash_initialise+0x1c>)
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <flash_initialise+0x20>)
     d14:	4798      	blx	r3
	store_delivery_data();
     d16:	4b04      	ldr	r3, [pc, #16]	; (d28 <flash_initialise+0x24>)
     d18:	4798      	blx	r3
}
     d1a:	bd10      	pop	{r4, pc}
     d1c:	20000014 	.word	0x20000014
     d20:	200000a4 	.word	0x200000a4
     d24:	000012c5 	.word	0x000012c5
     d28:	00000c81 	.word	0x00000c81

00000d2c <join_to_16>:

void join_to_16(void)
{
	writes = 0;
	writes = ((write_array[0] << 8) | write_array[1]);
     d2c:	4907      	ldr	r1, [pc, #28]	; (d4c <join_to_16+0x20>)
     d2e:	780a      	ldrb	r2, [r1, #0]
     d30:	0212      	lsls	r2, r2, #8
     d32:	784b      	ldrb	r3, [r1, #1]
     d34:	4313      	orrs	r3, r2
     d36:	4a06      	ldr	r2, [pc, #24]	; (d50 <join_to_16+0x24>)
     d38:	8013      	strh	r3, [r2, #0]
	flash_address = 0;
	flash_address = ((address_array[0] << 8) | address_array[1]);
     d3a:	4a06      	ldr	r2, [pc, #24]	; (d54 <join_to_16+0x28>)
     d3c:	8813      	ldrh	r3, [r2, #0]
     d3e:	021b      	lsls	r3, r3, #8
     d40:	8852      	ldrh	r2, [r2, #2]
     d42:	4313      	orrs	r3, r2
     d44:	4a04      	ldr	r2, [pc, #16]	; (d58 <join_to_16+0x2c>)
     d46:	8013      	strh	r3, [r2, #0]
	
}
     d48:	4770      	bx	lr
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	20000150 	.word	0x20000150
     d50:	20000082 	.word	0x20000082
     d54:	20000154 	.word	0x20000154
     d58:	20000014 	.word	0x20000014

00000d5c <get_delivery_data>:
{
     d5c:	b510      	push	{r4, lr}
     d5e:	b0a0      	sub	sp, #128	; 0x80
	page_size = flash_get_page_size(&FLASH_0);
     d60:	4c14      	ldr	r4, [pc, #80]	; (db4 <get_delivery_data+0x58>)
     d62:	0020      	movs	r0, r4
     d64:	4b14      	ldr	r3, [pc, #80]	; (db8 <get_delivery_data+0x5c>)
     d66:	4798      	blx	r3
     d68:	0003      	movs	r3, r0
	flash_read(&FLASH_0, flash_address, storage_array, page_size);
     d6a:	4a14      	ldr	r2, [pc, #80]	; (dbc <get_delivery_data+0x60>)
     d6c:	8811      	ldrh	r1, [r2, #0]
     d6e:	466a      	mov	r2, sp
     d70:	0020      	movs	r0, r4
     d72:	4c13      	ldr	r4, [pc, #76]	; (dc0 <get_delivery_data+0x64>)
     d74:	47a0      	blx	r4
	button_array[0] = storage_array[0];
     d76:	466b      	mov	r3, sp
     d78:	781a      	ldrb	r2, [r3, #0]
     d7a:	4b12      	ldr	r3, [pc, #72]	; (dc4 <get_delivery_data+0x68>)
     d7c:	701a      	strb	r2, [r3, #0]
	basal_rate[0] = storage_array[1];
     d7e:	466b      	mov	r3, sp
     d80:	785a      	ldrb	r2, [r3, #1]
     d82:	4b11      	ldr	r3, [pc, #68]	; (dc8 <get_delivery_data+0x6c>)
     d84:	701a      	strb	r2, [r3, #0]
	count[0] = storage_array[2];
     d86:	466b      	mov	r3, sp
     d88:	789a      	ldrb	r2, [r3, #2]
     d8a:	4b10      	ldr	r3, [pc, #64]	; (dcc <get_delivery_data+0x70>)
     d8c:	701a      	strb	r2, [r3, #0]
	write_array[0] = storage_array[3];
     d8e:	4b10      	ldr	r3, [pc, #64]	; (dd0 <get_delivery_data+0x74>)
     d90:	466a      	mov	r2, sp
     d92:	78d2      	ldrb	r2, [r2, #3]
     d94:	701a      	strb	r2, [r3, #0]
	write_array[1] = storage_array[4];
     d96:	466a      	mov	r2, sp
     d98:	7912      	ldrb	r2, [r2, #4]
     d9a:	705a      	strb	r2, [r3, #1]
	address_array[0] = storage_array[5];
     d9c:	4b0d      	ldr	r3, [pc, #52]	; (dd4 <get_delivery_data+0x78>)
     d9e:	466a      	mov	r2, sp
     da0:	7952      	ldrb	r2, [r2, #5]
     da2:	801a      	strh	r2, [r3, #0]
	address_array[1] = storage_array[6];
     da4:	466a      	mov	r2, sp
     da6:	7992      	ldrb	r2, [r2, #6]
     da8:	805a      	strh	r2, [r3, #2]
	join_to_16();
     daa:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <get_delivery_data+0x7c>)
     dac:	4798      	blx	r3
}
     dae:	b020      	add	sp, #128	; 0x80
     db0:	bd10      	pop	{r4, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	200000a4 	.word	0x200000a4
     db8:	00001375 	.word	0x00001375
     dbc:	20000014 	.word	0x20000014
     dc0:	0000115d 	.word	0x0000115d
     dc4:	2000007c 	.word	0x2000007c
     dc8:	20000018 	.word	0x20000018
     dcc:	20000080 	.word	0x20000080
     dd0:	20000150 	.word	0x20000150
     dd4:	20000154 	.word	0x20000154
     dd8:	00000d2d 	.word	0x00000d2d

00000ddc <check_writes>:

void check_writes(void)
{
	if (writes < 7000)
     ddc:	4b17      	ldr	r3, [pc, #92]	; (e3c <check_writes+0x60>)
     dde:	881b      	ldrh	r3, [r3, #0]
     de0:	4a17      	ldr	r2, [pc, #92]	; (e40 <check_writes+0x64>)
     de2:	4293      	cmp	r3, r2
     de4:	d910      	bls.n	e08 <check_writes+0x2c>
	{
		flash_address = 0x4000;
	}
	else if (writes < 14000)
     de6:	4a17      	ldr	r2, [pc, #92]	; (e44 <check_writes+0x68>)
     de8:	4293      	cmp	r3, r2
     dea:	d912      	bls.n	e12 <check_writes+0x36>
	{
		flash_address = 0x4100;
	}
	else if (writes < 21000)
     dec:	4a16      	ldr	r2, [pc, #88]	; (e48 <check_writes+0x6c>)
     dee:	4293      	cmp	r3, r2
     df0:	d914      	bls.n	e1c <check_writes+0x40>
	{
		flash_address = 0x4200;
	}
	else if (writes < 28000)
     df2:	4a16      	ldr	r2, [pc, #88]	; (e4c <check_writes+0x70>)
     df4:	4293      	cmp	r3, r2
     df6:	d916      	bls.n	e26 <check_writes+0x4a>
	{
		flash_address = 0x4300;
	}
	else if (writes < 35000)
     df8:	4a15      	ldr	r2, [pc, #84]	; (e50 <check_writes+0x74>)
     dfa:	4293      	cmp	r3, r2
     dfc:	d918      	bls.n	e30 <check_writes+0x54>
	{
		flash_address = 0x4400;
	}
	else
	{
		flash_address = 0x4500;
     dfe:	228a      	movs	r2, #138	; 0x8a
     e00:	01d2      	lsls	r2, r2, #7
     e02:	4b14      	ldr	r3, [pc, #80]	; (e54 <check_writes+0x78>)
     e04:	801a      	strh	r2, [r3, #0]
	}
     e06:	e003      	b.n	e10 <check_writes+0x34>
		flash_address = 0x4000;
     e08:	2280      	movs	r2, #128	; 0x80
     e0a:	01d2      	lsls	r2, r2, #7
     e0c:	4b11      	ldr	r3, [pc, #68]	; (e54 <check_writes+0x78>)
     e0e:	801a      	strh	r2, [r3, #0]
     e10:	4770      	bx	lr
		flash_address = 0x4100;
     e12:	2282      	movs	r2, #130	; 0x82
     e14:	01d2      	lsls	r2, r2, #7
     e16:	4b0f      	ldr	r3, [pc, #60]	; (e54 <check_writes+0x78>)
     e18:	801a      	strh	r2, [r3, #0]
     e1a:	e7f9      	b.n	e10 <check_writes+0x34>
		flash_address = 0x4200;
     e1c:	2284      	movs	r2, #132	; 0x84
     e1e:	01d2      	lsls	r2, r2, #7
     e20:	4b0c      	ldr	r3, [pc, #48]	; (e54 <check_writes+0x78>)
     e22:	801a      	strh	r2, [r3, #0]
     e24:	e7f4      	b.n	e10 <check_writes+0x34>
		flash_address = 0x4300;
     e26:	2286      	movs	r2, #134	; 0x86
     e28:	01d2      	lsls	r2, r2, #7
     e2a:	4b0a      	ldr	r3, [pc, #40]	; (e54 <check_writes+0x78>)
     e2c:	801a      	strh	r2, [r3, #0]
     e2e:	e7ef      	b.n	e10 <check_writes+0x34>
		flash_address = 0x4400;
     e30:	2288      	movs	r2, #136	; 0x88
     e32:	01d2      	lsls	r2, r2, #7
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <check_writes+0x78>)
     e36:	801a      	strh	r2, [r3, #0]
     e38:	e7ea      	b.n	e10 <check_writes+0x34>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	20000082 	.word	0x20000082
     e40:	00001b57 	.word	0x00001b57
     e44:	000036af 	.word	0x000036af
     e48:	00005207 	.word	0x00005207
     e4c:	00006d5f 	.word	0x00006d5f
     e50:	000088b7 	.word	0x000088b7
     e54:	20000014 	.word	0x20000014

00000e58 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     e58:	b570      	push	{r4, r5, r6, lr}
     e5a:	0004      	movs	r4, r0
     e5c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     e5e:	2800      	cmp	r0, #0
     e60:	d00c      	beq.n	e7c <adc_sync_init+0x24>
     e62:	0008      	movs	r0, r1
     e64:	1e43      	subs	r3, r0, #1
     e66:	4198      	sbcs	r0, r3
     e68:	b2c0      	uxtb	r0, r0
     e6a:	2239      	movs	r2, #57	; 0x39
     e6c:	4904      	ldr	r1, [pc, #16]	; (e80 <adc_sync_init+0x28>)
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <adc_sync_init+0x2c>)
     e70:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     e72:	0029      	movs	r1, r5
     e74:	0020      	movs	r0, r4
     e76:	4b04      	ldr	r3, [pc, #16]	; (e88 <adc_sync_init+0x30>)
     e78:	4798      	blx	r3
}
     e7a:	bd70      	pop	{r4, r5, r6, pc}
     e7c:	2000      	movs	r0, #0
     e7e:	e7f4      	b.n	e6a <adc_sync_init+0x12>
     e80:	00002f0c 	.word	0x00002f0c
     e84:	000018ad 	.word	0x000018ad
     e88:	00001a25 	.word	0x00001a25

00000e8c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     e90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e92:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e94:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e98:	4770      	bx	lr

00000e9a <atomic_leave_critical>:
     e9a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     e9e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ea0:	f383 8810 	msr	PRIMASK, r3
}
     ea4:	4770      	bx	lr
	...

00000ea8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     ea8:	b570      	push	{r4, r5, r6, lr}
     eaa:	0005      	movs	r5, r0
     eac:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     eae:	2800      	cmp	r0, #0
     eb0:	d011      	beq.n	ed6 <dac_sync_init+0x2e>
     eb2:	0008      	movs	r0, r1
     eb4:	1e43      	subs	r3, r0, #1
     eb6:	4198      	sbcs	r0, r3
     eb8:	b2c0      	uxtb	r0, r0
     eba:	2232      	movs	r2, #50	; 0x32
     ebc:	4907      	ldr	r1, [pc, #28]	; (edc <dac_sync_init+0x34>)
     ebe:	4b08      	ldr	r3, [pc, #32]	; (ee0 <dac_sync_init+0x38>)
     ec0:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     ec2:	0021      	movs	r1, r4
     ec4:	0028      	movs	r0, r5
     ec6:	4b07      	ldr	r3, [pc, #28]	; (ee4 <dac_sync_init+0x3c>)
     ec8:	4798      	blx	r3
	if (rc) {
     eca:	2800      	cmp	r0, #0
     ecc:	d102      	bne.n	ed4 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     ece:	2300      	movs	r3, #0
     ed0:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
     ed2:	60ab      	str	r3, [r5, #8]
	}

	return ERR_NONE;
}
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	2000      	movs	r0, #0
     ed8:	e7ef      	b.n	eba <dac_sync_init+0x12>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00002f28 	.word	0x00002f28
     ee0:	000018ad 	.word	0x000018ad
     ee4:	00001af9 	.word	0x00001af9

00000ee8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ee8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <delay_init+0xc>)
     eec:	6018      	str	r0, [r3, #0]
     eee:	4b02      	ldr	r3, [pc, #8]	; (ef8 <delay_init+0x10>)
     ef0:	4798      	blx	r3
}
     ef2:	bd10      	pop	{r4, pc}
     ef4:	20000050 	.word	0x20000050
     ef8:	00002675 	.word	0x00002675

00000efc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     efc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     efe:	4b04      	ldr	r3, [pc, #16]	; (f10 <delay_us+0x14>)
     f00:	681c      	ldr	r4, [r3, #0]
     f02:	4b04      	ldr	r3, [pc, #16]	; (f14 <delay_us+0x18>)
     f04:	4798      	blx	r3
     f06:	0001      	movs	r1, r0
     f08:	0020      	movs	r0, r4
     f0a:	4b03      	ldr	r3, [pc, #12]	; (f18 <delay_us+0x1c>)
     f0c:	4798      	blx	r3
}
     f0e:	bd10      	pop	{r4, pc}
     f10:	20000050 	.word	0x20000050
     f14:	00001a65 	.word	0x00001a65
     f18:	00002689 	.word	0x00002689

00000f1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f1c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f1e:	4b04      	ldr	r3, [pc, #16]	; (f30 <delay_ms+0x14>)
     f20:	681c      	ldr	r4, [r3, #0]
     f22:	4b04      	ldr	r3, [pc, #16]	; (f34 <delay_ms+0x18>)
     f24:	4798      	blx	r3
     f26:	0001      	movs	r1, r0
     f28:	0020      	movs	r0, r4
     f2a:	4b03      	ldr	r3, [pc, #12]	; (f38 <delay_ms+0x1c>)
     f2c:	4798      	blx	r3
}
     f2e:	bd10      	pop	{r4, pc}
     f30:	20000050 	.word	0x20000050
     f34:	00001a7d 	.word	0x00001a7d
     f38:	00002689 	.word	0x00002689

00000f3c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     f3e:	4b13      	ldr	r3, [pc, #76]	; (f8c <process_ext_irq+0x50>)
     f40:	68d9      	ldr	r1, [r3, #12]
     f42:	4288      	cmp	r0, r1
     f44:	d005      	beq.n	f52 <process_ext_irq+0x16>
     f46:	2201      	movs	r2, #1
     f48:	2703      	movs	r7, #3
     f4a:	2400      	movs	r4, #0
     f4c:	26ff      	movs	r6, #255	; 0xff
     f4e:	001d      	movs	r5, r3
     f50:	e016      	b.n	f80 <process_ext_irq+0x44>
     f52:	2301      	movs	r3, #1
			if (ext_irqs[middle].cb) {
     f54:	00db      	lsls	r3, r3, #3
     f56:	4a0d      	ldr	r2, [pc, #52]	; (f8c <process_ext_irq+0x50>)
     f58:	589b      	ldr	r3, [r3, r2]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d000      	beq.n	f60 <process_ext_irq+0x24>
				ext_irqs[middle].cb();
     f5e:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			upper = middle - 1;
     f62:	3a01      	subs	r2, #1
     f64:	b2d7      	uxtb	r7, r2
	while (upper >= lower) {
     f66:	42a7      	cmp	r7, r4
     f68:	d3fa      	bcc.n	f60 <process_ext_irq+0x24>
		middle = (upper + lower) >> 1;
     f6a:	193b      	adds	r3, r7, r4
     f6c:	105b      	asrs	r3, r3, #1
     f6e:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     f70:	2a02      	cmp	r2, #2
     f72:	d8f5      	bhi.n	f60 <process_ext_irq+0x24>
     f74:	4033      	ands	r3, r6
		if (ext_irqs[middle].pin == pin) {
     f76:	00d9      	lsls	r1, r3, #3
     f78:	1869      	adds	r1, r5, r1
     f7a:	6849      	ldr	r1, [r1, #4]
     f7c:	4281      	cmp	r1, r0
     f7e:	d0e9      	beq.n	f54 <process_ext_irq+0x18>
		if (ext_irqs[middle].pin < pin) {
     f80:	4288      	cmp	r0, r1
     f82:	d9ee      	bls.n	f62 <process_ext_irq+0x26>
			lower = middle + 1;
     f84:	3201      	adds	r2, #1
     f86:	b2d4      	uxtb	r4, r2
     f88:	e7ed      	b.n	f66 <process_ext_irq+0x2a>
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000054 	.word	0x20000054

00000f90 <ext_irq_init>:
{
     f90:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <ext_irq_init+0x20>)
     f94:	2101      	movs	r1, #1
     f96:	4249      	negs	r1, r1
     f98:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
     f9a:	2200      	movs	r2, #0
     f9c:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
     f9e:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
     fa0:	609a      	str	r2, [r3, #8]
		ext_irqs[i].pin = 0xFFFFFFFF;
     fa2:	6159      	str	r1, [r3, #20]
		ext_irqs[i].cb  = NULL;
     fa4:	611a      	str	r2, [r3, #16]
	return _ext_irq_init(process_ext_irq);
     fa6:	4803      	ldr	r0, [pc, #12]	; (fb4 <ext_irq_init+0x24>)
     fa8:	4b03      	ldr	r3, [pc, #12]	; (fb8 <ext_irq_init+0x28>)
     faa:	4798      	blx	r3
}
     fac:	bd10      	pop	{r4, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	20000054 	.word	0x20000054
     fb4:	00000f3d 	.word	0x00000f3d
     fb8:	00001b25 	.word	0x00001b25

00000fbc <ext_irq_register>:
{
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fbe:	46de      	mov	lr, fp
     fc0:	4657      	mov	r7, sl
     fc2:	464e      	mov	r6, r9
     fc4:	4645      	mov	r5, r8
     fc6:	b5e0      	push	{r5, r6, r7, lr}
		if (ext_irqs[i].pin == pin) {
     fc8:	4b34      	ldr	r3, [pc, #208]	; (109c <ext_irq_register+0xe0>)
     fca:	685b      	ldr	r3, [r3, #4]
     fcc:	4298      	cmp	r0, r3
     fce:	d01c      	beq.n	100a <ext_irq_register+0x4e>
     fd0:	4b32      	ldr	r3, [pc, #200]	; (109c <ext_irq_register+0xe0>)
     fd2:	68db      	ldr	r3, [r3, #12]
     fd4:	4298      	cmp	r0, r3
     fd6:	d016      	beq.n	1006 <ext_irq_register+0x4a>
     fd8:	4b30      	ldr	r3, [pc, #192]	; (109c <ext_irq_register+0xe0>)
     fda:	695b      	ldr	r3, [r3, #20]
     fdc:	4283      	cmp	r3, r0
     fde:	d010      	beq.n	1002 <ext_irq_register+0x46>
	if (NULL == cb) {
     fe0:	2900      	cmp	r1, #0
     fe2:	d03e      	beq.n	1062 <ext_irq_register+0xa6>
			if (NULL == ext_irqs[i].cb) {
     fe4:	4b2d      	ldr	r3, [pc, #180]	; (109c <ext_irq_register+0xe0>)
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	2b00      	cmp	r3, #0
     fea:	d051      	beq.n	1090 <ext_irq_register+0xd4>
     fec:	4b2b      	ldr	r3, [pc, #172]	; (109c <ext_irq_register+0xe0>)
     fee:	689b      	ldr	r3, [r3, #8]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d039      	beq.n	1068 <ext_irq_register+0xac>
     ff4:	4b29      	ldr	r3, [pc, #164]	; (109c <ext_irq_register+0xe0>)
     ff6:	691b      	ldr	r3, [r3, #16]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d046      	beq.n	108a <ext_irq_register+0xce>
		return ERR_INVALID_ARG;
     ffc:	200d      	movs	r0, #13
     ffe:	4240      	negs	r0, r0
    1000:	e029      	b.n	1056 <ext_irq_register+0x9a>
		if (ext_irqs[i].pin == pin) {
    1002:	2302      	movs	r3, #2
    1004:	e002      	b.n	100c <ext_irq_register+0x50>
    1006:	2301      	movs	r3, #1
    1008:	e000      	b.n	100c <ext_irq_register+0x50>
    100a:	2300      	movs	r3, #0
			ext_irqs[i].cb = cb;
    100c:	00db      	lsls	r3, r3, #3
    100e:	4a23      	ldr	r2, [pc, #140]	; (109c <ext_irq_register+0xe0>)
    1010:	5099      	str	r1, [r3, r2]
	if (NULL == cb) {
    1012:	2900      	cmp	r1, #0
    1014:	d11c      	bne.n	1050 <ext_irq_register+0x94>
		return _ext_irq_enable(pin, false);
    1016:	2100      	movs	r1, #0
    1018:	4b21      	ldr	r3, [pc, #132]	; (10a0 <ext_irq_register+0xe4>)
    101a:	4798      	blx	r3
    101c:	e01b      	b.n	1056 <ext_irq_register+0x9a>
    101e:	3308      	adds	r3, #8
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1020:	429c      	cmp	r4, r3
    1022:	d015      	beq.n	1050 <ext_irq_register+0x94>
    1024:	001a      	movs	r2, r3
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1026:	6859      	ldr	r1, [r3, #4]
    1028:	686f      	ldr	r7, [r5, #4]
    102a:	428f      	cmp	r7, r1
    102c:	d2f7      	bcs.n	101e <ext_irq_register+0x62>
    102e:	3101      	adds	r1, #1
    1030:	d0f5      	beq.n	101e <ext_irq_register+0x62>
				struct ext_irq tmp = ext_irqs[j];
    1032:	6819      	ldr	r1, [r3, #0]
    1034:	468c      	mov	ip, r1
    1036:	6859      	ldr	r1, [r3, #4]
    1038:	468b      	mov	fp, r1
				ext_irqs[j] = ext_irqs[i];
    103a:	4649      	mov	r1, r9
    103c:	4441      	add	r1, r8
    103e:	c9c0      	ldmia	r1!, {r6, r7}
    1040:	c2c0      	stmia	r2!, {r6, r7}
				ext_irqs[i] = tmp;
    1042:	4662      	mov	r2, ip
    1044:	4651      	mov	r1, sl
    1046:	600a      	str	r2, [r1, #0]
    1048:	4652      	mov	r2, sl
    104a:	4659      	mov	r1, fp
    104c:	6051      	str	r1, [r2, #4]
    104e:	e7e6      	b.n	101e <ext_irq_register+0x62>
	return _ext_irq_enable(pin, true);
    1050:	2101      	movs	r1, #1
    1052:	4b13      	ldr	r3, [pc, #76]	; (10a0 <ext_irq_register+0xe4>)
    1054:	4798      	blx	r3
}
    1056:	bc3c      	pop	{r2, r3, r4, r5}
    1058:	4690      	mov	r8, r2
    105a:	4699      	mov	r9, r3
    105c:	46a2      	mov	sl, r4
    105e:	46ab      	mov	fp, r5
    1060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    1062:	200d      	movs	r0, #13
    1064:	4240      	negs	r0, r0
    1066:	e7f6      	b.n	1056 <ext_irq_register+0x9a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1068:	2201      	movs	r2, #1
			if (NULL == ext_irqs[i].cb) {
    106a:	2401      	movs	r4, #1
				ext_irqs[i].cb  = cb;
    106c:	4b0b      	ldr	r3, [pc, #44]	; (109c <ext_irq_register+0xe0>)
    106e:	00e4      	lsls	r4, r4, #3
    1070:	50e1      	str	r1, [r4, r3]
				ext_irqs[i].pin = pin;
    1072:	191b      	adds	r3, r3, r4
    1074:	6058      	str	r0, [r3, #4]
				ext_irqs[i] = tmp;
    1076:	4c09      	ldr	r4, [pc, #36]	; (109c <ext_irq_register+0xe0>)
    1078:	00d6      	lsls	r6, r2, #3
    107a:	46b2      	mov	sl, r6
    107c:	44a2      	add	sl, r4
    107e:	0023      	movs	r3, r4
    1080:	3418      	adds	r4, #24
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1082:	46b0      	mov	r8, r6
    1084:	4655      	mov	r5, sl
				ext_irqs[j] = ext_irqs[i];
    1086:	4699      	mov	r9, r3
    1088:	e7cc      	b.n	1024 <ext_irq_register+0x68>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    108a:	2202      	movs	r2, #2
			if (NULL == ext_irqs[i].cb) {
    108c:	2402      	movs	r4, #2
    108e:	e7ed      	b.n	106c <ext_irq_register+0xb0>
				ext_irqs[i].cb  = cb;
    1090:	4b02      	ldr	r3, [pc, #8]	; (109c <ext_irq_register+0xe0>)
    1092:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
    1094:	6058      	str	r0, [r3, #4]
    1096:	2200      	movs	r2, #0
    1098:	e7ed      	b.n	1076 <ext_irq_register+0xba>
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000054 	.word	0x20000054
    10a0:	00001bbd 	.word	0x00001bbd

000010a4 <ext_irq_enable>:
{
    10a4:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
    10a6:	2101      	movs	r1, #1
    10a8:	4b01      	ldr	r3, [pc, #4]	; (10b0 <ext_irq_enable+0xc>)
    10aa:	4798      	blx	r3
}
    10ac:	bd10      	pop	{r4, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00001bbd 	.word	0x00001bbd

000010b4 <ext_irq_disable>:
{
    10b4:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, false);
    10b6:	2100      	movs	r1, #0
    10b8:	4b01      	ldr	r3, [pc, #4]	; (10c0 <ext_irq_disable+0xc>)
    10ba:	4798      	blx	r3
}
    10bc:	bd10      	pop	{r4, pc}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	00001bbd 	.word	0x00001bbd

000010c4 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    10c4:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    10c6:	6943      	ldr	r3, [r0, #20]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d000      	beq.n	10ce <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    10cc:	4798      	blx	r3
	}
}
    10ce:	bd10      	pop	{r4, pc}

000010d0 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    10d0:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    10d2:	6983      	ldr	r3, [r0, #24]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d000      	beq.n	10da <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    10d8:	4798      	blx	r3
	}
}
    10da:	bd10      	pop	{r4, pc}

000010dc <flash_is_address_aligned>:
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	0004      	movs	r4, r0
    10e0:	000d      	movs	r5, r1
	ASSERT(flash);
    10e2:	1e43      	subs	r3, r0, #1
    10e4:	4198      	sbcs	r0, r3
    10e6:	b2c0      	uxtb	r0, r0
    10e8:	2218      	movs	r2, #24
    10ea:	32ff      	adds	r2, #255	; 0xff
    10ec:	4906      	ldr	r1, [pc, #24]	; (1108 <flash_is_address_aligned+0x2c>)
    10ee:	4b07      	ldr	r3, [pc, #28]	; (110c <flash_is_address_aligned+0x30>)
    10f0:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    10f2:	0020      	movs	r0, r4
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <flash_is_address_aligned+0x34>)
    10f6:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    10f8:	3801      	subs	r0, #1
    10fa:	4205      	tst	r5, r0
    10fc:	d101      	bne.n	1102 <flash_is_address_aligned+0x26>
	return ERR_NONE;
    10fe:	2000      	movs	r0, #0
}
    1100:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
    1102:	200e      	movs	r0, #14
    1104:	4240      	negs	r0, r0
    1106:	e7fb      	b.n	1100 <flash_is_address_aligned+0x24>
    1108:	00002f44 	.word	0x00002f44
    110c:	000018ad 	.word	0x000018ad
    1110:	00001e01 	.word	0x00001e01

00001114 <flash_init>:
{
    1114:	b570      	push	{r4, r5, r6, lr}
    1116:	0005      	movs	r5, r0
    1118:	000c      	movs	r4, r1
	ASSERT(flash && hw);
    111a:	2800      	cmp	r0, #0
    111c:	d012      	beq.n	1144 <flash_init+0x30>
    111e:	0008      	movs	r0, r1
    1120:	1e43      	subs	r3, r0, #1
    1122:	4198      	sbcs	r0, r3
    1124:	b2c0      	uxtb	r0, r0
    1126:	2238      	movs	r2, #56	; 0x38
    1128:	4907      	ldr	r1, [pc, #28]	; (1148 <flash_init+0x34>)
    112a:	4b08      	ldr	r3, [pc, #32]	; (114c <flash_init+0x38>)
    112c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    112e:	0021      	movs	r1, r4
    1130:	0028      	movs	r0, r5
    1132:	4b07      	ldr	r3, [pc, #28]	; (1150 <flash_init+0x3c>)
    1134:	4798      	blx	r3
	if (rc) {
    1136:	2800      	cmp	r0, #0
    1138:	d103      	bne.n	1142 <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
    113a:	4b06      	ldr	r3, [pc, #24]	; (1154 <flash_init+0x40>)
    113c:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <flash_init+0x44>)
    1140:	606b      	str	r3, [r5, #4]
}
    1142:	bd70      	pop	{r4, r5, r6, pc}
    1144:	2000      	movs	r0, #0
    1146:	e7ee      	b.n	1126 <flash_init+0x12>
    1148:	00002f44 	.word	0x00002f44
    114c:	000018ad 	.word	0x000018ad
    1150:	00001da1 	.word	0x00001da1
    1154:	000010c5 	.word	0x000010c5
    1158:	000010d1 	.word	0x000010d1

0000115c <flash_read>:
{
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	46ce      	mov	lr, r9
    1160:	b500      	push	{lr}
    1162:	b082      	sub	sp, #8
    1164:	0004      	movs	r4, r0
    1166:	000f      	movs	r7, r1
    1168:	0016      	movs	r6, r2
    116a:	001d      	movs	r5, r3
	ASSERT(flash && buffer && length);
    116c:	2800      	cmp	r0, #0
    116e:	d018      	beq.n	11a2 <flash_read+0x46>
    1170:	2a00      	cmp	r2, #0
    1172:	d035      	beq.n	11e0 <flash_read+0x84>
    1174:	2001      	movs	r0, #1
    1176:	2b00      	cmp	r3, #0
    1178:	d114      	bne.n	11a4 <flash_read+0x48>
    117a:	2256      	movs	r2, #86	; 0x56
    117c:	491c      	ldr	r1, [pc, #112]	; (11f0 <flash_read+0x94>)
    117e:	2000      	movs	r0, #0
    1180:	4b1c      	ldr	r3, [pc, #112]	; (11f4 <flash_read+0x98>)
    1182:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1184:	9401      	str	r4, [sp, #4]
    1186:	0020      	movs	r0, r4
    1188:	4b1b      	ldr	r3, [pc, #108]	; (11f8 <flash_read+0x9c>)
    118a:	4798      	blx	r3
    118c:	4681      	mov	r9, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    118e:	0020      	movs	r0, r4
    1190:	4b1a      	ldr	r3, [pc, #104]	; (11fc <flash_read+0xa0>)
    1192:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    1194:	464b      	mov	r3, r9
    1196:	4358      	muls	r0, r3
    1198:	4287      	cmp	r7, r0
    119a:	d916      	bls.n	11ca <flash_read+0x6e>
		return ERR_BAD_ADDRESS;
    119c:	200e      	movs	r0, #14
    119e:	4240      	negs	r0, r0
    11a0:	e01a      	b.n	11d8 <flash_read+0x7c>
	ASSERT(flash && buffer && length);
    11a2:	2000      	movs	r0, #0
    11a4:	2256      	movs	r2, #86	; 0x56
    11a6:	4912      	ldr	r1, [pc, #72]	; (11f0 <flash_read+0x94>)
    11a8:	4b12      	ldr	r3, [pc, #72]	; (11f4 <flash_read+0x98>)
    11aa:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    11ac:	9401      	str	r4, [sp, #4]
    11ae:	0020      	movs	r0, r4
    11b0:	4b11      	ldr	r3, [pc, #68]	; (11f8 <flash_read+0x9c>)
    11b2:	4798      	blx	r3
    11b4:	4681      	mov	r9, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    11b6:	0020      	movs	r0, r4
    11b8:	4b10      	ldr	r3, [pc, #64]	; (11fc <flash_read+0xa0>)
    11ba:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    11bc:	464b      	mov	r3, r9
    11be:	4358      	muls	r0, r3
    11c0:	42b8      	cmp	r0, r7
    11c2:	d30f      	bcc.n	11e4 <flash_read+0x88>
    11c4:	19eb      	adds	r3, r5, r7
    11c6:	4298      	cmp	r0, r3
    11c8:	d30f      	bcc.n	11ea <flash_read+0x8e>
	_flash_read(&flash->dev, src_addr, buffer, length);
    11ca:	002b      	movs	r3, r5
    11cc:	0032      	movs	r2, r6
    11ce:	0039      	movs	r1, r7
    11d0:	9801      	ldr	r0, [sp, #4]
    11d2:	4c0b      	ldr	r4, [pc, #44]	; (1200 <flash_read+0xa4>)
    11d4:	47a0      	blx	r4
	return ERR_NONE;
    11d6:	2000      	movs	r0, #0
}
    11d8:	b002      	add	sp, #8
    11da:	bc04      	pop	{r2}
    11dc:	4691      	mov	r9, r2
    11de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    11e0:	2000      	movs	r0, #0
    11e2:	e7df      	b.n	11a4 <flash_read+0x48>
		return ERR_BAD_ADDRESS;
    11e4:	200e      	movs	r0, #14
    11e6:	4240      	negs	r0, r0
    11e8:	e7f6      	b.n	11d8 <flash_read+0x7c>
    11ea:	200e      	movs	r0, #14
    11ec:	4240      	negs	r0, r0
    11ee:	e7f3      	b.n	11d8 <flash_read+0x7c>
    11f0:	00002f44 	.word	0x00002f44
    11f4:	000018ad 	.word	0x000018ad
    11f8:	00001e01 	.word	0x00001e01
    11fc:	00001e05 	.word	0x00001e05
    1200:	00001e0b 	.word	0x00001e0b

00001204 <flash_write>:
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	46c6      	mov	lr, r8
    1208:	b500      	push	{lr}
    120a:	b082      	sub	sp, #8
    120c:	0004      	movs	r4, r0
    120e:	000d      	movs	r5, r1
    1210:	0017      	movs	r7, r2
    1212:	001e      	movs	r6, r3
	ASSERT(flash && buffer && length);
    1214:	2800      	cmp	r0, #0
    1216:	d018      	beq.n	124a <flash_write+0x46>
    1218:	2a00      	cmp	r2, #0
    121a:	d03c      	beq.n	1296 <flash_write+0x92>
    121c:	2001      	movs	r0, #1
    121e:	2b00      	cmp	r3, #0
    1220:	d114      	bne.n	124c <flash_write+0x48>
    1222:	226a      	movs	r2, #106	; 0x6a
    1224:	4921      	ldr	r1, [pc, #132]	; (12ac <flash_write+0xa8>)
    1226:	2000      	movs	r0, #0
    1228:	4b21      	ldr	r3, [pc, #132]	; (12b0 <flash_write+0xac>)
    122a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    122c:	9401      	str	r4, [sp, #4]
    122e:	0020      	movs	r0, r4
    1230:	4b20      	ldr	r3, [pc, #128]	; (12b4 <flash_write+0xb0>)
    1232:	4798      	blx	r3
    1234:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1236:	0020      	movs	r0, r4
    1238:	4b1f      	ldr	r3, [pc, #124]	; (12b8 <flash_write+0xb4>)
    123a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    123c:	4643      	mov	r3, r8
    123e:	4358      	muls	r0, r3
    1240:	4285      	cmp	r5, r0
    1242:	d916      	bls.n	1272 <flash_write+0x6e>
		return ERR_BAD_ADDRESS;
    1244:	200e      	movs	r0, #14
    1246:	4240      	negs	r0, r0
    1248:	e021      	b.n	128e <flash_write+0x8a>
	ASSERT(flash && buffer && length);
    124a:	2000      	movs	r0, #0
    124c:	226a      	movs	r2, #106	; 0x6a
    124e:	4917      	ldr	r1, [pc, #92]	; (12ac <flash_write+0xa8>)
    1250:	4b17      	ldr	r3, [pc, #92]	; (12b0 <flash_write+0xac>)
    1252:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1254:	9401      	str	r4, [sp, #4]
    1256:	0020      	movs	r0, r4
    1258:	4b16      	ldr	r3, [pc, #88]	; (12b4 <flash_write+0xb0>)
    125a:	4798      	blx	r3
    125c:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    125e:	0020      	movs	r0, r4
    1260:	4b15      	ldr	r3, [pc, #84]	; (12b8 <flash_write+0xb4>)
    1262:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    1264:	4643      	mov	r3, r8
    1266:	4358      	muls	r0, r3
    1268:	42a8      	cmp	r0, r5
    126a:	d316      	bcc.n	129a <flash_write+0x96>
    126c:	1973      	adds	r3, r6, r5
    126e:	4298      	cmp	r0, r3
    1270:	d316      	bcc.n	12a0 <flash_write+0x9c>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    1272:	0029      	movs	r1, r5
    1274:	9c01      	ldr	r4, [sp, #4]
    1276:	0020      	movs	r0, r4
    1278:	4b10      	ldr	r3, [pc, #64]	; (12bc <flash_write+0xb8>)
    127a:	4798      	blx	r3
    127c:	2800      	cmp	r0, #0
    127e:	d112      	bne.n	12a6 <flash_write+0xa2>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    1280:	0033      	movs	r3, r6
    1282:	003a      	movs	r2, r7
    1284:	0029      	movs	r1, r5
    1286:	0020      	movs	r0, r4
    1288:	4c0d      	ldr	r4, [pc, #52]	; (12c0 <flash_write+0xbc>)
    128a:	47a0      	blx	r4
	return ERR_NONE;
    128c:	2000      	movs	r0, #0
}
    128e:	b002      	add	sp, #8
    1290:	bc04      	pop	{r2}
    1292:	4690      	mov	r8, r2
    1294:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    1296:	2000      	movs	r0, #0
    1298:	e7d8      	b.n	124c <flash_write+0x48>
		return ERR_BAD_ADDRESS;
    129a:	200e      	movs	r0, #14
    129c:	4240      	negs	r0, r0
    129e:	e7f6      	b.n	128e <flash_write+0x8a>
    12a0:	200e      	movs	r0, #14
    12a2:	4240      	negs	r0, r0
    12a4:	e7f3      	b.n	128e <flash_write+0x8a>
		return ERR_DENIED;
    12a6:	2011      	movs	r0, #17
    12a8:	4240      	negs	r0, r0
    12aa:	e7f0      	b.n	128e <flash_write+0x8a>
    12ac:	00002f44 	.word	0x00002f44
    12b0:	000018ad 	.word	0x000018ad
    12b4:	00001e01 	.word	0x00001e01
    12b8:	00001e05 	.word	0x00001e05
    12bc:	00002045 	.word	0x00002045
    12c0:	00001e5d 	.word	0x00001e5d

000012c4 <flash_erase>:
{
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	b083      	sub	sp, #12
    12c8:	0004      	movs	r4, r0
    12ca:	000d      	movs	r5, r1
    12cc:	0016      	movs	r6, r2
	ASSERT(flash && page_nums);
    12ce:	2800      	cmp	r0, #0
    12d0:	d017      	beq.n	1302 <flash_erase+0x3e>
    12d2:	2001      	movs	r0, #1
    12d4:	2a00      	cmp	r2, #0
    12d6:	d115      	bne.n	1304 <flash_erase+0x40>
    12d8:	229a      	movs	r2, #154	; 0x9a
    12da:	491f      	ldr	r1, [pc, #124]	; (1358 <flash_erase+0x94>)
    12dc:	2000      	movs	r0, #0
    12de:	4b1f      	ldr	r3, [pc, #124]	; (135c <flash_erase+0x98>)
    12e0:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    12e2:	9401      	str	r4, [sp, #4]
    12e4:	0020      	movs	r0, r4
    12e6:	4b1e      	ldr	r3, [pc, #120]	; (1360 <flash_erase+0x9c>)
    12e8:	4798      	blx	r3
    12ea:	9000      	str	r0, [sp, #0]
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    12ec:	0020      	movs	r0, r4
    12ee:	4b1d      	ldr	r3, [pc, #116]	; (1364 <flash_erase+0xa0>)
    12f0:	4798      	blx	r3
    12f2:	0007      	movs	r7, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    12f4:	0029      	movs	r1, r5
    12f6:	0020      	movs	r0, r4
    12f8:	4b1b      	ldr	r3, [pc, #108]	; (1368 <flash_erase+0xa4>)
    12fa:	4798      	blx	r3
	if (rc) {
    12fc:	2800      	cmp	r0, #0
    12fe:	d016      	beq.n	132e <flash_erase+0x6a>
    1300:	e022      	b.n	1348 <flash_erase+0x84>
	ASSERT(flash && page_nums);
    1302:	2000      	movs	r0, #0
    1304:	229a      	movs	r2, #154	; 0x9a
    1306:	4914      	ldr	r1, [pc, #80]	; (1358 <flash_erase+0x94>)
    1308:	4b14      	ldr	r3, [pc, #80]	; (135c <flash_erase+0x98>)
    130a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    130c:	9401      	str	r4, [sp, #4]
    130e:	0020      	movs	r0, r4
    1310:	4b13      	ldr	r3, [pc, #76]	; (1360 <flash_erase+0x9c>)
    1312:	4798      	blx	r3
    1314:	9000      	str	r0, [sp, #0]
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1316:	0020      	movs	r0, r4
    1318:	4b12      	ldr	r3, [pc, #72]	; (1364 <flash_erase+0xa0>)
    131a:	4798      	blx	r3
    131c:	0007      	movs	r7, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    131e:	0029      	movs	r1, r5
    1320:	0020      	movs	r0, r4
    1322:	4b11      	ldr	r3, [pc, #68]	; (1368 <flash_erase+0xa4>)
    1324:	4798      	blx	r3
	if (rc) {
    1326:	2800      	cmp	r0, #0
    1328:	d10e      	bne.n	1348 <flash_erase+0x84>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    132a:	42be      	cmp	r6, r7
    132c:	d80e      	bhi.n	134c <flash_erase+0x88>
    132e:	9900      	ldr	r1, [sp, #0]
    1330:	0028      	movs	r0, r5
    1332:	4b0e      	ldr	r3, [pc, #56]	; (136c <flash_erase+0xa8>)
    1334:	4798      	blx	r3
    1336:	1980      	adds	r0, r0, r6
    1338:	42b8      	cmp	r0, r7
    133a:	d80a      	bhi.n	1352 <flash_erase+0x8e>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    133c:	0032      	movs	r2, r6
    133e:	0029      	movs	r1, r5
    1340:	9801      	ldr	r0, [sp, #4]
    1342:	4b0b      	ldr	r3, [pc, #44]	; (1370 <flash_erase+0xac>)
    1344:	4798      	blx	r3
	return ERR_NONE;
    1346:	2000      	movs	r0, #0
}
    1348:	b003      	add	sp, #12
    134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    134c:	200d      	movs	r0, #13
    134e:	4240      	negs	r0, r0
    1350:	e7fa      	b.n	1348 <flash_erase+0x84>
    1352:	200d      	movs	r0, #13
    1354:	4240      	negs	r0, r0
    1356:	e7f7      	b.n	1348 <flash_erase+0x84>
    1358:	00002f44 	.word	0x00002f44
    135c:	000018ad 	.word	0x000018ad
    1360:	00001e01 	.word	0x00001e01
    1364:	00001e05 	.word	0x00001e05
    1368:	000010dd 	.word	0x000010dd
    136c:	00002d2d 	.word	0x00002d2d
    1370:	00001f79 	.word	0x00001f79

00001374 <flash_get_page_size>:
{
    1374:	b510      	push	{r4, lr}
    1376:	0004      	movs	r4, r0
	ASSERT(flash);
    1378:	1e43      	subs	r3, r0, #1
    137a:	4198      	sbcs	r0, r3
    137c:	b2c0      	uxtb	r0, r0
    137e:	22f7      	movs	r2, #247	; 0xf7
    1380:	4903      	ldr	r1, [pc, #12]	; (1390 <flash_get_page_size+0x1c>)
    1382:	4b04      	ldr	r3, [pc, #16]	; (1394 <flash_get_page_size+0x20>)
    1384:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    1386:	0020      	movs	r0, r4
    1388:	4b03      	ldr	r3, [pc, #12]	; (1398 <flash_get_page_size+0x24>)
    138a:	4798      	blx	r3
}
    138c:	bd10      	pop	{r4, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	00002f44 	.word	0x00002f44
    1394:	000018ad 	.word	0x000018ad
    1398:	00001e01 	.word	0x00001e01

0000139c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    139c:	b570      	push	{r4, r5, r6, lr}
    139e:	0006      	movs	r6, r0
    13a0:	000c      	movs	r4, r1
    13a2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    13a4:	2800      	cmp	r0, #0
    13a6:	d00d      	beq.n	13c4 <io_write+0x28>
    13a8:	0008      	movs	r0, r1
    13aa:	1e43      	subs	r3, r0, #1
    13ac:	4198      	sbcs	r0, r3
    13ae:	b2c0      	uxtb	r0, r0
    13b0:	2234      	movs	r2, #52	; 0x34
    13b2:	4905      	ldr	r1, [pc, #20]	; (13c8 <io_write+0x2c>)
    13b4:	4b05      	ldr	r3, [pc, #20]	; (13cc <io_write+0x30>)
    13b6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    13b8:	6833      	ldr	r3, [r6, #0]
    13ba:	002a      	movs	r2, r5
    13bc:	0021      	movs	r1, r4
    13be:	0030      	movs	r0, r6
    13c0:	4798      	blx	r3
}
    13c2:	bd70      	pop	{r4, r5, r6, pc}
    13c4:	2000      	movs	r0, #0
    13c6:	e7f3      	b.n	13b0 <io_write+0x14>
    13c8:	00002f5c 	.word	0x00002f5c
    13cc:	000018ad 	.word	0x000018ad

000013d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    13d0:	b570      	push	{r4, r5, r6, lr}
    13d2:	0006      	movs	r6, r0
    13d4:	000c      	movs	r4, r1
    13d6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    13d8:	2800      	cmp	r0, #0
    13da:	d00d      	beq.n	13f8 <io_read+0x28>
    13dc:	0008      	movs	r0, r1
    13de:	1e43      	subs	r3, r0, #1
    13e0:	4198      	sbcs	r0, r3
    13e2:	b2c0      	uxtb	r0, r0
    13e4:	223d      	movs	r2, #61	; 0x3d
    13e6:	4905      	ldr	r1, [pc, #20]	; (13fc <io_read+0x2c>)
    13e8:	4b05      	ldr	r3, [pc, #20]	; (1400 <io_read+0x30>)
    13ea:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    13ec:	6873      	ldr	r3, [r6, #4]
    13ee:	002a      	movs	r2, r5
    13f0:	0021      	movs	r1, r4
    13f2:	0030      	movs	r0, r6
    13f4:	4798      	blx	r3
}
    13f6:	bd70      	pop	{r4, r5, r6, pc}
    13f8:	2000      	movs	r0, #0
    13fa:	e7f3      	b.n	13e4 <io_read+0x14>
    13fc:	00002f5c 	.word	0x00002f5c
    1400:	000018ad 	.word	0x000018ad

00001404 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1404:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1406:	6943      	ldr	r3, [r0, #20]
    1408:	2b00      	cmp	r3, #0
    140a:	d000      	beq.n	140e <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
    140c:	4798      	blx	r3
	}
}
    140e:	bd10      	pop	{r4, pc}

00001410 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1410:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1412:	6983      	ldr	r3, [r0, #24]
    1414:	2b00      	cmp	r3, #0
    1416:	d000      	beq.n	141a <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
    1418:	4798      	blx	r3
	}
}
    141a:	bd10      	pop	{r4, pc}

0000141c <pwm_init>:
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0005      	movs	r5, r0
    1420:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1422:	2800      	cmp	r0, #0
    1424:	d011      	beq.n	144a <pwm_init+0x2e>
    1426:	0008      	movs	r0, r1
    1428:	1e43      	subs	r3, r0, #1
    142a:	4198      	sbcs	r0, r3
    142c:	b2c0      	uxtb	r0, r0
    142e:	2233      	movs	r2, #51	; 0x33
    1430:	4907      	ldr	r1, [pc, #28]	; (1450 <pwm_init+0x34>)
    1432:	4b08      	ldr	r3, [pc, #32]	; (1454 <pwm_init+0x38>)
    1434:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1436:	0021      	movs	r1, r4
    1438:	0028      	movs	r0, r5
    143a:	4b07      	ldr	r3, [pc, #28]	; (1458 <pwm_init+0x3c>)
    143c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    143e:	4b07      	ldr	r3, [pc, #28]	; (145c <pwm_init+0x40>)
    1440:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <pwm_init+0x44>)
    1444:	606b      	str	r3, [r5, #4]
}
    1446:	2000      	movs	r0, #0
    1448:	bd70      	pop	{r4, r5, r6, pc}
    144a:	2000      	movs	r0, #0
    144c:	e7ef      	b.n	142e <pwm_init+0x12>
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	00002f70 	.word	0x00002f70
    1454:	000018ad 	.word	0x000018ad
    1458:	00002719 	.word	0x00002719
    145c:	00001405 	.word	0x00001405
    1460:	00001411 	.word	0x00001411

00001464 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
    1464:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
    1466:	4b05      	ldr	r3, [pc, #20]	; (147c <sleep+0x18>)
    1468:	4798      	blx	r3
    146a:	2800      	cmp	r0, #0
    146c:	d103      	bne.n	1476 <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
    146e:	4b04      	ldr	r3, [pc, #16]	; (1480 <sleep+0x1c>)
    1470:	4798      	blx	r3

	return ERR_NONE;
    1472:	2000      	movs	r0, #0
}
    1474:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
    1476:	200d      	movs	r0, #13
    1478:	4240      	negs	r0, r0
    147a:	e7fb      	b.n	1474 <sleep+0x10>
    147c:	0000208d 	.word	0x0000208d
    1480:	00001a5d 	.word	0x00001a5d

00001484 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1484:	b570      	push	{r4, r5, r6, lr}
    1486:	0004      	movs	r4, r0
    1488:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    148a:	2800      	cmp	r0, #0
    148c:	d016      	beq.n	14bc <spi_m_sync_init+0x38>
    148e:	0008      	movs	r0, r1
    1490:	1e43      	subs	r3, r0, #1
    1492:	4198      	sbcs	r0, r3
    1494:	b2c0      	uxtb	r0, r0
    1496:	2240      	movs	r2, #64	; 0x40
    1498:	4909      	ldr	r1, [pc, #36]	; (14c0 <spi_m_sync_init+0x3c>)
    149a:	4b0a      	ldr	r3, [pc, #40]	; (14c4 <spi_m_sync_init+0x40>)
    149c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    149e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    14a0:	1d20      	adds	r0, r4, #4
    14a2:	0029      	movs	r1, r5
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <spi_m_sync_init+0x44>)
    14a6:	4798      	blx	r3

	if (rc < 0) {
    14a8:	2800      	cmp	r0, #0
    14aa:	db06      	blt.n	14ba <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    14ac:	4b07      	ldr	r3, [pc, #28]	; (14cc <spi_m_sync_init+0x48>)
    14ae:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    14b0:	4b07      	ldr	r3, [pc, #28]	; (14d0 <spi_m_sync_init+0x4c>)
    14b2:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    14b4:	4b07      	ldr	r3, [pc, #28]	; (14d4 <spi_m_sync_init+0x50>)
    14b6:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    14b8:	2000      	movs	r0, #0
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	2000      	movs	r0, #0
    14be:	e7ea      	b.n	1496 <spi_m_sync_init+0x12>
    14c0:	00002f88 	.word	0x00002f88
    14c4:	000018ad 	.word	0x000018ad
    14c8:	00002265 	.word	0x00002265
    14cc:	ffff8000 	.word	0xffff8000
    14d0:	000015dd 	.word	0x000015dd
    14d4:	000015a1 	.word	0x000015a1

000014d8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    14d8:	b510      	push	{r4, lr}
    14da:	0004      	movs	r4, r0
	ASSERT(spi);
    14dc:	1e43      	subs	r3, r0, #1
    14de:	4198      	sbcs	r0, r3
    14e0:	b2c0      	uxtb	r0, r0
    14e2:	2257      	movs	r2, #87	; 0x57
    14e4:	4903      	ldr	r1, [pc, #12]	; (14f4 <spi_m_sync_enable+0x1c>)
    14e6:	4b04      	ldr	r3, [pc, #16]	; (14f8 <spi_m_sync_enable+0x20>)
    14e8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    14ea:	1d20      	adds	r0, r4, #4
    14ec:	4b03      	ldr	r3, [pc, #12]	; (14fc <spi_m_sync_enable+0x24>)
    14ee:	4798      	blx	r3
}
    14f0:	bd10      	pop	{r4, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	00002f88 	.word	0x00002f88
    14f8:	000018ad 	.word	0x000018ad
    14fc:	0000245d 	.word	0x0000245d

00001500 <spi_m_sync_set_baudrate>:
	ASSERT(spi);
	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
    1500:	b570      	push	{r4, r5, r6, lr}
    1502:	0004      	movs	r4, r0
    1504:	000d      	movs	r5, r1
	ASSERT(spi);
    1506:	1e43      	subs	r3, r0, #1
    1508:	4198      	sbcs	r0, r3
    150a:	b2c0      	uxtb	r0, r0
    150c:	2263      	movs	r2, #99	; 0x63
    150e:	4904      	ldr	r1, [pc, #16]	; (1520 <spi_m_sync_set_baudrate+0x20>)
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <spi_m_sync_set_baudrate+0x24>)
    1512:	4798      	blx	r3
	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
    1514:	1d20      	adds	r0, r4, #4
    1516:	0029      	movs	r1, r5
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <spi_m_sync_set_baudrate+0x28>)
    151a:	4798      	blx	r3
}
    151c:	bd70      	pop	{r4, r5, r6, pc}
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00002f88 	.word	0x00002f88
    1524:	000018ad 	.word	0x000018ad
    1528:	00002491 	.word	0x00002491

0000152c <spi_m_sync_set_char_size>:
	ASSERT(spi);
	return _spi_m_sync_set_mode(&spi->dev, mode);
}

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	0004      	movs	r4, r0
    1530:	000d      	movs	r5, r1
	ASSERT(spi);
    1532:	1e43      	subs	r3, r0, #1
    1534:	4198      	sbcs	r0, r3
    1536:	b2c0      	uxtb	r0, r0
    1538:	226f      	movs	r2, #111	; 0x6f
    153a:	4904      	ldr	r1, [pc, #16]	; (154c <spi_m_sync_set_char_size+0x20>)
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <spi_m_sync_set_char_size+0x24>)
    153e:	4798      	blx	r3
	return _spi_m_sync_set_char_size(&spi->dev, char_size);
    1540:	1d20      	adds	r0, r4, #4
    1542:	0029      	movs	r1, r5
    1544:	4b03      	ldr	r3, [pc, #12]	; (1554 <spi_m_sync_set_char_size+0x28>)
    1546:	4798      	blx	r3
}
    1548:	bd70      	pop	{r4, r5, r6, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	00002f88 	.word	0x00002f88
    1550:	000018ad 	.word	0x000018ad
    1554:	000024d1 	.word	0x000024d1

00001558 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1558:	b530      	push	{r4, r5, lr}
    155a:	b087      	sub	sp, #28
    155c:	0004      	movs	r4, r0
    155e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1560:	2800      	cmp	r0, #0
    1562:	d014      	beq.n	158e <spi_m_sync_transfer+0x36>
    1564:	0008      	movs	r0, r1
    1566:	1e43      	subs	r3, r0, #1
    1568:	4198      	sbcs	r0, r3
    156a:	b2c0      	uxtb	r0, r0
    156c:	22b3      	movs	r2, #179	; 0xb3
    156e:	4909      	ldr	r1, [pc, #36]	; (1594 <spi_m_sync_transfer+0x3c>)
    1570:	4b09      	ldr	r3, [pc, #36]	; (1598 <spi_m_sync_transfer+0x40>)
    1572:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1574:	682b      	ldr	r3, [r5, #0]
    1576:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1578:	686b      	ldr	r3, [r5, #4]
    157a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    157c:	68ab      	ldr	r3, [r5, #8]
    157e:	9301      	str	r3, [sp, #4]
    1580:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1582:	1d20      	adds	r0, r4, #4
    1584:	a903      	add	r1, sp, #12
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <spi_m_sync_transfer+0x44>)
    1588:	4798      	blx	r3
}
    158a:	b007      	add	sp, #28
    158c:	bd30      	pop	{r4, r5, pc}
    158e:	2000      	movs	r0, #0
    1590:	e7ec      	b.n	156c <spi_m_sync_transfer+0x14>
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	00002f88 	.word	0x00002f88
    1598:	000018ad 	.word	0x000018ad
    159c:	0000250d 	.word	0x0000250d

000015a0 <_spi_m_sync_io_write>:
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	b084      	sub	sp, #16
    15a4:	0004      	movs	r4, r0
    15a6:	000e      	movs	r6, r1
    15a8:	0015      	movs	r5, r2
	ASSERT(io);
    15aa:	1e43      	subs	r3, r0, #1
    15ac:	4198      	sbcs	r0, r3
    15ae:	b2c0      	uxtb	r0, r0
    15b0:	22a3      	movs	r2, #163	; 0xa3
    15b2:	4907      	ldr	r1, [pc, #28]	; (15d0 <_spi_m_sync_io_write+0x30>)
    15b4:	4b07      	ldr	r3, [pc, #28]	; (15d4 <_spi_m_sync_io_write+0x34>)
    15b6:	4798      	blx	r3
	xfer.rxbuf = 0;
    15b8:	2300      	movs	r3, #0
    15ba:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    15bc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    15be:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    15c0:	0020      	movs	r0, r4
    15c2:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    15c4:	a901      	add	r1, sp, #4
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <_spi_m_sync_io_write+0x38>)
    15c8:	4798      	blx	r3
}
    15ca:	b004      	add	sp, #16
    15cc:	bd70      	pop	{r4, r5, r6, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00002f88 	.word	0x00002f88
    15d4:	000018ad 	.word	0x000018ad
    15d8:	00001559 	.word	0x00001559

000015dc <_spi_m_sync_io_read>:
{
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	b084      	sub	sp, #16
    15e0:	0004      	movs	r4, r0
    15e2:	000e      	movs	r6, r1
    15e4:	0015      	movs	r5, r2
	ASSERT(io);
    15e6:	1e43      	subs	r3, r0, #1
    15e8:	4198      	sbcs	r0, r3
    15ea:	b2c0      	uxtb	r0, r0
    15ec:	2287      	movs	r2, #135	; 0x87
    15ee:	4907      	ldr	r1, [pc, #28]	; (160c <_spi_m_sync_io_read+0x30>)
    15f0:	4b07      	ldr	r3, [pc, #28]	; (1610 <_spi_m_sync_io_read+0x34>)
    15f2:	4798      	blx	r3
	xfer.rxbuf = buf;
    15f4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    15f6:	2300      	movs	r3, #0
    15f8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    15fa:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    15fc:	0020      	movs	r0, r4
    15fe:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1600:	a901      	add	r1, sp, #4
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <_spi_m_sync_io_read+0x38>)
    1604:	4798      	blx	r3
}
    1606:	b004      	add	sp, #16
    1608:	bd70      	pop	{r4, r5, r6, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	00002f88 	.word	0x00002f88
    1610:	000018ad 	.word	0x000018ad
    1614:	00001559 	.word	0x00001559

00001618 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1618:	b570      	push	{r4, r5, r6, lr}
    161a:	0004      	movs	r4, r0
    161c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    161e:	2800      	cmp	r0, #0
    1620:	d00b      	beq.n	163a <spi_m_sync_get_io_descriptor+0x22>
    1622:	0008      	movs	r0, r1
    1624:	1e43      	subs	r3, r0, #1
    1626:	4198      	sbcs	r0, r3
    1628:	b2c0      	uxtb	r0, r0
    162a:	22bd      	movs	r2, #189	; 0xbd
    162c:	4904      	ldr	r1, [pc, #16]	; (1640 <spi_m_sync_get_io_descriptor+0x28>)
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <spi_m_sync_get_io_descriptor+0x2c>)
    1630:	4798      	blx	r3
	*io = &spi->io;
    1632:	340c      	adds	r4, #12
    1634:	602c      	str	r4, [r5, #0]
	return 0;
}
    1636:	2000      	movs	r0, #0
    1638:	bd70      	pop	{r4, r5, r6, pc}
    163a:	2000      	movs	r0, #0
    163c:	e7f5      	b.n	162a <spi_m_sync_get_io_descriptor+0x12>
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	00002f88 	.word	0x00002f88
    1644:	000018ad 	.word	0x000018ad

00001648 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    164a:	46ce      	mov	lr, r9
    164c:	4647      	mov	r7, r8
    164e:	b580      	push	{r7, lr}
    1650:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1652:	6803      	ldr	r3, [r0, #0]
    1654:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1656:	2b00      	cmp	r3, #0
    1658:	d005      	beq.n	1666 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    165a:	688e      	ldr	r6, [r1, #8]
    165c:	001c      	movs	r4, r3
    165e:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1660:	2701      	movs	r7, #1
    1662:	1abf      	subs	r7, r7, r2
    1664:	e00d      	b.n	1682 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    1666:	4b12      	ldr	r3, [pc, #72]	; (16b0 <timer_add_timer_task+0x68>)
    1668:	4798      	blx	r3
		return;
    166a:	e018      	b.n	169e <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    166c:	18fb      	adds	r3, r7, r3
    166e:	68a0      	ldr	r0, [r4, #8]
    1670:	4680      	mov	r8, r0
    1672:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1674:	42b3      	cmp	r3, r6
    1676:	d20c      	bcs.n	1692 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1678:	6823      	ldr	r3, [r4, #0]
    167a:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    167c:	2b00      	cmp	r3, #0
    167e:	d00b      	beq.n	1698 <timer_add_timer_task+0x50>
    1680:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1682:	6863      	ldr	r3, [r4, #4]
    1684:	4293      	cmp	r3, r2
    1686:	d8f1      	bhi.n	166c <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1688:	68a0      	ldr	r0, [r4, #8]
    168a:	4680      	mov	r8, r0
    168c:	4443      	add	r3, r8
    168e:	1a9b      	subs	r3, r3, r2
    1690:	e7f0      	b.n	1674 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1692:	45a4      	cmp	ip, r4
    1694:	d007      	beq.n	16a6 <timer_add_timer_task+0x5e>
    1696:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1698:	0020      	movs	r0, r4
    169a:	4b06      	ldr	r3, [pc, #24]	; (16b4 <timer_add_timer_task+0x6c>)
    169c:	4798      	blx	r3
	}
}
    169e:	bc0c      	pop	{r2, r3}
    16a0:	4690      	mov	r8, r2
    16a2:	4699      	mov	r9, r3
    16a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    16a6:	4648      	mov	r0, r9
    16a8:	4b01      	ldr	r3, [pc, #4]	; (16b0 <timer_add_timer_task+0x68>)
    16aa:	4798      	blx	r3
    16ac:	e7f7      	b.n	169e <timer_add_timer_task+0x56>
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	000018d9 	.word	0x000018d9
    16b4:	00001905 	.word	0x00001905

000016b8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    16b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ba:	46c6      	mov	lr, r8
    16bc:	b500      	push	{lr}
    16be:	b082      	sub	sp, #8
    16c0:	0007      	movs	r7, r0
	return (void *)list->head;
    16c2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    16c4:	6903      	ldr	r3, [r0, #16]
    16c6:	3301      	adds	r3, #1
    16c8:	4698      	mov	r8, r3
    16ca:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16cc:	7e03      	ldrb	r3, [r0, #24]
    16ce:	07db      	lsls	r3, r3, #31
    16d0:	d411      	bmi.n	16f6 <timer_process_counted+0x3e>
    16d2:	7e03      	ldrb	r3, [r0, #24]
    16d4:	079b      	lsls	r3, r3, #30
    16d6:	d40e      	bmi.n	16f6 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    16d8:	2c00      	cmp	r4, #0
    16da:	d010      	beq.n	16fe <timer_process_counted+0x46>
    16dc:	4643      	mov	r3, r8
    16de:	6862      	ldr	r2, [r4, #4]
    16e0:	1a9b      	subs	r3, r3, r2
    16e2:	68a2      	ldr	r2, [r4, #8]
    16e4:	4293      	cmp	r3, r2
    16e6:	d30a      	bcc.n	16fe <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    16e8:	2314      	movs	r3, #20
    16ea:	469c      	mov	ip, r3
    16ec:	4484      	add	ip, r0
    16ee:	4663      	mov	r3, ip
    16f0:	9301      	str	r3, [sp, #4]
    16f2:	4e12      	ldr	r6, [pc, #72]	; (173c <timer_process_counted+0x84>)
    16f4:	e014      	b.n	1720 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    16f6:	7e3b      	ldrb	r3, [r7, #24]
    16f8:	2202      	movs	r2, #2
    16fa:	4313      	orrs	r3, r2
    16fc:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    16fe:	b002      	add	sp, #8
    1700:	bc04      	pop	{r2}
    1702:	4690      	mov	r8, r2
    1704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1706:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1708:	68e3      	ldr	r3, [r4, #12]
    170a:	0020      	movs	r0, r4
    170c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    170e:	2d00      	cmp	r5, #0
    1710:	d0f5      	beq.n	16fe <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1712:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1714:	4643      	mov	r3, r8
    1716:	686a      	ldr	r2, [r5, #4]
    1718:	1a9b      	subs	r3, r3, r2
    171a:	68aa      	ldr	r2, [r5, #8]
    171c:	4293      	cmp	r3, r2
    171e:	d3ee      	bcc.n	16fe <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    1720:	9801      	ldr	r0, [sp, #4]
    1722:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1724:	7c23      	ldrb	r3, [r4, #16]
    1726:	2b01      	cmp	r3, #1
    1728:	d1ed      	bne.n	1706 <timer_process_counted+0x4e>
			tmp->time_label = time;
    172a:	4643      	mov	r3, r8
    172c:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    172e:	4642      	mov	r2, r8
    1730:	0021      	movs	r1, r4
    1732:	9801      	ldr	r0, [sp, #4]
    1734:	4b02      	ldr	r3, [pc, #8]	; (1740 <timer_process_counted+0x88>)
    1736:	4798      	blx	r3
    1738:	e7e5      	b.n	1706 <timer_process_counted+0x4e>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	0000190d 	.word	0x0000190d
    1740:	00001649 	.word	0x00001649

00001744 <timer_init>:
{
    1744:	b570      	push	{r4, r5, r6, lr}
    1746:	0005      	movs	r5, r0
    1748:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    174a:	2800      	cmp	r0, #0
    174c:	d011      	beq.n	1772 <timer_init+0x2e>
    174e:	0008      	movs	r0, r1
    1750:	1e43      	subs	r3, r0, #1
    1752:	4198      	sbcs	r0, r3
    1754:	b2c0      	uxtb	r0, r0
    1756:	223b      	movs	r2, #59	; 0x3b
    1758:	4907      	ldr	r1, [pc, #28]	; (1778 <timer_init+0x34>)
    175a:	4b08      	ldr	r3, [pc, #32]	; (177c <timer_init+0x38>)
    175c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    175e:	0021      	movs	r1, r4
    1760:	0028      	movs	r0, r5
    1762:	4b07      	ldr	r3, [pc, #28]	; (1780 <timer_init+0x3c>)
    1764:	4798      	blx	r3
	descr->time                           = 0;
    1766:	2300      	movs	r3, #0
    1768:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    176a:	4b06      	ldr	r3, [pc, #24]	; (1784 <timer_init+0x40>)
    176c:	602b      	str	r3, [r5, #0]
}
    176e:	2000      	movs	r0, #0
    1770:	bd70      	pop	{r4, r5, r6, pc}
    1772:	2000      	movs	r0, #0
    1774:	e7ef      	b.n	1756 <timer_init+0x12>
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	00002fa4 	.word	0x00002fa4
    177c:	000018ad 	.word	0x000018ad
    1780:	000020e5 	.word	0x000020e5
    1784:	000016b9 	.word	0x000016b9

00001788 <timer_start>:
{
    1788:	b510      	push	{r4, lr}
    178a:	0004      	movs	r4, r0
	ASSERT(descr);
    178c:	1e43      	subs	r3, r0, #1
    178e:	4198      	sbcs	r0, r3
    1790:	b2c0      	uxtb	r0, r0
    1792:	2253      	movs	r2, #83	; 0x53
    1794:	4907      	ldr	r1, [pc, #28]	; (17b4 <timer_start+0x2c>)
    1796:	4b08      	ldr	r3, [pc, #32]	; (17b8 <timer_start+0x30>)
    1798:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    179a:	0020      	movs	r0, r4
    179c:	4b07      	ldr	r3, [pc, #28]	; (17bc <timer_start+0x34>)
    179e:	4798      	blx	r3
    17a0:	2800      	cmp	r0, #0
    17a2:	d104      	bne.n	17ae <timer_start+0x26>
	_timer_start(&descr->device);
    17a4:	0020      	movs	r0, r4
    17a6:	4b06      	ldr	r3, [pc, #24]	; (17c0 <timer_start+0x38>)
    17a8:	4798      	blx	r3
	return ERR_NONE;
    17aa:	2000      	movs	r0, #0
}
    17ac:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    17ae:	2011      	movs	r0, #17
    17b0:	4240      	negs	r0, r0
    17b2:	e7fb      	b.n	17ac <timer_start+0x24>
    17b4:	00002fa4 	.word	0x00002fa4
    17b8:	000018ad 	.word	0x000018ad
    17bc:	000021c9 	.word	0x000021c9
    17c0:	00002141 	.word	0x00002141

000017c4 <timer_stop>:
{
    17c4:	b510      	push	{r4, lr}
    17c6:	0004      	movs	r4, r0
	ASSERT(descr);
    17c8:	1e43      	subs	r3, r0, #1
    17ca:	4198      	sbcs	r0, r3
    17cc:	b2c0      	uxtb	r0, r0
    17ce:	2261      	movs	r2, #97	; 0x61
    17d0:	4907      	ldr	r1, [pc, #28]	; (17f0 <timer_stop+0x2c>)
    17d2:	4b08      	ldr	r3, [pc, #32]	; (17f4 <timer_stop+0x30>)
    17d4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    17d6:	0020      	movs	r0, r4
    17d8:	4b07      	ldr	r3, [pc, #28]	; (17f8 <timer_stop+0x34>)
    17da:	4798      	blx	r3
    17dc:	2800      	cmp	r0, #0
    17de:	d004      	beq.n	17ea <timer_stop+0x26>
	_timer_stop(&descr->device);
    17e0:	0020      	movs	r0, r4
    17e2:	4b06      	ldr	r3, [pc, #24]	; (17fc <timer_stop+0x38>)
    17e4:	4798      	blx	r3
	return ERR_NONE;
    17e6:	2000      	movs	r0, #0
}
    17e8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    17ea:	2011      	movs	r0, #17
    17ec:	4240      	negs	r0, r0
    17ee:	e7fb      	b.n	17e8 <timer_stop+0x24>
    17f0:	00002fa4 	.word	0x00002fa4
    17f4:	000018ad 	.word	0x000018ad
    17f8:	000021c9 	.word	0x000021c9
    17fc:	00002195 	.word	0x00002195

00001800 <timer_add_task>:
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	b082      	sub	sp, #8
    1804:	0004      	movs	r4, r0
    1806:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1808:	2800      	cmp	r0, #0
    180a:	d024      	beq.n	1856 <timer_add_task+0x56>
    180c:	0008      	movs	r0, r1
    180e:	1e43      	subs	r3, r0, #1
    1810:	4198      	sbcs	r0, r3
    1812:	b2c0      	uxtb	r0, r0
    1814:	227a      	movs	r2, #122	; 0x7a
    1816:	491e      	ldr	r1, [pc, #120]	; (1890 <timer_add_task+0x90>)
    1818:	4b1e      	ldr	r3, [pc, #120]	; (1894 <timer_add_task+0x94>)
    181a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    181c:	7e23      	ldrb	r3, [r4, #24]
    181e:	2201      	movs	r2, #1
    1820:	4313      	orrs	r3, r2
    1822:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1824:	0026      	movs	r6, r4
    1826:	3614      	adds	r6, #20
    1828:	0029      	movs	r1, r5
    182a:	0030      	movs	r0, r6
    182c:	4b1a      	ldr	r3, [pc, #104]	; (1898 <timer_add_task+0x98>)
    182e:	4798      	blx	r3
    1830:	2800      	cmp	r0, #0
    1832:	d112      	bne.n	185a <timer_add_task+0x5a>
	task->time_label = descr->time;
    1834:	6923      	ldr	r3, [r4, #16]
    1836:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1838:	6922      	ldr	r2, [r4, #16]
    183a:	0029      	movs	r1, r5
    183c:	0030      	movs	r0, r6
    183e:	4b17      	ldr	r3, [pc, #92]	; (189c <timer_add_task+0x9c>)
    1840:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1842:	7e23      	ldrb	r3, [r4, #24]
    1844:	2201      	movs	r2, #1
    1846:	4393      	bics	r3, r2
    1848:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    184a:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    184c:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    184e:	079b      	lsls	r3, r3, #30
    1850:	d40f      	bmi.n	1872 <timer_add_task+0x72>
}
    1852:	b002      	add	sp, #8
    1854:	bd70      	pop	{r4, r5, r6, pc}
    1856:	2000      	movs	r0, #0
    1858:	e7dc      	b.n	1814 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    185a:	7e23      	ldrb	r3, [r4, #24]
    185c:	2201      	movs	r2, #1
    185e:	4393      	bics	r3, r2
    1860:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1862:	327e      	adds	r2, #126	; 0x7e
    1864:	490a      	ldr	r1, [pc, #40]	; (1890 <timer_add_task+0x90>)
    1866:	2000      	movs	r0, #0
    1868:	4b0a      	ldr	r3, [pc, #40]	; (1894 <timer_add_task+0x94>)
    186a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    186c:	2012      	movs	r0, #18
    186e:	4240      	negs	r0, r0
    1870:	e7ef      	b.n	1852 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1872:	a801      	add	r0, sp, #4
    1874:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <timer_add_task+0xa0>)
    1876:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1878:	7e23      	ldrb	r3, [r4, #24]
    187a:	2202      	movs	r2, #2
    187c:	4393      	bics	r3, r2
    187e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1880:	0020      	movs	r0, r4
    1882:	4b08      	ldr	r3, [pc, #32]	; (18a4 <timer_add_task+0xa4>)
    1884:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1886:	a801      	add	r0, sp, #4
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <timer_add_task+0xa8>)
    188a:	4798      	blx	r3
	return ERR_NONE;
    188c:	2000      	movs	r0, #0
    188e:	e7e0      	b.n	1852 <timer_add_task+0x52>
    1890:	00002fa4 	.word	0x00002fa4
    1894:	000018ad 	.word	0x000018ad
    1898:	000018b5 	.word	0x000018b5
    189c:	00001649 	.word	0x00001649
    18a0:	00000e8d 	.word	0x00000e8d
    18a4:	000021d9 	.word	0x000021d9
    18a8:	00000e9b 	.word	0x00000e9b

000018ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    18ac:	2800      	cmp	r0, #0
    18ae:	d100      	bne.n	18b2 <assert+0x6>
		__asm("BKPT #0");
    18b0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    18b2:	4770      	bx	lr

000018b4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    18b4:	6803      	ldr	r3, [r0, #0]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d00a      	beq.n	18d0 <is_list_element+0x1c>
		if (it == element) {
    18ba:	428b      	cmp	r3, r1
    18bc:	d00a      	beq.n	18d4 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <is_list_element+0x18>
		if (it == element) {
    18c4:	4299      	cmp	r1, r3
    18c6:	d1fa      	bne.n	18be <is_list_element+0xa>
			return true;
    18c8:	2001      	movs	r0, #1
    18ca:	e000      	b.n	18ce <is_list_element+0x1a>
		}
	}

	return false;
    18cc:	2000      	movs	r0, #0
}
    18ce:	4770      	bx	lr
	return false;
    18d0:	2000      	movs	r0, #0
    18d2:	e7fc      	b.n	18ce <is_list_element+0x1a>
			return true;
    18d4:	2001      	movs	r0, #1
    18d6:	e7fa      	b.n	18ce <is_list_element+0x1a>

000018d8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    18d8:	b570      	push	{r4, r5, r6, lr}
    18da:	0004      	movs	r4, r0
    18dc:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <list_insert_as_head+0x20>)
    18e0:	4798      	blx	r3
    18e2:	2301      	movs	r3, #1
    18e4:	4058      	eors	r0, r3
    18e6:	b2c0      	uxtb	r0, r0
    18e8:	2239      	movs	r2, #57	; 0x39
    18ea:	4904      	ldr	r1, [pc, #16]	; (18fc <list_insert_as_head+0x24>)
    18ec:	4b04      	ldr	r3, [pc, #16]	; (1900 <list_insert_as_head+0x28>)
    18ee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    18f0:	6823      	ldr	r3, [r4, #0]
    18f2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    18f4:	6025      	str	r5, [r4, #0]
}
    18f6:	bd70      	pop	{r4, r5, r6, pc}
    18f8:	000018b5 	.word	0x000018b5
    18fc:	00002fbc 	.word	0x00002fbc
    1900:	000018ad 	.word	0x000018ad

00001904 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1904:	6803      	ldr	r3, [r0, #0]
    1906:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1908:	6001      	str	r1, [r0, #0]
}
    190a:	4770      	bx	lr

0000190c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    190c:	6803      	ldr	r3, [r0, #0]
    190e:	2b00      	cmp	r3, #0
    1910:	d001      	beq.n	1916 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1912:	681a      	ldr	r2, [r3, #0]
    1914:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1916:	0018      	movs	r0, r3
    1918:	4770      	bx	lr

0000191a <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
    191a:	2000      	movs	r0, #0
    191c:	4770      	bx	lr
	...

00001920 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	0004      	movs	r4, r0
    1924:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    1926:	4b39      	ldr	r3, [pc, #228]	; (1a0c <_adc_init+0xec>)
    1928:	18c0      	adds	r0, r0, r3
    192a:	4242      	negs	r2, r0
    192c:	4142      	adcs	r2, r0
    192e:	b2d0      	uxtb	r0, r2
    1930:	2294      	movs	r2, #148	; 0x94
    1932:	4937      	ldr	r1, [pc, #220]	; (1a10 <_adc_init+0xf0>)
    1934:	4b37      	ldr	r3, [pc, #220]	; (1a14 <_adc_init+0xf4>)
    1936:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1938:	4b37      	ldr	r3, [pc, #220]	; (1a18 <_adc_init+0xf8>)
    193a:	681a      	ldr	r2, [r3, #0]
    193c:	0152      	lsls	r2, r2, #5
    193e:	23e0      	movs	r3, #224	; 0xe0
    1940:	00db      	lsls	r3, r3, #3
    1942:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    1944:	4b35      	ldr	r3, [pc, #212]	; (1a1c <_adc_init+0xfc>)
    1946:	6859      	ldr	r1, [r3, #4]
    1948:	0149      	lsls	r1, r1, #5
    194a:	681b      	ldr	r3, [r3, #0]
    194c:	0edb      	lsrs	r3, r3, #27
    194e:	430b      	orrs	r3, r1
    1950:	21ff      	movs	r1, #255	; 0xff
    1952:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1954:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1956:	7e63      	ldrb	r3, [r4, #25]
    1958:	09db      	lsrs	r3, r3, #7
    195a:	d1fc      	bne.n	1956 <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    195c:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    195e:	079b      	lsls	r3, r3, #30
    1960:	d504      	bpl.n	196c <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1962:	2300      	movs	r3, #0
    1964:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1966:	7e63      	ldrb	r3, [r4, #25]
    1968:	09db      	lsrs	r3, r3, #7
    196a:	d1fc      	bne.n	1966 <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
    196c:	2301      	movs	r3, #1
    196e:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1970:	7e63      	ldrb	r3, [r4, #25]
    1972:	09db      	lsrs	r3, r3, #7
    1974:	d1fc      	bne.n	1970 <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1976:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1978:	00ea      	lsls	r2, r5, #3
    197a:	1b52      	subs	r2, r2, r5
    197c:	0092      	lsls	r2, r2, #2
    197e:	4b28      	ldr	r3, [pc, #160]	; (1a20 <_adc_init+0x100>)
    1980:	189b      	adds	r3, r3, r2
    1982:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
    1984:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1986:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
    1988:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    198a:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
    198c:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    198e:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
    1990:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1992:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    1994:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1996:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1998:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    199a:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    199c:	222a      	movs	r2, #42	; 0x2a
    199e:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    19a0:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    19a2:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    19a4:	7e63      	ldrb	r3, [r4, #25]
    19a6:	09db      	lsrs	r3, r3, #7
    19a8:	d1fc      	bne.n	19a4 <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    19aa:	00eb      	lsls	r3, r5, #3
    19ac:	1b5b      	subs	r3, r3, r5
    19ae:	009b      	lsls	r3, r3, #2
    19b0:	4a1b      	ldr	r2, [pc, #108]	; (1a20 <_adc_init+0x100>)
    19b2:	18d3      	adds	r3, r2, r3
    19b4:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    19b6:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    19b8:	7e63      	ldrb	r3, [r4, #25]
    19ba:	09db      	lsrs	r3, r3, #7
    19bc:	d1fc      	bne.n	19b8 <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    19be:	00eb      	lsls	r3, r5, #3
    19c0:	1b5b      	subs	r3, r3, r5
    19c2:	009b      	lsls	r3, r3, #2
    19c4:	4a16      	ldr	r2, [pc, #88]	; (1a20 <_adc_init+0x100>)
    19c6:	18d3      	adds	r3, r2, r3
    19c8:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    19ca:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    19cc:	7e63      	ldrb	r3, [r4, #25]
    19ce:	09db      	lsrs	r3, r3, #7
    19d0:	d1fc      	bne.n	19cc <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    19d2:	00eb      	lsls	r3, r5, #3
    19d4:	1b5b      	subs	r3, r3, r5
    19d6:	009b      	lsls	r3, r3, #2
    19d8:	4a11      	ldr	r2, [pc, #68]	; (1a20 <_adc_init+0x100>)
    19da:	18d3      	adds	r3, r2, r3
    19dc:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    19de:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    19e0:	7e63      	ldrb	r3, [r4, #25]
    19e2:	09db      	lsrs	r3, r3, #7
    19e4:	d1fc      	bne.n	19e0 <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    19e6:	00eb      	lsls	r3, r5, #3
    19e8:	1b5b      	subs	r3, r3, r5
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	4a0c      	ldr	r2, [pc, #48]	; (1a20 <_adc_init+0x100>)
    19ee:	18d3      	adds	r3, r2, r3
    19f0:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    19f2:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    19f4:	7e63      	ldrb	r3, [r4, #25]
    19f6:	09db      	lsrs	r3, r3, #7
    19f8:	d1fc      	bne.n	19f4 <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    19fa:	00eb      	lsls	r3, r5, #3
    19fc:	1b5d      	subs	r5, r3, r5
    19fe:	00ad      	lsls	r5, r5, #2
    1a00:	4b07      	ldr	r3, [pc, #28]	; (1a20 <_adc_init+0x100>)
    1a02:	195d      	adds	r5, r3, r5
    1a04:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1a06:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    1a08:	2000      	movs	r0, #0
    1a0a:	bd70      	pop	{r4, r5, r6, pc}
    1a0c:	bdffc000 	.word	0xbdffc000
    1a10:	00002ff8 	.word	0x00002ff8
    1a14:	000018ad 	.word	0x000018ad
    1a18:	00806024 	.word	0x00806024
    1a1c:	00806020 	.word	0x00806020
    1a20:	00002fdc 	.word	0x00002fdc

00001a24 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1a24:	b570      	push	{r4, r5, r6, lr}
    1a26:	0005      	movs	r5, r0
    1a28:	000c      	movs	r4, r1
	ASSERT(device);
    1a2a:	1e43      	subs	r3, r0, #1
    1a2c:	4198      	sbcs	r0, r3
    1a2e:	b2c0      	uxtb	r0, r0
    1a30:	22c5      	movs	r2, #197	; 0xc5
    1a32:	4906      	ldr	r1, [pc, #24]	; (1a4c <_adc_sync_init+0x28>)
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <_adc_sync_init+0x2c>)
    1a36:	4798      	blx	r3

	device->hw = hw;
    1a38:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1a3a:	0020      	movs	r0, r4
    1a3c:	4b05      	ldr	r3, [pc, #20]	; (1a54 <_adc_sync_init+0x30>)
    1a3e:	4798      	blx	r3
    1a40:	0001      	movs	r1, r0
    1a42:	0020      	movs	r0, r4
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <_adc_sync_init+0x34>)
    1a46:	4798      	blx	r3
}
    1a48:	bd70      	pop	{r4, r5, r6, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	00002ff8 	.word	0x00002ff8
    1a50:	000018ad 	.word	0x000018ad
    1a54:	0000191b 	.word	0x0000191b
    1a58:	00001921 	.word	0x00001921

00001a5c <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    1a5c:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
    1a60:	bf30      	wfi
}
    1a62:	4770      	bx	lr

00001a64 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1a64:	b510      	push	{r4, lr}
    1a66:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
    1a68:	2064      	movs	r0, #100	; 0x64
    1a6a:	4358      	muls	r0, r3
    1a6c:	3801      	subs	r0, #1
    1a6e:	2164      	movs	r1, #100	; 0x64
    1a70:	4b01      	ldr	r3, [pc, #4]	; (1a78 <_get_cycles_for_us+0x14>)
    1a72:	4798      	blx	r3
    1a74:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a76:	bd10      	pop	{r4, pc}
    1a78:	00002d2d 	.word	0x00002d2d

00001a7c <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    1a7c:	23fa      	movs	r3, #250	; 0xfa
    1a7e:	009b      	lsls	r3, r3, #2
    1a80:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a82:	4770      	bx	lr

00001a84 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a84:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <_init_chip+0x1c>)
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1a8c:	4b05      	ldr	r3, [pc, #20]	; (1aa4 <_init_chip+0x20>)
    1a8e:	4798      	blx	r3
	_sysctrl_init_sources();
    1a90:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <_init_chip+0x24>)
    1a92:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1a94:	4b05      	ldr	r3, [pc, #20]	; (1aac <_init_chip+0x28>)
    1a96:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1a98:	20ff      	movs	r0, #255	; 0xff
    1a9a:	4b05      	ldr	r3, [pc, #20]	; (1ab0 <_init_chip+0x2c>)
    1a9c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1a9e:	bd10      	pop	{r4, pc}
    1aa0:	41004000 	.word	0x41004000
    1aa4:	000020c5 	.word	0x000020c5
    1aa8:	0000261d 	.word	0x0000261d
    1aac:	00002665 	.word	0x00002665
    1ab0:	00001cf5 	.word	0x00001cf5

00001ab4 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1ab4:	79c3      	ldrb	r3, [r0, #7]
    1ab6:	09db      	lsrs	r3, r3, #7
    1ab8:	d1fc      	bne.n	1ab4 <_dac_init>
    1aba:	79c3      	ldrb	r3, [r0, #7]
    1abc:	09db      	lsrs	r3, r3, #7
    1abe:	d1fc      	bne.n	1aba <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1ac0:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    1ac2:	079b      	lsls	r3, r3, #30
    1ac4:	d507      	bpl.n	1ad6 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    1ac6:	2300      	movs	r3, #0
    1ac8:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1aca:	79c3      	ldrb	r3, [r0, #7]
    1acc:	09db      	lsrs	r3, r3, #7
    1ace:	d1fc      	bne.n	1aca <_dac_init+0x16>
    1ad0:	79c3      	ldrb	r3, [r0, #7]
    1ad2:	09db      	lsrs	r3, r3, #7
    1ad4:	d1fc      	bne.n	1ad0 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    1ad6:	2301      	movs	r3, #1
    1ad8:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1ada:	79c3      	ldrb	r3, [r0, #7]
    1adc:	09db      	lsrs	r3, r3, #7
    1ade:	d1fc      	bne.n	1ada <_dac_init+0x26>
    1ae0:	79c3      	ldrb	r3, [r0, #7]
    1ae2:	09db      	lsrs	r3, r3, #7
    1ae4:	d1fc      	bne.n	1ae0 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1ae6:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    1ae8:	2201      	movs	r2, #1
    1aea:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1aec:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1aee:	79c3      	ldrb	r3, [r0, #7]
    1af0:	09db      	lsrs	r3, r3, #7
    1af2:	d1fc      	bne.n	1aee <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1af4:	2000      	movs	r0, #0
    1af6:	4770      	bx	lr

00001af8 <_dac_sync_init>:
{
    1af8:	b570      	push	{r4, r5, r6, lr}
    1afa:	0005      	movs	r5, r0
    1afc:	000c      	movs	r4, r1
	ASSERT(device);
    1afe:	1e43      	subs	r3, r0, #1
    1b00:	4198      	sbcs	r0, r3
    1b02:	b2c0      	uxtb	r0, r0
    1b04:	2249      	movs	r2, #73	; 0x49
    1b06:	4904      	ldr	r1, [pc, #16]	; (1b18 <_dac_sync_init+0x20>)
    1b08:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_dac_sync_init+0x24>)
    1b0a:	4798      	blx	r3
	device->hw = hw;
    1b0c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1b0e:	0020      	movs	r0, r4
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <_dac_sync_init+0x28>)
    1b12:	4798      	blx	r3
}
    1b14:	bd70      	pop	{r4, r5, r6, pc}
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	00003010 	.word	0x00003010
    1b1c:	000018ad 	.word	0x000018ad
    1b20:	00001ab5 	.word	0x00001ab5

00001b24 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b24:	4a22      	ldr	r2, [pc, #136]	; (1bb0 <_ext_irq_init+0x8c>)
    1b26:	7853      	ldrb	r3, [r2, #1]
    1b28:	09db      	lsrs	r3, r3, #7
    1b2a:	d1fc      	bne.n	1b26 <_ext_irq_init+0x2>
    1b2c:	4a20      	ldr	r2, [pc, #128]	; (1bb0 <_ext_irq_init+0x8c>)
    1b2e:	7853      	ldrb	r3, [r2, #1]
    1b30:	09db      	lsrs	r3, r3, #7
    1b32:	d1fc      	bne.n	1b2e <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1b34:	4b1e      	ldr	r3, [pc, #120]	; (1bb0 <_ext_irq_init+0x8c>)
    1b36:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1b38:	079b      	lsls	r3, r3, #30
    1b3a:	d50a      	bpl.n	1b52 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1b3c:	2200      	movs	r2, #0
    1b3e:	4b1c      	ldr	r3, [pc, #112]	; (1bb0 <_ext_irq_init+0x8c>)
    1b40:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b42:	001a      	movs	r2, r3
    1b44:	7853      	ldrb	r3, [r2, #1]
    1b46:	09db      	lsrs	r3, r3, #7
    1b48:	d1fc      	bne.n	1b44 <_ext_irq_init+0x20>
    1b4a:	4a19      	ldr	r2, [pc, #100]	; (1bb0 <_ext_irq_init+0x8c>)
    1b4c:	7853      	ldrb	r3, [r2, #1]
    1b4e:	09db      	lsrs	r3, r3, #7
    1b50:	d1fc      	bne.n	1b4c <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    1b52:	2201      	movs	r2, #1
    1b54:	4b16      	ldr	r3, [pc, #88]	; (1bb0 <_ext_irq_init+0x8c>)
    1b56:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b58:	001a      	movs	r2, r3
    1b5a:	7853      	ldrb	r3, [r2, #1]
    1b5c:	09db      	lsrs	r3, r3, #7
    1b5e:	d1fc      	bne.n	1b5a <_ext_irq_init+0x36>
    1b60:	4a13      	ldr	r2, [pc, #76]	; (1bb0 <_ext_irq_init+0x8c>)
    1b62:	7853      	ldrb	r3, [r2, #1]
    1b64:	09db      	lsrs	r3, r3, #7
    1b66:	d1fc      	bne.n	1b62 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1b68:	4b11      	ldr	r3, [pc, #68]	; (1bb0 <_ext_irq_init+0x8c>)
    1b6a:	2200      	movs	r2, #0
    1b6c:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1b6e:	2298      	movs	r2, #152	; 0x98
    1b70:	0092      	lsls	r2, r2, #2
    1b72:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1b74:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1b76:	22dd      	movs	r2, #221	; 0xdd
    1b78:	0512      	lsls	r2, r2, #20
    1b7a:	619a      	str	r2, [r3, #24]
    1b7c:	22d0      	movs	r2, #208	; 0xd0
    1b7e:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1b80:	781a      	ldrb	r2, [r3, #0]
    1b82:	2102      	movs	r1, #2
    1b84:	430a      	orrs	r2, r1
    1b86:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b88:	001a      	movs	r2, r3
    1b8a:	7853      	ldrb	r3, [r2, #1]
    1b8c:	09db      	lsrs	r3, r3, #7
    1b8e:	d1fc      	bne.n	1b8a <_ext_irq_init+0x66>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b90:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <_ext_irq_init+0x90>)
    1b92:	2210      	movs	r2, #16
    1b94:	2180      	movs	r1, #128	; 0x80
    1b96:	505a      	str	r2, [r3, r1]
    1b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b9c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ba0:	3101      	adds	r1, #1
    1ba2:	31ff      	adds	r1, #255	; 0xff
    1ba4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ba6:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1ba8:	4b03      	ldr	r3, [pc, #12]	; (1bb8 <_ext_irq_init+0x94>)
    1baa:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1bac:	2000      	movs	r0, #0
    1bae:	4770      	bx	lr
    1bb0:	40001800 	.word	0x40001800
    1bb4:	e000e100 	.word	0xe000e100
    1bb8:	2000006c 	.word	0x2000006c

00001bbc <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1bbc:	2805      	cmp	r0, #5
    1bbe:	d009      	beq.n	1bd4 <_ext_irq_enable+0x18>
    1bc0:	2806      	cmp	r0, #6
    1bc2:	d005      	beq.n	1bd0 <_ext_irq_enable+0x14>
    1bc4:	2302      	movs	r3, #2
    1bc6:	2809      	cmp	r0, #9
    1bc8:	d005      	beq.n	1bd6 <_ext_irq_enable+0x1a>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    1bca:	200d      	movs	r0, #13
    1bcc:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1bce:	4770      	bx	lr
		if (_map[i].pin == pin) {
    1bd0:	2301      	movs	r3, #1
    1bd2:	e000      	b.n	1bd6 <_ext_irq_enable+0x1a>
    1bd4:	2300      	movs	r3, #0
			extint = _map[i].extint;
    1bd6:	00db      	lsls	r3, r3, #3
    1bd8:	4a0a      	ldr	r2, [pc, #40]	; (1c04 <_ext_irq_enable+0x48>)
    1bda:	5c9a      	ldrb	r2, [r3, r2]
	if (INVALID_EXTINT_NUMBER == extint) {
    1bdc:	2aff      	cmp	r2, #255	; 0xff
    1bde:	d00e      	beq.n	1bfe <_ext_irq_enable+0x42>
	if (enable) {
    1be0:	2900      	cmp	r1, #0
    1be2:	d106      	bne.n	1bf2 <_ext_irq_enable+0x36>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1be4:	2301      	movs	r3, #1
    1be6:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1be8:	4a07      	ldr	r2, [pc, #28]	; (1c08 <_ext_irq_enable+0x4c>)
    1bea:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1bec:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1bee:	2000      	movs	r0, #0
    1bf0:	e7ed      	b.n	1bce <_ext_irq_enable+0x12>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1bf2:	2301      	movs	r3, #1
    1bf4:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1bf6:	4a04      	ldr	r2, [pc, #16]	; (1c08 <_ext_irq_enable+0x4c>)
    1bf8:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1bfa:	2000      	movs	r0, #0
    1bfc:	e7e7      	b.n	1bce <_ext_irq_enable+0x12>
		return ERR_INVALID_ARG;
    1bfe:	200d      	movs	r0, #13
    1c00:	4240      	negs	r0, r0
    1c02:	e7e4      	b.n	1bce <_ext_irq_enable+0x12>
    1c04:	00003028 	.word	0x00003028
    1c08:	40001800 	.word	0x40001800

00001c0c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0e:	46ce      	mov	lr, r9
    1c10:	4647      	mov	r7, r8
    1c12:	b580      	push	{r7, lr}
    1c14:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1c16:	4b31      	ldr	r3, [pc, #196]	; (1cdc <EIC_Handler+0xd0>)
    1c18:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1c1a:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1c1c:	400a      	ands	r2, r1
    1c1e:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c20:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1c22:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1c24:	4b2e      	ldr	r3, [pc, #184]	; (1ce0 <EIC_Handler+0xd4>)
    1c26:	6818      	ldr	r0, [r3, #0]
    1c28:	1e43      	subs	r3, r0, #1
    1c2a:	4198      	sbcs	r0, r3
    1c2c:	b2c0      	uxtb	r0, r0
    1c2e:	22d2      	movs	r2, #210	; 0xd2
    1c30:	492c      	ldr	r1, [pc, #176]	; (1ce4 <EIC_Handler+0xd8>)
    1c32:	4b2d      	ldr	r3, [pc, #180]	; (1ce8 <EIC_Handler+0xdc>)
    1c34:	4798      	blx	r3

	while (flags) {
    1c36:	9b01      	ldr	r3, [sp, #4]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d04a      	beq.n	1cd2 <EIC_Handler+0xc6>
    1c3c:	2301      	movs	r3, #1
    1c3e:	425b      	negs	r3, r3
    1c40:	4699      	mov	r9, r3
		while (-1 != pos) {
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
    1c42:	4d2a      	ldr	r5, [pc, #168]	; (1cec <EIC_Handler+0xe0>)
    1c44:	e03b      	b.n	1cbe <EIC_Handler+0xb2>
    1c46:	4643      	mov	r3, r8
					pin = _map[middle].pin;
    1c48:	00db      	lsls	r3, r3, #3
    1c4a:	4a28      	ldr	r2, [pc, #160]	; (1cec <EIC_Handler+0xe0>)
    1c4c:	18d3      	adds	r3, r2, r3
    1c4e:	685b      	ldr	r3, [r3, #4]
    1c50:	4699      	mov	r9, r3
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1c52:	464b      	mov	r3, r9
    1c54:	3301      	adds	r3, #1
    1c56:	d003      	beq.n	1c60 <EIC_Handler+0x54>
				callback(pin);
    1c58:	4b21      	ldr	r3, [pc, #132]	; (1ce0 <EIC_Handler+0xd4>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	4648      	mov	r0, r9
    1c5e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1c60:	9b01      	ldr	r3, [sp, #4]
    1c62:	4642      	mov	r2, r8
    1c64:	40a2      	lsls	r2, r4
    1c66:	4393      	bics	r3, r2
    1c68:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1c6a:	9801      	ldr	r0, [sp, #4]
    1c6c:	4b20      	ldr	r3, [pc, #128]	; (1cf0 <EIC_Handler+0xe4>)
    1c6e:	4798      	blx	r3
    1c70:	3801      	subs	r0, #1
    1c72:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1c74:	1c63      	adds	r3, r4, #1
    1c76:	d018      	beq.n	1caa <EIC_Handler+0x9e>
				if (_map[middle].extint == pos) {
    1c78:	2c06      	cmp	r4, #6
    1c7a:	d0e4      	beq.n	1c46 <EIC_Handler+0x3a>
    1c7c:	2106      	movs	r1, #6
    1c7e:	4642      	mov	r2, r8
    1c80:	2703      	movs	r7, #3
    1c82:	2000      	movs	r0, #0
    1c84:	26ff      	movs	r6, #255	; 0xff
    1c86:	e00b      	b.n	1ca0 <EIC_Handler+0x94>
					upper = middle - 1;
    1c88:	3a01      	subs	r2, #1
    1c8a:	b2d7      	uxtb	r7, r2
			while (upper >= lower) {
    1c8c:	42b8      	cmp	r0, r7
    1c8e:	d8e0      	bhi.n	1c52 <EIC_Handler+0x46>
				middle = (upper + lower) >> 1;
    1c90:	183b      	adds	r3, r7, r0
    1c92:	105b      	asrs	r3, r3, #1
    1c94:	b2da      	uxtb	r2, r3
    1c96:	4033      	ands	r3, r6
				if (_map[middle].extint == pos) {
    1c98:	00d9      	lsls	r1, r3, #3
    1c9a:	5d49      	ldrb	r1, [r1, r5]
    1c9c:	42a1      	cmp	r1, r4
    1c9e:	d0d3      	beq.n	1c48 <EIC_Handler+0x3c>
				if (_map[middle].extint < pos) {
    1ca0:	428c      	cmp	r4, r1
    1ca2:	ddf1      	ble.n	1c88 <EIC_Handler+0x7c>
					lower = middle + 1;
    1ca4:	3201      	adds	r2, #1
    1ca6:	b2d0      	uxtb	r0, r2
    1ca8:	e7f0      	b.n	1c8c <EIC_Handler+0x80>
	return ((Eic *)hw)->INTFLAG.reg;
    1caa:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <EIC_Handler+0xd0>)
    1cac:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1cae:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1cb0:	400a      	ands	r2, r1
    1cb2:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1cb4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1cb6:	611a      	str	r2, [r3, #16]
	while (flags) {
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d009      	beq.n	1cd2 <EIC_Handler+0xc6>
		pos = ffs(flags) - 1;
    1cbe:	9801      	ldr	r0, [sp, #4]
    1cc0:	4b0b      	ldr	r3, [pc, #44]	; (1cf0 <EIC_Handler+0xe4>)
    1cc2:	4798      	blx	r3
    1cc4:	3801      	subs	r0, #1
    1cc6:	b244      	sxtb	r4, r0
				if (_map[middle].extint == pos) {
    1cc8:	2301      	movs	r3, #1
    1cca:	4698      	mov	r8, r3
		while (-1 != pos) {
    1ccc:	1c63      	adds	r3, r4, #1
    1cce:	d1d3      	bne.n	1c78 <EIC_Handler+0x6c>
    1cd0:	e7eb      	b.n	1caa <EIC_Handler+0x9e>
	}
}
    1cd2:	b003      	add	sp, #12
    1cd4:	bc0c      	pop	{r2, r3}
    1cd6:	4690      	mov	r8, r2
    1cd8:	4699      	mov	r9, r3
    1cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cdc:	40001800 	.word	0x40001800
    1ce0:	2000006c 	.word	0x2000006c
    1ce4:	00003040 	.word	0x00003040
    1ce8:	000018ad 	.word	0x000018ad
    1cec:	00003028 	.word	0x00003028
    1cf0:	00002e45 	.word	0x00002e45

00001cf4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1cf4:	07c3      	lsls	r3, r0, #31
    1cf6:	d50a      	bpl.n	1d0e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <_gclk_init_generators_by_fref+0x1c>)
    1cfa:	2280      	movs	r2, #128	; 0x80
    1cfc:	0052      	lsls	r2, r2, #1
    1cfe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1d00:	2283      	movs	r2, #131	; 0x83
    1d02:	0252      	lsls	r2, r2, #9
    1d04:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1d06:	001a      	movs	r2, r3
    1d08:	7853      	ldrb	r3, [r2, #1]
    1d0a:	09db      	lsrs	r3, r3, #7
    1d0c:	d1fc      	bne.n	1d08 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1d0e:	4770      	bx	lr
    1d10:	40000c00 	.word	0x40000c00

00001d14 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
    1d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d16:	0004      	movs	r4, r0
    1d18:	000d      	movs	r5, r1
    1d1a:	0017      	movs	r7, r2
    1d1c:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
    1d1e:	2301      	movs	r3, #1
    1d20:	404b      	eors	r3, r1
    1d22:	2001      	movs	r0, #1
    1d24:	4018      	ands	r0, r3
    1d26:	22c5      	movs	r2, #197	; 0xc5
    1d28:	0052      	lsls	r2, r2, #1
    1d2a:	4919      	ldr	r1, [pc, #100]	; (1d90 <_flash_program+0x7c>)
    1d2c:	4b19      	ldr	r3, [pc, #100]	; (1d94 <_flash_program+0x80>)
    1d2e:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
    1d30:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1d32:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1d34:	7d23      	ldrb	r3, [r4, #20]
    1d36:	4213      	tst	r3, r2
    1d38:	d0fc      	beq.n	1d34 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1d3a:	4b17      	ldr	r3, [pc, #92]	; (1d98 <_flash_program+0x84>)
    1d3c:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1d3e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1d40:	7d23      	ldrb	r3, [r4, #20]
    1d42:	4213      	tst	r3, r2
    1d44:	d0fc      	beq.n	1d40 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1d46:	2320      	movs	r3, #32
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
    1d4c:	2e00      	cmp	r6, #0
    1d4e:	d00e      	beq.n	1d6e <_flash_program+0x5a>
    1d50:	3b1f      	subs	r3, #31
    1d52:	3bff      	subs	r3, #255	; 0xff
    1d54:	0029      	movs	r1, r5
    1d56:	4399      	bics	r1, r3
    1d58:	2300      	movs	r3, #0
		data = buffer[i];
    1d5a:	5cfd      	ldrb	r5, [r7, r3]
    1d5c:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
    1d5e:	2b3e      	cmp	r3, #62	; 0x3e
    1d60:	d910      	bls.n	1d84 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
    1d62:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
    1d64:	3302      	adds	r3, #2
    1d66:	b29b      	uxth	r3, r3
    1d68:	3102      	adds	r1, #2
    1d6a:	429e      	cmp	r6, r3
    1d6c:	d8f5      	bhi.n	1d5a <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1d6e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1d70:	7d23      	ldrb	r3, [r4, #20]
    1d72:	4213      	tst	r3, r2
    1d74:	d0fc      	beq.n	1d70 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
    1d76:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    1d78:	4b08      	ldr	r3, [pc, #32]	; (1d9c <_flash_program+0x88>)
    1d7a:	9a06      	ldr	r2, [sp, #24]
    1d7c:	4313      	orrs	r3, r2
    1d7e:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1d80:	8023      	strh	r3, [r4, #0]
}
    1d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
    1d84:	18fa      	adds	r2, r7, r3
    1d86:	7852      	ldrb	r2, [r2, #1]
    1d88:	0212      	lsls	r2, r2, #8
    1d8a:	432a      	orrs	r2, r5
    1d8c:	e7e9      	b.n	1d62 <_flash_program+0x4e>
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	00003058 	.word	0x00003058
    1d94:	000018ad 	.word	0x000018ad
    1d98:	ffffa544 	.word	0xffffa544
    1d9c:	ffffa500 	.word	0xffffa500

00001da0 <_flash_init>:
{
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	0005      	movs	r5, r0
    1da4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1da6:	2800      	cmp	r0, #0
    1da8:	d01d      	beq.n	1de6 <_flash_init+0x46>
    1daa:	4b10      	ldr	r3, [pc, #64]	; (1dec <_flash_init+0x4c>)
    1dac:	18c8      	adds	r0, r1, r3
    1dae:	4243      	negs	r3, r0
    1db0:	4158      	adcs	r0, r3
    1db2:	b2c0      	uxtb	r0, r0
    1db4:	2246      	movs	r2, #70	; 0x46
    1db6:	490e      	ldr	r1, [pc, #56]	; (1df0 <_flash_init+0x50>)
    1db8:	4b0e      	ldr	r3, [pc, #56]	; (1df4 <_flash_init+0x54>)
    1dba:	4798      	blx	r3
	device->hw = hw;
    1dbc:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    1dbe:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    1dc0:	239e      	movs	r3, #158	; 0x9e
    1dc2:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
    1dc4:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    1dc6:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <_flash_init+0x58>)
    1dc8:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dca:	4b0c      	ldr	r3, [pc, #48]	; (1dfc <_flash_init+0x5c>)
    1dcc:	2220      	movs	r2, #32
    1dce:	2180      	movs	r1, #128	; 0x80
    1dd0:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dd6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dda:	3101      	adds	r1, #1
    1ddc:	31ff      	adds	r1, #255	; 0xff
    1dde:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1de0:	601a      	str	r2, [r3, #0]
}
    1de2:	2000      	movs	r0, #0
    1de4:	bd70      	pop	{r4, r5, r6, pc}
    1de6:	2000      	movs	r0, #0
    1de8:	e7e4      	b.n	1db4 <_flash_init+0x14>
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	beffc000 	.word	0xbeffc000
    1df0:	00003058 	.word	0x00003058
    1df4:	000018ad 	.word	0x000018ad
    1df8:	20000070 	.word	0x20000070
    1dfc:	e000e100 	.word	0xe000e100

00001e00 <_flash_get_page_size>:
}
    1e00:	2040      	movs	r0, #64	; 0x40
    1e02:	4770      	bx	lr

00001e04 <_flash_get_total_pages>:
}
    1e04:	2080      	movs	r0, #128	; 0x80
    1e06:	0140      	lsls	r0, r0, #5
    1e08:	4770      	bx	lr

00001e0a <_flash_read>:
{
    1e0a:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    1e0c:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    1e0e:	6905      	ldr	r5, [r0, #16]
    1e10:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1e12:	7d28      	ldrb	r0, [r5, #20]
    1e14:	4230      	tst	r0, r6
    1e16:	d0fc      	beq.n	1e12 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1e18:	2020      	movs	r0, #32
    1e1a:	30ff      	adds	r0, #255	; 0xff
    1e1c:	8328      	strh	r0, [r5, #24]
		i = 0;
    1e1e:	2000      	movs	r0, #0
	if (src_addr % 2) {
    1e20:	07cd      	lsls	r5, r1, #31
    1e22:	d505      	bpl.n	1e30 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    1e24:	3401      	adds	r4, #1
    1e26:	3001      	adds	r0, #1
    1e28:	4381      	bics	r1, r0
    1e2a:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    1e2c:	0a09      	lsrs	r1, r1, #8
    1e2e:	7011      	strb	r1, [r2, #0]
	while (i < length) {
    1e30:	4298      	cmp	r0, r3
    1e32:	d211      	bcs.n	1e58 <_flash_read+0x4e>
    1e34:	1812      	adds	r2, r2, r0
    1e36:	0064      	lsls	r4, r4, #1
    1e38:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
    1e3a:	1e5d      	subs	r5, r3, #1
    1e3c:	e003      	b.n	1e46 <_flash_read+0x3c>
		i += 2;
    1e3e:	3002      	adds	r0, #2
    1e40:	3202      	adds	r2, #2
	while (i < length) {
    1e42:	4283      	cmp	r3, r0
    1e44:	d908      	bls.n	1e58 <_flash_read+0x4e>
    1e46:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
    1e48:	8809      	ldrh	r1, [r1, #0]
    1e4a:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
    1e4c:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
    1e4e:	4285      	cmp	r5, r0
    1e50:	d9f5      	bls.n	1e3e <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
    1e52:	0a09      	lsrs	r1, r1, #8
    1e54:	7051      	strb	r1, [r2, #1]
    1e56:	e7f2      	b.n	1e3e <_flash_read+0x34>
}
    1e58:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e5c <_flash_write>:
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	46de      	mov	lr, fp
    1e60:	4657      	mov	r7, sl
    1e62:	464e      	mov	r6, r9
    1e64:	4645      	mov	r5, r8
    1e66:	b5e0      	push	{r5, r6, r7, lr}
    1e68:	b0c5      	sub	sp, #276	; 0x114
    1e6a:	4683      	mov	fp, r0
    1e6c:	0016      	movs	r6, r2
    1e6e:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
    1e70:	000c      	movs	r4, r1
    1e72:	e02e      	b.n	1ed2 <_flash_write+0x76>
    1e74:	46ba      	mov	sl, r7
    1e76:	4667      	mov	r7, ip
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    1e78:	465b      	mov	r3, fp
    1e7a:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1e7c:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1e7e:	7d13      	ldrb	r3, [r2, #20]
    1e80:	420b      	tst	r3, r1
    1e82:	d0fc      	beq.n	1e7e <_flash_write+0x22>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1e84:	2320      	movs	r3, #32
    1e86:	33ff      	adds	r3, #255	; 0xff
    1e88:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
    1e8a:	464b      	mov	r3, r9
    1e8c:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
    1e8e:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1e90:	4b36      	ldr	r3, [pc, #216]	; (1f6c <_flash_write+0x110>)
    1e92:	8013      	strh	r3, [r2, #0]
			_flash_program(device->hw,
    1e94:	002b      	movs	r3, r5
    1e96:	003d      	movs	r5, r7
    1e98:	464f      	mov	r7, r9
    1e9a:	46a0      	mov	r8, r4
    1e9c:	9703      	str	r7, [sp, #12]
    1e9e:	46b1      	mov	r9, r6
    1ea0:	465e      	mov	r6, fp
    1ea2:	469b      	mov	fp, r3
    1ea4:	9b03      	ldr	r3, [sp, #12]
    1ea6:	1afa      	subs	r2, r7, r3
    1ea8:	ab04      	add	r3, sp, #16
    1eaa:	469c      	mov	ip, r3
    1eac:	4462      	add	r2, ip
    1eae:	2304      	movs	r3, #4
    1eb0:	9300      	str	r3, [sp, #0]
    1eb2:	333c      	adds	r3, #60	; 0x3c
    1eb4:	0039      	movs	r1, r7
    1eb6:	6930      	ldr	r0, [r6, #16]
    1eb8:	4c2d      	ldr	r4, [pc, #180]	; (1f70 <_flash_write+0x114>)
    1eba:	47a0      	blx	r4
    1ebc:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1ebe:	42bd      	cmp	r5, r7
    1ec0:	d1f0      	bne.n	1ea4 <_flash_write+0x48>
    1ec2:	4644      	mov	r4, r8
    1ec4:	465d      	mov	r5, fp
    1ec6:	46b3      	mov	fp, r6
    1ec8:	464e      	mov	r6, r9
	} while (row_end_addr < (wr_start_addr + length - 1));
    1eca:	192b      	adds	r3, r5, r4
    1ecc:	3b01      	subs	r3, #1
    1ece:	459a      	cmp	sl, r3
    1ed0:	d244      	bcs.n	1f5c <_flash_write+0x100>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    1ed2:	23ff      	movs	r3, #255	; 0xff
    1ed4:	0022      	movs	r2, r4
    1ed6:	439a      	bics	r2, r3
    1ed8:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
    1eda:	444b      	add	r3, r9
    1edc:	469a      	mov	sl, r3
    1ede:	2380      	movs	r3, #128	; 0x80
    1ee0:	005b      	lsls	r3, r3, #1
    1ee2:	444b      	add	r3, r9
    1ee4:	4698      	mov	r8, r3
    1ee6:	0017      	movs	r7, r2
    1ee8:	4642      	mov	r2, r8
    1eea:	9203      	str	r2, [sp, #12]
    1eec:	46a0      	mov	r8, r4
    1eee:	464c      	mov	r4, r9
    1ef0:	46b1      	mov	r9, r6
    1ef2:	465e      	mov	r6, fp
    1ef4:	46ab      	mov	fp, r5
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    1ef6:	1b3a      	subs	r2, r7, r4
    1ef8:	ab04      	add	r3, sp, #16
    1efa:	469c      	mov	ip, r3
    1efc:	4462      	add	r2, ip
    1efe:	2340      	movs	r3, #64	; 0x40
    1f00:	0039      	movs	r1, r7
    1f02:	0030      	movs	r0, r6
    1f04:	4d1b      	ldr	r5, [pc, #108]	; (1f74 <_flash_write+0x118>)
    1f06:	47a8      	blx	r5
    1f08:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1f0a:	9b03      	ldr	r3, [sp, #12]
    1f0c:	429f      	cmp	r7, r3
    1f0e:	d1f2      	bne.n	1ef6 <_flash_write+0x9a>
    1f10:	465d      	mov	r5, fp
    1f12:	46b3      	mov	fp, r6
    1f14:	464e      	mov	r6, r9
    1f16:	46a1      	mov	r9, r4
    1f18:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
    1f1a:	464b      	mov	r3, r9
    1f1c:	1ae3      	subs	r3, r4, r3
    1f1e:	0999      	lsrs	r1, r3, #6
    1f20:	223f      	movs	r2, #63	; 0x3f
    1f22:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    1f24:	4554      	cmp	r4, sl
    1f26:	d8a7      	bhi.n	1e78 <_flash_write+0x1c>
    1f28:	2d00      	cmp	r5, #0
    1f2a:	d0a5      	beq.n	1e78 <_flash_write+0x1c>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    1f2c:	46bc      	mov	ip, r7
    1f2e:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
    1f30:	018a      	lsls	r2, r1, #6
    1f32:	a804      	add	r0, sp, #16
    1f34:	4680      	mov	r8, r0
    1f36:	4442      	add	r2, r8
    1f38:	7830      	ldrb	r0, [r6, #0]
    1f3a:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    1f3c:	3301      	adds	r3, #1
    1f3e:	223f      	movs	r2, #63	; 0x3f
    1f40:	4013      	ands	r3, r2
				j++;
    1f42:	425a      	negs	r2, r3
    1f44:	415a      	adcs	r2, r3
    1f46:	1889      	adds	r1, r1, r2
			wr_start_addr++;
    1f48:	3401      	adds	r4, #1
			buffer++;
    1f4a:	3601      	adds	r6, #1
			length--;
    1f4c:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    1f4e:	42a7      	cmp	r7, r4
    1f50:	d390      	bcc.n	1e74 <_flash_write+0x18>
    1f52:	2d00      	cmp	r5, #0
    1f54:	d1ec      	bne.n	1f30 <_flash_write+0xd4>
    1f56:	46ba      	mov	sl, r7
    1f58:	4667      	mov	r7, ip
    1f5a:	e78d      	b.n	1e78 <_flash_write+0x1c>
}
    1f5c:	b045      	add	sp, #276	; 0x114
    1f5e:	bc3c      	pop	{r2, r3, r4, r5}
    1f60:	4690      	mov	r8, r2
    1f62:	4699      	mov	r9, r3
    1f64:	46a2      	mov	sl, r4
    1f66:	46ab      	mov	fp, r5
    1f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	ffffa502 	.word	0xffffa502
    1f70:	00001d15 	.word	0x00001d15
    1f74:	00001e0b 	.word	0x00001e0b

00001f78 <_flash_erase>:
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	46d6      	mov	lr, sl
    1f7c:	464f      	mov	r7, r9
    1f7e:	4646      	mov	r6, r8
    1f80:	b5c0      	push	{r6, r7, lr}
    1f82:	b090      	sub	sp, #64	; 0x40
    1f84:	0005      	movs	r5, r0
    1f86:	000c      	movs	r4, r1
    1f88:	0016      	movs	r6, r2
	row_start_addr = dst_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    1f8a:	23ff      	movs	r3, #255	; 0xff
    1f8c:	000f      	movs	r7, r1
    1f8e:	439f      	bics	r7, r3
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    1f90:	2240      	movs	r2, #64	; 0x40
    1f92:	21ff      	movs	r1, #255	; 0xff
    1f94:	4668      	mov	r0, sp
    1f96:	4b28      	ldr	r3, [pc, #160]	; (2038 <STACK_SIZE+0x38>)
    1f98:	4798      	blx	r3
	if (dst_addr != row_start_addr) {
    1f9a:	42bc      	cmp	r4, r7
    1f9c:	d048      	beq.n	2030 <STACK_SIZE+0x30>
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    1f9e:	1c7b      	adds	r3, r7, #1
    1fa0:	33ff      	adds	r3, #255	; 0xff
    1fa2:	469a      	mov	sl, r3
    1fa4:	23c0      	movs	r3, #192	; 0xc0
    1fa6:	4699      	mov	r9, r3
    1fa8:	44a1      	add	r9, r4
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    1faa:	4f24      	ldr	r7, [pc, #144]	; (203c <STACK_SIZE+0x3c>)
    1fac:	2340      	movs	r3, #64	; 0x40
    1fae:	466a      	mov	r2, sp
    1fb0:	0021      	movs	r1, r4
    1fb2:	0028      	movs	r0, r5
    1fb4:	47b8      	blx	r7
			if (--page_nums == 0) {
    1fb6:	3e01      	subs	r6, #1
    1fb8:	2e00      	cmp	r6, #0
    1fba:	d033      	beq.n	2024 <STACK_SIZE+0x24>
			dst_addr += NVMCTRL_PAGE_SIZE;
    1fbc:	3440      	adds	r4, #64	; 0x40
			if (dst_addr == row_start_addr) {
    1fbe:	45a2      	cmp	sl, r4
    1fc0:	d001      	beq.n	1fc6 <_flash_erase+0x4e>
		for (i = 0; i < NVMCTRL_ROW_PAGES - 1; i++) {
    1fc2:	454c      	cmp	r4, r9
    1fc4:	d1f2      	bne.n	1fac <_flash_erase+0x34>
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    1fc6:	4654      	mov	r4, sl
    1fc8:	2e03      	cmp	r6, #3
    1fca:	d91f      	bls.n	200c <STACK_SIZE+0xc>
	row_start_addr = dst_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    1fcc:	4654      	mov	r4, sl
    1fce:	0030      	movs	r0, r6
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1fd0:	2101      	movs	r1, #1
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1fd2:	2320      	movs	r3, #32
    1fd4:	33ff      	adds	r3, #255	; 0xff
    1fd6:	4698      	mov	r8, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1fd8:	4f19      	ldr	r7, [pc, #100]	; (2040 <STACK_SIZE+0x40>)
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    1fda:	692a      	ldr	r2, [r5, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1fdc:	7d13      	ldrb	r3, [r2, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1fde:	420b      	tst	r3, r1
    1fe0:	d0fc      	beq.n	1fdc <_flash_erase+0x64>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1fe2:	4643      	mov	r3, r8
    1fe4:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
    1fe6:	0863      	lsrs	r3, r4, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
    1fe8:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1fea:	8017      	strh	r7, [r2, #0]
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    1fec:	3401      	adds	r4, #1
    1fee:	34ff      	adds	r4, #255	; 0xff
		page_nums -= NVMCTRL_ROW_PAGES;
    1ff0:	3804      	subs	r0, #4
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    1ff2:	2803      	cmp	r0, #3
    1ff4:	d8f1      	bhi.n	1fda <_flash_erase+0x62>
    1ff6:	4657      	mov	r7, sl
    1ff8:	3701      	adds	r7, #1
    1ffa:	37ff      	adds	r7, #255	; 0xff
    1ffc:	1f34      	subs	r4, r6, #4
    1ffe:	08a4      	lsrs	r4, r4, #2
    2000:	0224      	lsls	r4, r4, #8
    2002:	19e4      	adds	r4, r4, r7
    2004:	2303      	movs	r3, #3
    2006:	401e      	ands	r6, r3
	if (page_nums != 0) {
    2008:	2e00      	cmp	r6, #0
    200a:	d00b      	beq.n	2024 <STACK_SIZE+0x24>
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    200c:	2700      	movs	r7, #0
			_flash_write(device, row_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    200e:	4b0b      	ldr	r3, [pc, #44]	; (203c <STACK_SIZE+0x3c>)
    2010:	4698      	mov	r8, r3
    2012:	2340      	movs	r3, #64	; 0x40
    2014:	466a      	mov	r2, sp
    2016:	0021      	movs	r1, r4
    2018:	0028      	movs	r0, r5
    201a:	47c0      	blx	r8
			row_start_addr += NVMCTRL_PAGE_SIZE;
    201c:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < page_nums; i++) {
    201e:	3701      	adds	r7, #1
    2020:	42be      	cmp	r6, r7
    2022:	d8f6      	bhi.n	2012 <STACK_SIZE+0x12>
}
    2024:	b010      	add	sp, #64	; 0x40
    2026:	bc1c      	pop	{r2, r3, r4}
    2028:	4690      	mov	r8, r2
    202a:	4699      	mov	r9, r3
    202c:	46a2      	mov	sl, r4
    202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	row_start_addr = dst_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    2030:	46a2      	mov	sl, r4
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    2032:	2e03      	cmp	r6, #3
    2034:	d8ca      	bhi.n	1fcc <_flash_erase+0x54>
    2036:	e7e7      	b.n	2008 <STACK_SIZE+0x8>
    2038:	00002ee1 	.word	0x00002ee1
    203c:	00001e5d 	.word	0x00001e5d
    2040:	ffffa502 	.word	0xffffa502

00002044 <_flash_is_locked>:
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
    2044:	6903      	ldr	r3, [r0, #16]
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
    2046:	8c18      	ldrh	r0, [r3, #32]
    2048:	0089      	lsls	r1, r1, #2
    204a:	0c09      	lsrs	r1, r1, #16
    204c:	2301      	movs	r3, #1
    204e:	408b      	lsls	r3, r1
    2050:	4018      	ands	r0, r3
    2052:	4243      	negs	r3, r0
    2054:	4158      	adcs	r0, r3
    2056:	b2c0      	uxtb	r0, r0
}
    2058:	4770      	bx	lr
	...

0000205c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    205c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    205e:	4b0a      	ldr	r3, [pc, #40]	; (2088 <NVMCTRL_Handler+0x2c>)
    2060:	6818      	ldr	r0, [r3, #0]
    2062:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2064:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    2066:	07d2      	lsls	r2, r2, #31
    2068:	d504      	bpl.n	2074 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    206a:	6803      	ldr	r3, [r0, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d000      	beq.n	2072 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    2070:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    2072:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    2074:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    2076:	0792      	lsls	r2, r2, #30
    2078:	d5fb      	bpl.n	2072 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    207a:	2202      	movs	r2, #2
    207c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    207e:	6843      	ldr	r3, [r0, #4]
    2080:	2b00      	cmp	r3, #0
    2082:	d0f6      	beq.n	2072 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    2084:	4798      	blx	r3
}
    2086:	e7f4      	b.n	2072 <NVMCTRL_Handler+0x16>
    2088:	20000070 	.word	0x20000070

0000208c <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
    208c:	2802      	cmp	r0, #2
    208e:	d904      	bls.n	209a <_set_sleep_mode+0xe>
    2090:	2803      	cmp	r0, #3
    2092:	d00b      	beq.n	20ac <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
    2094:	200d      	movs	r0, #13
    2096:	4240      	negs	r0, r0
    2098:	e007      	b.n	20aa <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    209a:	4a08      	ldr	r2, [pc, #32]	; (20bc <_set_sleep_mode+0x30>)
    209c:	6913      	ldr	r3, [r2, #16]
    209e:	2104      	movs	r1, #4
    20a0:	438b      	bics	r3, r1
    20a2:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
    20a4:	4b06      	ldr	r3, [pc, #24]	; (20c0 <_set_sleep_mode+0x34>)
    20a6:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
    20a8:	2000      	movs	r0, #0
	}
}
    20aa:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    20ac:	4a03      	ldr	r2, [pc, #12]	; (20bc <_set_sleep_mode+0x30>)
    20ae:	6913      	ldr	r3, [r2, #16]
    20b0:	2104      	movs	r1, #4
    20b2:	430b      	orrs	r3, r1
    20b4:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
    20b6:	2000      	movs	r0, #0
    20b8:	e7f7      	b.n	20aa <_set_sleep_mode+0x1e>
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	e000ed00 	.word	0xe000ed00
    20c0:	40000400 	.word	0x40000400

000020c4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    20c4:	4b06      	ldr	r3, [pc, #24]	; (20e0 <_pm_init+0x1c>)
    20c6:	7a1a      	ldrb	r2, [r3, #8]
    20c8:	b2d2      	uxtb	r2, r2
    20ca:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    20cc:	7a5a      	ldrb	r2, [r3, #9]
    20ce:	b2d2      	uxtb	r2, r2
    20d0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    20d2:	7a9a      	ldrb	r2, [r3, #10]
    20d4:	b2d2      	uxtb	r2, r2
    20d6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    20d8:	7ada      	ldrb	r2, [r3, #11]
    20da:	b2d2      	uxtb	r2, r2
    20dc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    20de:	4770      	bx	lr
    20e0:	40000400 	.word	0x40000400

000020e4 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    20e4:	b570      	push	{r4, r5, r6, lr}
    20e6:	0004      	movs	r4, r0
    20e8:	000d      	movs	r5, r1
	ASSERT(dev);
    20ea:	1e43      	subs	r3, r0, #1
    20ec:	4198      	sbcs	r0, r3
    20ee:	b2c0      	uxtb	r0, r0
    20f0:	2233      	movs	r2, #51	; 0x33
    20f2:	4910      	ldr	r1, [pc, #64]	; (2134 <_timer_init+0x50>)
    20f4:	4b10      	ldr	r3, [pc, #64]	; (2138 <_timer_init+0x54>)
    20f6:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    20f8:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    20fa:	2301      	movs	r3, #1
    20fc:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    20fe:	7aab      	ldrb	r3, [r5, #10]
    2100:	09db      	lsrs	r3, r3, #7
    2102:	d1fc      	bne.n	20fe <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
    2104:	68e2      	ldr	r2, [r4, #12]
    2106:	7a93      	ldrb	r3, [r2, #10]
    2108:	09db      	lsrs	r3, r3, #7
    210a:	d1fc      	bne.n	2106 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    210c:	3380      	adds	r3, #128	; 0x80
    210e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2110:	7a93      	ldrb	r3, [r2, #10]
    2112:	09db      	lsrs	r3, r3, #7
    2114:	d1fc      	bne.n	2110 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    2116:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    2118:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    211a:	2380      	movs	r3, #128	; 0x80
    211c:	00db      	lsls	r3, r3, #3
    211e:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2120:	7a93      	ldrb	r3, [r2, #10]
    2122:	09db      	lsrs	r3, r3, #7
    2124:	d1fc      	bne.n	2120 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2126:	3301      	adds	r3, #1
    2128:	68e2      	ldr	r2, [r4, #12]
    212a:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    212c:	4b03      	ldr	r3, [pc, #12]	; (213c <_timer_init+0x58>)
    212e:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
    2130:	2000      	movs	r0, #0
    2132:	bd70      	pop	{r4, r5, r6, pc}
    2134:	00003078 	.word	0x00003078
    2138:	000018ad 	.word	0x000018ad
    213c:	20000074 	.word	0x20000074

00002140 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    2140:	b510      	push	{r4, lr}
    2142:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    2144:	d01d      	beq.n	2182 <_timer_start+0x42>
    2146:	68c0      	ldr	r0, [r0, #12]
    2148:	1e43      	subs	r3, r0, #1
    214a:	4198      	sbcs	r0, r3
    214c:	b2c0      	uxtb	r0, r0
    214e:	226a      	movs	r2, #106	; 0x6a
    2150:	490d      	ldr	r1, [pc, #52]	; (2188 <_timer_start+0x48>)
    2152:	4b0e      	ldr	r3, [pc, #56]	; (218c <_timer_start+0x4c>)
    2154:	4798      	blx	r3
    2156:	2208      	movs	r2, #8
    2158:	4b0d      	ldr	r3, [pc, #52]	; (2190 <_timer_start+0x50>)
    215a:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    215c:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    215e:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    2160:	2300      	movs	r3, #0
    2162:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2164:	7a93      	ldrb	r3, [r2, #10]
    2166:	09db      	lsrs	r3, r3, #7
    2168:	d1fc      	bne.n	2164 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
    216a:	68e2      	ldr	r2, [r4, #12]
    216c:	7a93      	ldrb	r3, [r2, #10]
    216e:	09db      	lsrs	r3, r3, #7
    2170:	d1fc      	bne.n	216c <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    2172:	8813      	ldrh	r3, [r2, #0]
    2174:	2102      	movs	r1, #2
    2176:	430b      	orrs	r3, r1
    2178:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    217a:	7a93      	ldrb	r3, [r2, #10]
    217c:	09db      	lsrs	r3, r3, #7
    217e:	d1fc      	bne.n	217a <_timer_start+0x3a>
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
}
    2180:	bd10      	pop	{r4, pc}
    2182:	2000      	movs	r0, #0
    2184:	e7e3      	b.n	214e <_timer_start+0xe>
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	00003078 	.word	0x00003078
    218c:	000018ad 	.word	0x000018ad
    2190:	e000e100 	.word	0xe000e100

00002194 <_timer_stop>:

/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const dev)
{
    2194:	b510      	push	{r4, lr}
    2196:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    2198:	d010      	beq.n	21bc <_timer_stop+0x28>
    219a:	68c0      	ldr	r0, [r0, #12]
    219c:	1e43      	subs	r3, r0, #1
    219e:	4198      	sbcs	r0, r3
    21a0:	b2c0      	uxtb	r0, r0
    21a2:	2277      	movs	r2, #119	; 0x77
    21a4:	4906      	ldr	r1, [pc, #24]	; (21c0 <_timer_stop+0x2c>)
    21a6:	4b07      	ldr	r3, [pc, #28]	; (21c4 <_timer_stop+0x30>)
    21a8:	4798      	blx	r3

	hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
    21aa:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    21ac:	8813      	ldrh	r3, [r2, #0]
    21ae:	2102      	movs	r1, #2
    21b0:	438b      	bics	r3, r1
    21b2:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    21b4:	7a93      	ldrb	r3, [r2, #10]
    21b6:	09db      	lsrs	r3, r3, #7
    21b8:	d1fc      	bne.n	21b4 <_timer_stop+0x20>
}
    21ba:	bd10      	pop	{r4, pc}
    21bc:	2000      	movs	r0, #0
    21be:	e7f0      	b.n	21a2 <_timer_stop+0xe>
    21c0:	00003078 	.word	0x00003078
    21c4:	000018ad 	.word	0x000018ad

000021c8 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    21c8:	68c2      	ldr	r2, [r0, #12]
    21ca:	7a93      	ldrb	r3, [r2, #10]
    21cc:	09db      	lsrs	r3, r3, #7
    21ce:	d1fc      	bne.n	21ca <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    21d0:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    21d2:	0780      	lsls	r0, r0, #30
    21d4:	0fc0      	lsrs	r0, r0, #31
}
    21d6:	4770      	bx	lr

000021d8 <_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    21d8:	4770      	bx	lr

000021da <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    21da:	2000      	movs	r0, #0
    21dc:	4770      	bx	lr
	...

000021e0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    21e0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <RTC_Handler+0x20>)
    21e4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    21e6:	68e3      	ldr	r3, [r4, #12]
    21e8:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    21ea:	07db      	lsls	r3, r3, #31
    21ec:	d507      	bpl.n	21fe <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    21ee:	6823      	ldr	r3, [r4, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d001      	beq.n	21f8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    21f4:	0020      	movs	r0, r4
    21f6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    21f8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    21fa:	2201      	movs	r2, #1
    21fc:	721a      	strb	r2, [r3, #8]
}
    21fe:	bd10      	pop	{r4, pc}
    2200:	20000074 	.word	0x20000074

00002204 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2204:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2206:	07db      	lsls	r3, r3, #31
    2208:	d409      	bmi.n	221e <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    220a:	6803      	ldr	r3, [r0, #0]
    220c:	2202      	movs	r2, #2
    220e:	4313      	orrs	r3, r2
    2210:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2212:	3201      	adds	r2, #1
    2214:	69c3      	ldr	r3, [r0, #28]
    2216:	421a      	tst	r2, r3
    2218:	d1fc      	bne.n	2214 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    221a:	2000      	movs	r0, #0
}
    221c:	4770      	bx	lr
		return ERR_BUSY;
    221e:	2004      	movs	r0, #4
    2220:	4240      	negs	r0, r0
    2222:	e7fb      	b.n	221c <_spi_sync_enable+0x18>

00002224 <_spi_set_char_size>:
 * \param[out] size Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
    2224:	b510      	push	{r4, lr}
	/* Only 8-bit or 9-bit accepted */
	if (!(char_size == SPI_CHAR_SIZE_8 || char_size == SPI_CHAR_SIZE_9)) {
    2226:	2901      	cmp	r1, #1
    2228:	d815      	bhi.n	2256 <_spi_set_char_size+0x32>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    222a:	69c3      	ldr	r3, [r0, #28]
    222c:	2405      	movs	r4, #5
		return ERR_INVALID_ARG;
	}

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_CTRLB)) {
    222e:	421c      	tst	r4, r3
    2230:	d114      	bne.n	225c <_spi_set_char_size+0x38>

static inline void hri_sercomspi_write_CTRLB_CHSIZE_bf(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLB.reg;
    2232:	6843      	ldr	r3, [r0, #4]
	tmp &= ~SERCOM_SPI_CTRLB_CHSIZE_Msk;
    2234:	3402      	adds	r4, #2
    2236:	43a3      	bics	r3, r4
    2238:	001c      	movs	r4, r3
	tmp |= SERCOM_SPI_CTRLB_CHSIZE(data);
    223a:	2307      	movs	r3, #7
    223c:	400b      	ands	r3, r1
    223e:	4323      	orrs	r3, r4
	((Sercom *)hw)->SPI.CTRLB.reg = tmp;
    2240:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2242:	2407      	movs	r4, #7
    2244:	69c3      	ldr	r3, [r0, #28]
    2246:	421c      	tst	r4, r3
    2248:	d1fc      	bne.n	2244 <_spi_set_char_size+0x20>
		return ERR_BUSY;
	}

	hri_sercomspi_write_CTRLB_CHSIZE_bf(hw, char_size);
	*size = (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
    224a:	1e4b      	subs	r3, r1, #1
    224c:	4199      	sbcs	r1, r3
    224e:	3101      	adds	r1, #1
    2250:	7011      	strb	r1, [r2, #0]

	return ERR_NONE;
    2252:	2000      	movs	r0, #0
}
    2254:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
    2256:	200d      	movs	r0, #13
    2258:	4240      	negs	r0, r0
    225a:	e7fb      	b.n	2254 <_spi_set_char_size+0x30>
		return ERR_BUSY;
    225c:	2004      	movs	r0, #4
    225e:	4240      	negs	r0, r0
    2260:	e7f8      	b.n	2254 <_spi_set_char_size+0x30>
	...

00002264 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	0006      	movs	r6, r0
    2268:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    226a:	4b71      	ldr	r3, [pc, #452]	; (2430 <_spi_m_sync_init+0x1cc>)
    226c:	18cb      	adds	r3, r1, r3
    226e:	0a9b      	lsrs	r3, r3, #10
    2270:	b2db      	uxtb	r3, r3
		if (sercomspi_regs[i].n == n) {
    2272:	2b00      	cmp	r3, #0
    2274:	d100      	bne.n	2278 <_spi_m_sync_init+0x14>
    2276:	e087      	b.n	2388 <_spi_m_sync_init+0x124>
    2278:	2b03      	cmp	r3, #3
    227a:	d008      	beq.n	228e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    227c:	2800      	cmp	r0, #0
    227e:	d100      	bne.n	2282 <_spi_m_sync_init+0x1e>
    2280:	e0c6      	b.n	2410 <_spi_m_sync_init+0x1ac>
    2282:	2900      	cmp	r1, #0
    2284:	d000      	beq.n	2288 <_spi_m_sync_init+0x24>
    2286:	e0cb      	b.n	2420 <_spi_m_sync_init+0x1bc>
	return NULL;
    2288:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    228a:	2000      	movs	r0, #0
    228c:	e00a      	b.n	22a4 <_spi_m_sync_init+0x40>
		if (sercomspi_regs[i].n == n) {
    228e:	3b02      	subs	r3, #2
			return &sercomspi_regs[i];
    2290:	011d      	lsls	r5, r3, #4
    2292:	18eb      	adds	r3, r5, r3
    2294:	4d67      	ldr	r5, [pc, #412]	; (2434 <_spi_m_sync_init+0x1d0>)
    2296:	3518      	adds	r5, #24
    2298:	18ed      	adds	r5, r5, r3
	ASSERT(dev && hw);
    229a:	2e00      	cmp	r6, #0
    229c:	d0f5      	beq.n	228a <_spi_m_sync_init+0x26>
    229e:	2001      	movs	r0, #1
    22a0:	2c00      	cmp	r4, #0
    22a2:	d0f2      	beq.n	228a <_spi_m_sync_init+0x26>
    22a4:	4a64      	ldr	r2, [pc, #400]	; (2438 <_spi_m_sync_init+0x1d4>)
    22a6:	4965      	ldr	r1, [pc, #404]	; (243c <_spi_m_sync_init+0x1d8>)
    22a8:	4b65      	ldr	r3, [pc, #404]	; (2440 <_spi_m_sync_init+0x1dc>)
    22aa:	4798      	blx	r3

	if (regs == NULL) {
    22ac:	2d00      	cmp	r5, #0
    22ae:	d100      	bne.n	22b2 <_spi_m_sync_init+0x4e>
    22b0:	e0ab      	b.n	240a <_spi_m_sync_init+0x1a6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    22b2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    22b4:	07db      	lsls	r3, r3, #31
    22b6:	d41c      	bmi.n	22f2 <_spi_m_sync_init+0x8e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    22b8:	7829      	ldrb	r1, [r5, #0]
    22ba:	231c      	movs	r3, #28
    22bc:	4019      	ands	r1, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    22be:	2203      	movs	r2, #3
    22c0:	69e3      	ldr	r3, [r4, #28]
    22c2:	421a      	tst	r2, r3
    22c4:	d1fc      	bne.n	22c0 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    22c6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    22c8:	079b      	lsls	r3, r3, #30
    22ca:	d50b      	bpl.n	22e4 <_spi_m_sync_init+0x80>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    22cc:	6823      	ldr	r3, [r4, #0]
    22ce:	2202      	movs	r2, #2
    22d0:	4393      	bics	r3, r2
    22d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    22d4:	3201      	adds	r2, #1
    22d6:	69e3      	ldr	r3, [r4, #28]
    22d8:	421a      	tst	r2, r3
    22da:	d1fc      	bne.n	22d6 <_spi_m_sync_init+0x72>
    22dc:	2202      	movs	r2, #2
    22de:	69e3      	ldr	r3, [r4, #28]
    22e0:	421a      	tst	r2, r3
    22e2:	d1fc      	bne.n	22de <_spi_m_sync_init+0x7a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    22e4:	2301      	movs	r3, #1
    22e6:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    22e8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    22ea:	2203      	movs	r2, #3
    22ec:	69e3      	ldr	r3, [r4, #28]
    22ee:	421a      	tst	r2, r3
    22f0:	d1fc      	bne.n	22ec <_spi_m_sync_init+0x88>
    22f2:	2201      	movs	r2, #1
    22f4:	69e3      	ldr	r3, [r4, #28]
    22f6:	421a      	tst	r2, r3
    22f8:	d1fc      	bne.n	22f4 <_spi_m_sync_init+0x90>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    22fa:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    22fc:	782b      	ldrb	r3, [r5, #0]
    22fe:	221c      	movs	r2, #28
    2300:	4013      	ands	r3, r2
    2302:	2b08      	cmp	r3, #8
    2304:	d042      	beq.n	238c <_spi_m_sync_init+0x128>
	ASSERT(hw && regs);
    2306:	0020      	movs	r0, r4
    2308:	1e43      	subs	r3, r0, #1
    230a:	4198      	sbcs	r0, r3
    230c:	b2c0      	uxtb	r0, r0
    230e:	4a4d      	ldr	r2, [pc, #308]	; (2444 <_spi_m_sync_init+0x1e0>)
    2310:	494a      	ldr	r1, [pc, #296]	; (243c <_spi_m_sync_init+0x1d8>)
    2312:	4b4b      	ldr	r3, [pc, #300]	; (2440 <_spi_m_sync_init+0x1dc>)
    2314:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2316:	782b      	ldrb	r3, [r5, #0]
    2318:	786a      	ldrb	r2, [r5, #1]
    231a:	0212      	lsls	r2, r2, #8
    231c:	431a      	orrs	r2, r3
    231e:	78ab      	ldrb	r3, [r5, #2]
    2320:	041b      	lsls	r3, r3, #16
    2322:	431a      	orrs	r2, r3
    2324:	78eb      	ldrb	r3, [r5, #3]
    2326:	061b      	lsls	r3, r3, #24
    2328:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    232a:	4a47      	ldr	r2, [pc, #284]	; (2448 <_spi_m_sync_init+0x1e4>)
    232c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    232e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2330:	3208      	adds	r2, #8
    2332:	32ff      	adds	r2, #255	; 0xff
    2334:	69e3      	ldr	r3, [r4, #28]
    2336:	421a      	tst	r2, r3
    2338:	d1fc      	bne.n	2334 <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
    233a:	792b      	ldrb	r3, [r5, #4]
    233c:	796a      	ldrb	r2, [r5, #5]
    233e:	0212      	lsls	r2, r2, #8
    2340:	431a      	orrs	r2, r3
    2342:	79ab      	ldrb	r3, [r5, #6]
    2344:	041b      	lsls	r3, r3, #16
    2346:	431a      	orrs	r2, r3
    2348:	79eb      	ldrb	r3, [r5, #7]
    234a:	061b      	lsls	r3, r3, #24
    234c:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    234e:	4a3f      	ldr	r2, [pc, #252]	; (244c <_spi_m_sync_init+0x1e8>)
    2350:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    2352:	2280      	movs	r2, #128	; 0x80
    2354:	0292      	lsls	r2, r2, #10
    2356:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2358:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    235a:	2207      	movs	r2, #7
    235c:	69e3      	ldr	r3, [r4, #28]
    235e:	421a      	tst	r2, r3
    2360:	d1fc      	bne.n	235c <_spi_m_sync_init+0xf8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2362:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2364:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2366:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2368:	2330      	movs	r3, #48	; 0x30
    236a:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    236c:	792b      	ldrb	r3, [r5, #4]
    236e:	2207      	movs	r2, #7
    2370:	4013      	ands	r3, r2
    2372:	1e5a      	subs	r2, r3, #1
    2374:	4193      	sbcs	r3, r2
    2376:	3301      	adds	r3, #1
    2378:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    237a:	7baa      	ldrb	r2, [r5, #14]
    237c:	7beb      	ldrb	r3, [r5, #15]
    237e:	021b      	lsls	r3, r3, #8
    2380:	4313      	orrs	r3, r2
    2382:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2384:	2000      	movs	r0, #0
}
    2386:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    2388:	2300      	movs	r3, #0
    238a:	e781      	b.n	2290 <_spi_m_sync_init+0x2c>
	ASSERT(hw && regs);
    238c:	0020      	movs	r0, r4
    238e:	1e43      	subs	r3, r0, #1
    2390:	4198      	sbcs	r0, r3
    2392:	b2c0      	uxtb	r0, r0
    2394:	4a2e      	ldr	r2, [pc, #184]	; (2450 <_spi_m_sync_init+0x1ec>)
    2396:	4929      	ldr	r1, [pc, #164]	; (243c <_spi_m_sync_init+0x1d8>)
    2398:	4b29      	ldr	r3, [pc, #164]	; (2440 <_spi_m_sync_init+0x1dc>)
    239a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    239c:	782b      	ldrb	r3, [r5, #0]
    239e:	786a      	ldrb	r2, [r5, #1]
    23a0:	0212      	lsls	r2, r2, #8
    23a2:	431a      	orrs	r2, r3
    23a4:	78ab      	ldrb	r3, [r5, #2]
    23a6:	041b      	lsls	r3, r3, #16
    23a8:	431a      	orrs	r2, r3
    23aa:	78eb      	ldrb	r3, [r5, #3]
    23ac:	061b      	lsls	r3, r3, #24
    23ae:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    23b0:	4a25      	ldr	r2, [pc, #148]	; (2448 <_spi_m_sync_init+0x1e4>)
    23b2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    23b4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23b6:	3208      	adds	r2, #8
    23b8:	32ff      	adds	r2, #255	; 0xff
    23ba:	69e3      	ldr	r3, [r4, #28]
    23bc:	421a      	tst	r2, r3
    23be:	d1fc      	bne.n	23ba <_spi_m_sync_init+0x156>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    23c0:	792b      	ldrb	r3, [r5, #4]
    23c2:	796a      	ldrb	r2, [r5, #5]
    23c4:	0212      	lsls	r2, r2, #8
    23c6:	431a      	orrs	r2, r3
    23c8:	79ab      	ldrb	r3, [r5, #6]
    23ca:	041b      	lsls	r3, r3, #16
    23cc:	431a      	orrs	r2, r3
    23ce:	79eb      	ldrb	r3, [r5, #7]
    23d0:	061b      	lsls	r3, r3, #24
    23d2:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    23d4:	4a1f      	ldr	r2, [pc, #124]	; (2454 <_spi_m_sync_init+0x1f0>)
    23d6:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    23d8:	4a1f      	ldr	r2, [pc, #124]	; (2458 <_spi_m_sync_init+0x1f4>)
    23da:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    23dc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23de:	2207      	movs	r2, #7
    23e0:	69e3      	ldr	r3, [r4, #28]
    23e2:	421a      	tst	r2, r3
    23e4:	d1fc      	bne.n	23e0 <_spi_m_sync_init+0x17c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    23e6:	7a2b      	ldrb	r3, [r5, #8]
    23e8:	7a6a      	ldrb	r2, [r5, #9]
    23ea:	0212      	lsls	r2, r2, #8
    23ec:	431a      	orrs	r2, r3
    23ee:	7aab      	ldrb	r3, [r5, #10]
    23f0:	041b      	lsls	r3, r3, #16
    23f2:	431a      	orrs	r2, r3
    23f4:	7aeb      	ldrb	r3, [r5, #11]
    23f6:	061b      	lsls	r3, r3, #24
    23f8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    23fa:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    23fc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    23fe:	2330      	movs	r3, #48	; 0x30
    2400:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2402:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2404:	2b00      	cmp	r3, #0
    2406:	d1fc      	bne.n	2402 <_spi_m_sync_init+0x19e>
    2408:	e7b0      	b.n	236c <_spi_m_sync_init+0x108>
		return ERR_INVALID_ARG;
    240a:	200d      	movs	r0, #13
    240c:	4240      	negs	r0, r0
    240e:	e7ba      	b.n	2386 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    2410:	4a09      	ldr	r2, [pc, #36]	; (2438 <_spi_m_sync_init+0x1d4>)
    2412:	490a      	ldr	r1, [pc, #40]	; (243c <_spi_m_sync_init+0x1d8>)
    2414:	2000      	movs	r0, #0
    2416:	4b0a      	ldr	r3, [pc, #40]	; (2440 <_spi_m_sync_init+0x1dc>)
    2418:	4798      	blx	r3
		return ERR_INVALID_ARG;
    241a:	200d      	movs	r0, #13
    241c:	4240      	negs	r0, r0
    241e:	e7b2      	b.n	2386 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    2420:	4a05      	ldr	r2, [pc, #20]	; (2438 <_spi_m_sync_init+0x1d4>)
    2422:	4906      	ldr	r1, [pc, #24]	; (243c <_spi_m_sync_init+0x1d8>)
    2424:	2001      	movs	r0, #1
    2426:	4b06      	ldr	r3, [pc, #24]	; (2440 <_spi_m_sync_init+0x1dc>)
    2428:	4798      	blx	r3
		return ERR_INVALID_ARG;
    242a:	200d      	movs	r0, #13
    242c:	4240      	negs	r0, r0
    242e:	e7aa      	b.n	2386 <_spi_m_sync_init+0x122>
    2430:	bdfff800 	.word	0xbdfff800
    2434:	00003090 	.word	0x00003090
    2438:	00000921 	.word	0x00000921
    243c:	000030cc 	.word	0x000030cc
    2440:	000018ad 	.word	0x000018ad
    2444:	000008eb 	.word	0x000008eb
    2448:	fffffefc 	.word	0xfffffefc
    244c:	fffd1dbf 	.word	0xfffd1dbf
    2450:	000008ff 	.word	0x000008ff
    2454:	fffdddbf 	.word	0xfffdddbf
    2458:	00020240 	.word	0x00020240

0000245c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    245c:	b510      	push	{r4, lr}
    245e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2460:	d00b      	beq.n	247a <_spi_m_sync_enable+0x1e>
    2462:	6800      	ldr	r0, [r0, #0]
    2464:	1e43      	subs	r3, r0, #1
    2466:	4198      	sbcs	r0, r3
    2468:	b2c0      	uxtb	r0, r0
    246a:	4a05      	ldr	r2, [pc, #20]	; (2480 <_spi_m_sync_enable+0x24>)
    246c:	4905      	ldr	r1, [pc, #20]	; (2484 <_spi_m_sync_enable+0x28>)
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <_spi_m_sync_enable+0x2c>)
    2470:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2472:	6820      	ldr	r0, [r4, #0]
    2474:	4b05      	ldr	r3, [pc, #20]	; (248c <_spi_m_sync_enable+0x30>)
    2476:	4798      	blx	r3
}
    2478:	bd10      	pop	{r4, pc}
    247a:	2000      	movs	r0, #0
    247c:	e7f5      	b.n	246a <_spi_m_sync_enable+0xe>
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	0000097c 	.word	0x0000097c
    2484:	000030cc 	.word	0x000030cc
    2488:	000018ad 	.word	0x000018ad
    248c:	00002205 	.word	0x00002205

00002490 <_spi_m_sync_set_baudrate>:
	rc = ((clk >> 1) / baud) - 1;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	0005      	movs	r5, r0
    2494:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    2496:	2800      	cmp	r0, #0
    2498:	d00f      	beq.n	24ba <_spi_m_sync_set_baudrate+0x2a>
    249a:	6800      	ldr	r0, [r0, #0]
    249c:	1e43      	subs	r3, r0, #1
    249e:	4198      	sbcs	r0, r3
    24a0:	b2c0      	uxtb	r0, r0
    24a2:	4a08      	ldr	r2, [pc, #32]	; (24c4 <_spi_m_sync_set_baudrate+0x34>)
    24a4:	4908      	ldr	r1, [pc, #32]	; (24c8 <_spi_m_sync_set_baudrate+0x38>)
    24a6:	4b09      	ldr	r3, [pc, #36]	; (24cc <_spi_m_sync_set_baudrate+0x3c>)
    24a8:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
    24aa:	682b      	ldr	r3, [r5, #0]
    24ac:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    24ae:	07d2      	lsls	r2, r2, #31
    24b0:	d405      	bmi.n	24be <_spi_m_sync_set_baudrate+0x2e>
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    24b2:	b2e4      	uxtb	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    24b4:	731c      	strb	r4, [r3, #12]
	return ERR_NONE;
    24b6:	2000      	movs	r0, #0
}
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	2000      	movs	r0, #0
    24bc:	e7f1      	b.n	24a2 <_spi_m_sync_set_baudrate+0x12>
		return ERR_BUSY;
    24be:	2004      	movs	r0, #4
    24c0:	4240      	negs	r0, r0
	return _spi_set_baudrate(dev->prvt, baud_val);
    24c2:	e7f9      	b.n	24b8 <_spi_m_sync_set_baudrate+0x28>
    24c4:	000009e3 	.word	0x000009e3
    24c8:	000030cc 	.word	0x000030cc
    24cc:	000018ad 	.word	0x000018ad

000024d0 <_spi_m_sync_set_char_size>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
    24d0:	b570      	push	{r4, r5, r6, lr}
    24d2:	0005      	movs	r5, r0
    24d4:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    24d6:	2800      	cmp	r0, #0
    24d8:	d00d      	beq.n	24f6 <_spi_m_sync_set_char_size+0x26>
    24da:	6800      	ldr	r0, [r0, #0]
    24dc:	1e43      	subs	r3, r0, #1
    24de:	4198      	sbcs	r0, r3
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	4a06      	ldr	r2, [pc, #24]	; (24fc <_spi_m_sync_set_char_size+0x2c>)
    24e4:	4906      	ldr	r1, [pc, #24]	; (2500 <_spi_m_sync_set_char_size+0x30>)
    24e6:	4b07      	ldr	r3, [pc, #28]	; (2504 <_spi_m_sync_set_char_size+0x34>)
    24e8:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
    24ea:	1d2a      	adds	r2, r5, #4
    24ec:	6828      	ldr	r0, [r5, #0]
    24ee:	0021      	movs	r1, r4
    24f0:	4b05      	ldr	r3, [pc, #20]	; (2508 <_spi_m_sync_set_char_size+0x38>)
    24f2:	4798      	blx	r3
}
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	2000      	movs	r0, #0
    24f8:	e7f3      	b.n	24e2 <_spi_m_sync_set_char_size+0x12>
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	000009f1 	.word	0x000009f1
    2500:	000030cc 	.word	0x000030cc
    2504:	000018ad 	.word	0x000018ad
    2508:	00002225 	.word	0x00002225

0000250c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    250c:	b5f0      	push	{r4, r5, r6, r7, lr}
    250e:	46de      	mov	lr, fp
    2510:	4657      	mov	r7, sl
    2512:	464e      	mov	r6, r9
    2514:	4645      	mov	r5, r8
    2516:	b5e0      	push	{r5, r6, r7, lr}
    2518:	b083      	sub	sp, #12
    251a:	4681      	mov	r9, r0
    251c:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    251e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2520:	680b      	ldr	r3, [r1, #0]
    2522:	4698      	mov	r8, r3
    2524:	684d      	ldr	r5, [r1, #4]
    2526:	7903      	ldrb	r3, [r0, #4]
    2528:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    252a:	2800      	cmp	r0, #0
    252c:	d015      	beq.n	255a <_spi_m_sync_trans+0x4e>
    252e:	0020      	movs	r0, r4
    2530:	1e43      	subs	r3, r0, #1
    2532:	4198      	sbcs	r0, r3
    2534:	b2c0      	uxtb	r0, r0
    2536:	4a36      	ldr	r2, [pc, #216]	; (2610 <_spi_m_sync_trans+0x104>)
    2538:	4936      	ldr	r1, [pc, #216]	; (2614 <_spi_m_sync_trans+0x108>)
    253a:	4b37      	ldr	r3, [pc, #220]	; (2618 <_spi_m_sync_trans+0x10c>)
    253c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    253e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2540:	075b      	lsls	r3, r3, #29
    2542:	d13f      	bne.n	25c4 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2544:	2303      	movs	r3, #3
    2546:	69e0      	ldr	r0, [r4, #28]
    2548:	4018      	ands	r0, r3
    254a:	d1fc      	bne.n	2546 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    254c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    254e:	079b      	lsls	r3, r3, #30
    2550:	d53b      	bpl.n	25ca <_spi_m_sync_trans+0xbe>
    2552:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2554:	2301      	movs	r3, #1
    2556:	469c      	mov	ip, r3
    2558:	e009      	b.n	256e <_spi_m_sync_trans+0x62>
    255a:	2000      	movs	r0, #0
    255c:	e7eb      	b.n	2536 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    255e:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    2560:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2562:	b25b      	sxtb	r3, r3
    2564:	2b00      	cmp	r3, #0
    2566:	db16      	blt.n	2596 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2568:	68b3      	ldr	r3, [r6, #8]
    256a:	4283      	cmp	r3, r0
    256c:	d927      	bls.n	25be <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    256e:	7e23      	ldrb	r3, [r4, #24]
    2570:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2572:	2104      	movs	r1, #4
    2574:	4219      	tst	r1, r3
    2576:	d02b      	beq.n	25d0 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2578:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    257a:	2d00      	cmp	r5, #0
    257c:	d0f0      	beq.n	2560 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    257e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    2580:	9901      	ldr	r1, [sp, #4]
    2582:	2901      	cmp	r1, #1
    2584:	d9eb      	bls.n	255e <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2586:	0a3f      	lsrs	r7, r7, #8
    2588:	706f      	strb	r7, [r5, #1]
    258a:	3502      	adds	r5, #2
    258c:	e7e8      	b.n	2560 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    258e:	2101      	movs	r1, #1
    2590:	468b      	mov	fp, r1
    2592:	44d8      	add	r8, fp
    2594:	e037      	b.n	2606 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2596:	2301      	movs	r3, #1
    2598:	425b      	negs	r3, r3
    259a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    259c:	3381      	adds	r3, #129	; 0x81
    259e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    25a0:	2013      	movs	r0, #19
    25a2:	4240      	negs	r0, r0
	tmp &= mask;
    25a4:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    25a6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    25a8:	4213      	tst	r3, r2
    25aa:	d0fc      	beq.n	25a6 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    25ac:	2303      	movs	r3, #3
    25ae:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    25b0:	b003      	add	sp, #12
    25b2:	bc3c      	pop	{r2, r3, r4, r5}
    25b4:	4690      	mov	r8, r2
    25b6:	4699      	mov	r9, r3
    25b8:	46a2      	mov	sl, r4
    25ba:	46ab      	mov	fp, r5
    25bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    25be:	4293      	cmp	r3, r2
    25c0:	d8d5      	bhi.n	256e <_spi_m_sync_trans+0x62>
    25c2:	e7ef      	b.n	25a4 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    25c4:	2004      	movs	r0, #4
    25c6:	4240      	negs	r0, r0
    25c8:	e7f2      	b.n	25b0 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    25ca:	2014      	movs	r0, #20
    25cc:	4240      	negs	r0, r0
    25ce:	e7ef      	b.n	25b0 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    25d0:	4290      	cmp	r0, r2
    25d2:	d8c6      	bhi.n	2562 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    25d4:	4667      	mov	r7, ip
    25d6:	421f      	tst	r7, r3
    25d8:	d0c3      	beq.n	2562 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    25da:	464f      	mov	r7, r9
    25dc:	88ff      	ldrh	r7, [r7, #6]
    25de:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    25e0:	4647      	mov	r7, r8
    25e2:	2f00      	cmp	r7, #0
    25e4:	d00f      	beq.n	2606 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    25e6:	783f      	ldrb	r7, [r7, #0]
    25e8:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    25ea:	9901      	ldr	r1, [sp, #4]
    25ec:	2901      	cmp	r1, #1
    25ee:	d9ce      	bls.n	258e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    25f0:	4647      	mov	r7, r8
    25f2:	787f      	ldrb	r7, [r7, #1]
    25f4:	023f      	lsls	r7, r7, #8
    25f6:	46bb      	mov	fp, r7
    25f8:	4657      	mov	r7, sl
    25fa:	4659      	mov	r1, fp
    25fc:	430f      	orrs	r7, r1
    25fe:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    2600:	2102      	movs	r1, #2
    2602:	468b      	mov	fp, r1
    2604:	44d8      	add	r8, fp
	ctrl->txcnt++;
    2606:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2608:	4657      	mov	r7, sl
    260a:	62a7      	str	r7, [r4, #40]	; 0x28
    260c:	e7a9      	b.n	2562 <_spi_m_sync_trans+0x56>
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00000a81 	.word	0x00000a81
    2614:	000030cc 	.word	0x000030cc
    2618:	000018ad 	.word	0x000018ad

0000261c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    261c:	4b0e      	ldr	r3, [pc, #56]	; (2658 <_sysctrl_init_sources+0x3c>)
    261e:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2620:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2622:	480e      	ldr	r0, [pc, #56]	; (265c <_sysctrl_init_sources+0x40>)
    2624:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2626:	0f89      	lsrs	r1, r1, #30
    2628:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    262a:	480d      	ldr	r0, [pc, #52]	; (2660 <_sysctrl_init_sources+0x44>)
    262c:	4301      	orrs	r1, r0
    262e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2630:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2632:	699a      	ldr	r2, [r3, #24]
    2634:	2102      	movs	r1, #2
    2636:	430a      	orrs	r2, r1
    2638:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    263a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    263c:	311d      	adds	r1, #29
    263e:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2640:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2642:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2644:	2208      	movs	r2, #8
    2646:	68cb      	ldr	r3, [r1, #12]
    2648:	421a      	tst	r2, r3
    264a:	d0fc      	beq.n	2646 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    264c:	4a02      	ldr	r2, [pc, #8]	; (2658 <_sysctrl_init_sources+0x3c>)
    264e:	6a13      	ldr	r3, [r2, #32]
    2650:	2180      	movs	r1, #128	; 0x80
    2652:	430b      	orrs	r3, r1
    2654:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2656:	4770      	bx	lr
    2658:	40000800 	.word	0x40000800
    265c:	0fff0000 	.word	0x0fff0000
    2660:	00000302 	.word	0x00000302

00002664 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    2664:	4a02      	ldr	r2, [pc, #8]	; (2670 <_sysctrl_init_referenced_generators+0xc>)
    2666:	6993      	ldr	r3, [r2, #24]
    2668:	2102      	movs	r1, #2
    266a:	438b      	bics	r3, r1
    266c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    266e:	4770      	bx	lr
    2670:	40000800 	.word	0x40000800

00002674 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2674:	4b02      	ldr	r3, [pc, #8]	; (2680 <_delay_init+0xc>)
    2676:	4a03      	ldr	r2, [pc, #12]	; (2684 <_delay_init+0x10>)
    2678:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    267a:	2205      	movs	r2, #5
    267c:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    267e:	4770      	bx	lr
    2680:	e000e010 	.word	0xe000e010
    2684:	00ffffff 	.word	0x00ffffff

00002688 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    2688:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    268a:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    268c:	1e5e      	subs	r6, r3, #1
    268e:	b2f6      	uxtb	r6, r6
    2690:	2b00      	cmp	r3, #0
    2692:	d013      	beq.n	26bc <_delay_cycles+0x34>
    2694:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    2696:	4a0e      	ldr	r2, [pc, #56]	; (26d0 <_delay_cycles+0x48>)
    2698:	4d0e      	ldr	r5, [pc, #56]	; (26d4 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    269a:	2080      	movs	r0, #128	; 0x80
    269c:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    269e:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    26a0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    26a2:	6813      	ldr	r3, [r2, #0]
    26a4:	4203      	tst	r3, r0
    26a6:	d0fc      	beq.n	26a2 <_delay_cycles+0x1a>
	while (n--) {
    26a8:	3c01      	subs	r4, #1
    26aa:	b2e4      	uxtb	r4, r4
    26ac:	2cff      	cmp	r4, #255	; 0xff
    26ae:	d1f6      	bne.n	269e <_delay_cycles+0x16>
    26b0:	0633      	lsls	r3, r6, #24
    26b2:	1af6      	subs	r6, r6, r3
    26b4:	4b08      	ldr	r3, [pc, #32]	; (26d8 <_delay_cycles+0x50>)
    26b6:	469c      	mov	ip, r3
    26b8:	4461      	add	r1, ip
    26ba:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    26bc:	4b04      	ldr	r3, [pc, #16]	; (26d0 <_delay_cycles+0x48>)
    26be:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    26c0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    26c2:	0019      	movs	r1, r3
    26c4:	2280      	movs	r2, #128	; 0x80
    26c6:	0252      	lsls	r2, r2, #9
    26c8:	680b      	ldr	r3, [r1, #0]
    26ca:	4213      	tst	r3, r2
    26cc:	d0fc      	beq.n	26c8 <_delay_cycles+0x40>
		;
}
    26ce:	bd70      	pop	{r4, r5, r6, pc}
    26d0:	e000e010 	.word	0xe000e010
    26d4:	00ffffff 	.word	0x00ffffff
    26d8:	ff000001 	.word	0xff000001

000026dc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    26dc:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <get_tc_index+0x2c>)
    26e0:	469c      	mov	ip, r3
    26e2:	4460      	add	r0, ip
    26e4:	0a80      	lsrs	r0, r0, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    26e6:	3003      	adds	r0, #3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    26e8:	4b08      	ldr	r3, [pc, #32]	; (270c <get_tc_index+0x30>)
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	b2c0      	uxtb	r0, r0
    26ee:	4283      	cmp	r3, r0
    26f0:	d008      	beq.n	2704 <get_tc_index+0x28>
			return i;
		}
	}

	ASSERT(false);
    26f2:	225a      	movs	r2, #90	; 0x5a
    26f4:	32ff      	adds	r2, #255	; 0xff
    26f6:	4906      	ldr	r1, [pc, #24]	; (2710 <get_tc_index+0x34>)
    26f8:	2000      	movs	r0, #0
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <get_tc_index+0x38>)
    26fc:	4798      	blx	r3
	return -1;
    26fe:	2001      	movs	r0, #1
    2700:	4240      	negs	r0, r0
}
    2702:	bd10      	pop	{r4, pc}
			return i;
    2704:	2000      	movs	r0, #0
    2706:	e7fc      	b.n	2702 <get_tc_index+0x26>
    2708:	bdffd400 	.word	0xbdffd400
    270c:	20000000 	.word	0x20000000
    2710:	000030e8 	.word	0x000030e8
    2714:	000018ad 	.word	0x000018ad

00002718 <_pwm_init>:
{
    2718:	b570      	push	{r4, r5, r6, lr}
    271a:	0005      	movs	r5, r0
    271c:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    271e:	0008      	movs	r0, r1
    2720:	4b30      	ldr	r3, [pc, #192]	; (27e4 <_pwm_init+0xcc>)
    2722:	4798      	blx	r3
	device->hw = hw;
    2724:	612c      	str	r4, [r5, #16]
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2726:	7be3      	ldrb	r3, [r4, #15]
    2728:	09db      	lsrs	r3, r3, #7
    272a:	d1fc      	bne.n	2726 <_pwm_init+0xe>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    272c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    272e:	079b      	lsls	r3, r3, #30
    2730:	d504      	bpl.n	273c <_pwm_init+0x24>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2732:	2300      	movs	r3, #0
    2734:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2736:	7be3      	ldrb	r3, [r4, #15]
    2738:	09db      	lsrs	r3, r3, #7
    273a:	d1fc      	bne.n	2736 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    273c:	2301      	movs	r3, #1
    273e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2740:	7be3      	ldrb	r3, [r4, #15]
    2742:	09db      	lsrs	r3, r3, #7
    2744:	d1fc      	bne.n	2740 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2746:	0083      	lsls	r3, r0, #2
    2748:	181b      	adds	r3, r3, r0
    274a:	009a      	lsls	r2, r3, #2
    274c:	4b26      	ldr	r3, [pc, #152]	; (27e8 <_pwm_init+0xd0>)
    274e:	189b      	adds	r3, r3, r2
    2750:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2752:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2754:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2756:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2758:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    275a:	8163      	strh	r3, [r4, #10]
    275c:	230c      	movs	r3, #12
    275e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2760:	2b08      	cmp	r3, #8
    2762:	d029      	beq.n	27b8 <_pwm_init+0xa0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2764:	2b00      	cmp	r3, #0
    2766:	d138      	bne.n	27da <_pwm_init+0xc2>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2768:	491f      	ldr	r1, [pc, #124]	; (27e8 <_pwm_init+0xd0>)
    276a:	0083      	lsls	r3, r0, #2
    276c:	181a      	adds	r2, r3, r0
    276e:	0092      	lsls	r2, r2, #2
    2770:	188a      	adds	r2, r1, r2
    2772:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2774:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2776:	1818      	adds	r0, r3, r0
    2778:	0080      	lsls	r0, r0, #2
    277a:	1808      	adds	r0, r1, r0
    277c:	8a03      	ldrh	r3, [r0, #16]
    277e:	8363      	strh	r3, [r4, #26]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    2780:	4b1a      	ldr	r3, [pc, #104]	; (27ec <_pwm_init+0xd4>)
    2782:	429c      	cmp	r4, r3
    2784:	d025      	beq.n	27d2 <_pwm_init+0xba>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2786:	4b1a      	ldr	r3, [pc, #104]	; (27f0 <_pwm_init+0xd8>)
    2788:	469c      	mov	ip, r3
    278a:	4464      	add	r4, ip
    278c:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    278e:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    2790:	b2e3      	uxtb	r3, r4
    2792:	0622      	lsls	r2, r4, #24
    2794:	d424      	bmi.n	27e0 <_pwm_init+0xc8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2796:	221f      	movs	r2, #31
    2798:	401a      	ands	r2, r3
    279a:	2301      	movs	r3, #1
    279c:	4093      	lsls	r3, r2
    279e:	4a15      	ldr	r2, [pc, #84]	; (27f4 <_pwm_init+0xdc>)
    27a0:	2180      	movs	r1, #128	; 0x80
    27a2:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    27a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27a8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27ac:	3101      	adds	r1, #1
    27ae:	31ff      	adds	r1, #255	; 0xff
    27b0:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27b2:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    27b4:	2000      	movs	r0, #0
}
    27b6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    27b8:	490b      	ldr	r1, [pc, #44]	; (27e8 <_pwm_init+0xd0>)
    27ba:	0083      	lsls	r3, r0, #2
    27bc:	181a      	adds	r2, r3, r0
    27be:	0092      	lsls	r2, r2, #2
    27c0:	188a      	adds	r2, r1, r2
    27c2:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27c4:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    27c6:	1818      	adds	r0, r3, r0
    27c8:	0080      	lsls	r0, r0, #2
    27ca:	1808      	adds	r0, r1, r0
    27cc:	6903      	ldr	r3, [r0, #16]
    27ce:	61e3      	str	r3, [r4, #28]
    27d0:	e7d6      	b.n	2780 <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    27d2:	4b09      	ldr	r3, [pc, #36]	; (27f8 <_pwm_init+0xe0>)
    27d4:	601d      	str	r5, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    27d6:	2312      	movs	r3, #18
    27d8:	e7dd      	b.n	2796 <_pwm_init+0x7e>
		return ERR_INVALID_DATA;
    27da:	2001      	movs	r0, #1
    27dc:	4240      	negs	r0, r0
    27de:	e7ea      	b.n	27b6 <_pwm_init+0x9e>
	return ERR_NONE;
    27e0:	2000      	movs	r0, #0
    27e2:	e7e8      	b.n	27b6 <_pwm_init+0x9e>
    27e4:	000026dd 	.word	0x000026dd
    27e8:	20000000 	.word	0x20000000
    27ec:	42002c00 	.word	0x42002c00
    27f0:	bdffd400 	.word	0xbdffd400
    27f4:	e000e100 	.word	0xe000e100
    27f8:	20000078 	.word	0x20000078

000027fc <_tc_get_pwm>:
}
    27fc:	2000      	movs	r0, #0
    27fe:	4770      	bx	lr

00002800 <TC3_Handler>:
{
    2800:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    2802:	4b0c      	ldr	r3, [pc, #48]	; (2834 <TC3_Handler+0x34>)
    2804:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    2806:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2808:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    280a:	07db      	lsls	r3, r3, #31
    280c:	d506      	bpl.n	281c <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    280e:	2301      	movs	r3, #1
    2810:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    2812:	682b      	ldr	r3, [r5, #0]
    2814:	2b00      	cmp	r3, #0
    2816:	d001      	beq.n	281c <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    2818:	0028      	movs	r0, r5
    281a:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    281c:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    281e:	079b      	lsls	r3, r3, #30
    2820:	d506      	bpl.n	2830 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2822:	2302      	movs	r3, #2
    2824:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    2826:	686b      	ldr	r3, [r5, #4]
    2828:	2b00      	cmp	r3, #0
    282a:	d001      	beq.n	2830 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    282c:	0028      	movs	r0, r5
    282e:	4798      	blx	r3
}
    2830:	bd70      	pop	{r4, r5, r6, pc}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	20000078 	.word	0x20000078

00002838 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2838:	b510      	push	{r4, lr}
    283a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    283c:	d025      	beq.n	288a <_wdt_init+0x52>
    283e:	6800      	ldr	r0, [r0, #0]
    2840:	1e43      	subs	r3, r0, #1
    2842:	4198      	sbcs	r0, r3
    2844:	b2c0      	uxtb	r0, r0
    2846:	224f      	movs	r2, #79	; 0x4f
    2848:	4914      	ldr	r1, [pc, #80]	; (289c <_wdt_init+0x64>)
    284a:	4b15      	ldr	r3, [pc, #84]	; (28a0 <_wdt_init+0x68>)
    284c:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    284e:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2850:	79d3      	ldrb	r3, [r2, #7]
    2852:	09db      	lsrs	r3, r3, #7
    2854:	d1fc      	bne.n	2850 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    2856:	7813      	ldrb	r3, [r2, #0]
    2858:	09db      	lsrs	r3, r3, #7
    285a:	d118      	bne.n	288e <_wdt_init+0x56>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    285c:	79d3      	ldrb	r3, [r2, #7]
    285e:	09db      	lsrs	r3, r3, #7
    2860:	d1fc      	bne.n	285c <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	079b      	lsls	r3, r3, #30
    2866:	d415      	bmi.n	2894 <_wdt_init+0x5c>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    2868:	7813      	ldrb	r3, [r2, #0]
    286a:	2104      	movs	r1, #4
    286c:	438b      	bics	r3, r1
    286e:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2870:	79d3      	ldrb	r3, [r2, #7]
    2872:	09db      	lsrs	r3, r3, #7
    2874:	d1fc      	bne.n	2870 <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    2876:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2878:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    287a:	210f      	movs	r1, #15
    287c:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    287e:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2880:	79d3      	ldrb	r3, [r2, #7]
    2882:	09db      	lsrs	r3, r3, #7
    2884:	d1fc      	bne.n	2880 <_wdt_init+0x48>
	}

	return ERR_NONE;
    2886:	2000      	movs	r0, #0
}
    2888:	bd10      	pop	{r4, pc}
    288a:	2000      	movs	r0, #0
    288c:	e7db      	b.n	2846 <_wdt_init+0xe>
		return ERR_DENIED;
    288e:	2011      	movs	r0, #17
    2890:	4240      	negs	r0, r0
    2892:	e7f9      	b.n	2888 <_wdt_init+0x50>
    2894:	2011      	movs	r0, #17
    2896:	4240      	negs	r0, r0
    2898:	e7f6      	b.n	2888 <_wdt_init+0x50>
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	000030fc 	.word	0x000030fc
    28a0:	000018ad 	.word	0x000018ad

000028a4 <main>:
/**********************************************************************************************
 * Begin main function
**********************************************************************************************/

int main(void)
{
    28a4:	b510      	push	{r4, lr}
    28a6:	b082      	sub	sp, #8
	basal_insulin_delivered = false;
    28a8:	2300      	movs	r3, #0
    28aa:	4a37      	ldr	r2, [pc, #220]	; (2988 <main+0xe4>)
    28ac:	7013      	strb	r3, [r2, #0]
	bolus_insulin_delivered = false;
    28ae:	4a37      	ldr	r2, [pc, #220]	; (298c <main+0xe8>)
    28b0:	7013      	strb	r3, [r2, #0]
	cycle_complete = false;
    28b2:	4a37      	ldr	r2, [pc, #220]	; (2990 <main+0xec>)
    28b4:	7013      	strb	r3, [r2, #0]
	
	
	atmel_start_init(); // Initializes MCU, drivers and middleware.
    28b6:	4b37      	ldr	r3, [pc, #220]	; (2994 <main+0xf0>)
    28b8:	4798      	blx	r3
	
	SPI_Begin(); // Start SPI Peripheral.
    28ba:	4b37      	ldr	r3, [pc, #220]	; (2998 <main+0xf4>)
    28bc:	4798      	blx	r3
	
	TIMER_0_setup(); // Setup TIMER_0 Peripheral used for debouncing
    28be:	4b37      	ldr	r3, [pc, #220]	; (299c <main+0xf8>)
    28c0:	4798      	blx	r3
	
	init_interrupts(); // Register interrupts and tie them to a callback function.
    28c2:	4b37      	ldr	r3, [pc, #220]	; (29a0 <main+0xfc>)
    28c4:	4798      	blx	r3
	
	// Check a general purpose bit in the RTC to find out if the
	// time was set previously. Set it if not.
	if(!check_rtc_initialised()) 
    28c6:	4b37      	ldr	r3, [pc, #220]	; (29a4 <main+0x100>)
    28c8:	4798      	blx	r3
    28ca:	2800      	cmp	r0, #0
    28cc:	d147      	bne.n	295e <main+0xba>
	{
		initialise_rtc();
    28ce:	4b36      	ldr	r3, [pc, #216]	; (29a8 <main+0x104>)
    28d0:	4798      	blx	r3
		rtc_set_current_time(20, 8, 21, 16, 28, 00); // Enter date and time values here
    28d2:	2300      	movs	r3, #0
    28d4:	9301      	str	r3, [sp, #4]
    28d6:	331c      	adds	r3, #28
    28d8:	9300      	str	r3, [sp, #0]
    28da:	3b0c      	subs	r3, #12
    28dc:	2215      	movs	r2, #21
    28de:	2108      	movs	r1, #8
    28e0:	2014      	movs	r0, #20
    28e2:	4c32      	ldr	r4, [pc, #200]	; (29ac <main+0x108>)
    28e4:	47a0      	blx	r4
		basal_insulin_delivered = true; // Set true so insulin isn't delivered on first start up
    28e6:	2201      	movs	r2, #1
    28e8:	4b27      	ldr	r3, [pc, #156]	; (2988 <main+0xe4>)
    28ea:	701a      	strb	r2, [r3, #0]
		flash_initialise();
    28ec:	4b30      	ldr	r3, [pc, #192]	; (29b0 <main+0x10c>)
    28ee:	4798      	blx	r3
		get_delivery_data();
    28f0:	4b30      	ldr	r3, [pc, #192]	; (29b4 <main+0x110>)
    28f2:	4798      	blx	r3
		check_writes();
    28f4:	4b30      	ldr	r3, [pc, #192]	; (29b8 <main+0x114>)
    28f6:	4798      	blx	r3
	//while(1)
	//{
		//turn_x_steps(false, ONE_UNIT);
	//}
	
	while(!cycle_complete)
    28f8:	4b25      	ldr	r3, [pc, #148]	; (2990 <main+0xec>)
    28fa:	781b      	ldrb	r3, [r3, #0]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d11b      	bne.n	2938 <main+0x94>
	
	{
		set_leds(button_array[0]);
    2900:	4b2e      	ldr	r3, [pc, #184]	; (29bc <main+0x118>)
    2902:	7818      	ldrb	r0, [r3, #0]
    2904:	4b2e      	ldr	r3, [pc, #184]	; (29c0 <main+0x11c>)
    2906:	4798      	blx	r3
		// Deliver insulin when RTC interrupts and resets MCU
		if(!basal_insulin_delivered)
    2908:	4b1f      	ldr	r3, [pc, #124]	; (2988 <main+0xe4>)
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	d109      	bne.n	2924 <main+0x80>
		{
			count[0]++;
    2910:	4a2a      	ldr	r2, [pc, #168]	; (29bc <main+0x118>)
    2912:	7913      	ldrb	r3, [r2, #4]
    2914:	3301      	adds	r3, #1
    2916:	b2db      	uxtb	r3, r3
    2918:	7113      	strb	r3, [r2, #4]
			if (count[0] < 6)
    291a:	2b05      	cmp	r3, #5
    291c:	d902      	bls.n	2924 <main+0x80>
			{
			 //do nothing
			} else {
				button_array[0]++;
    291e:	7813      	ldrb	r3, [r2, #0]
    2920:	3301      	adds	r3, #1
    2922:	7013      	strb	r3, [r2, #0]
			}
		}
		
		// Increment array when button 1 is pushed and decrement array when button 2 is pushed
		
		button_array[0]++; //increment for testing purposes only!
    2924:	4a25      	ldr	r2, [pc, #148]	; (29bc <main+0x118>)
    2926:	7813      	ldrb	r3, [r2, #0]
    2928:	3301      	adds	r3, #1
    292a:	b2db      	uxtb	r3, r3
    292c:	7013      	strb	r3, [r2, #0]
		if(button_array[0] > 0)
    292e:	2b00      	cmp	r3, #0
    2930:	d120      	bne.n	2974 <main+0xd0>
		{
			turn_x_steps(true, ONE_UNIT);
			button_array[0]--;
		}
		
		cycle_complete = true;
    2932:	2201      	movs	r2, #1
    2934:	4b16      	ldr	r3, [pc, #88]	; (2990 <main+0xec>)
    2936:	701a      	strb	r2, [r3, #0]
	}
	flash_erase(&FLASH_0, flash_address, 1);
    2938:	4b22      	ldr	r3, [pc, #136]	; (29c4 <main+0x120>)
    293a:	8819      	ldrh	r1, [r3, #0]
    293c:	2201      	movs	r2, #1
    293e:	4822      	ldr	r0, [pc, #136]	; (29c8 <main+0x124>)
    2940:	4b22      	ldr	r3, [pc, #136]	; (29cc <main+0x128>)
    2942:	4798      	blx	r3
	store_delivery_data();
    2944:	4b22      	ldr	r3, [pc, #136]	; (29d0 <main+0x12c>)
    2946:	4798      	blx	r3
	delay_ms(5000);
    2948:	4822      	ldr	r0, [pc, #136]	; (29d4 <main+0x130>)
    294a:	4b23      	ldr	r3, [pc, #140]	; (29d8 <main+0x134>)
    294c:	4798      	blx	r3
	leds_off();
    294e:	4b23      	ldr	r3, [pc, #140]	; (29dc <main+0x138>)
    2950:	4798      	blx	r3
	sleep(2);
    2952:	2002      	movs	r0, #2
    2954:	4b22      	ldr	r3, [pc, #136]	; (29e0 <main+0x13c>)
    2956:	4798      	blx	r3
   
}
    2958:	2000      	movs	r0, #0
    295a:	b002      	add	sp, #8
    295c:	bd10      	pop	{r4, pc}
		rtc_clear_interrupts();
    295e:	4b21      	ldr	r3, [pc, #132]	; (29e4 <main+0x140>)
    2960:	4798      	blx	r3
		get_delivery_data();
    2962:	4b14      	ldr	r3, [pc, #80]	; (29b4 <main+0x110>)
    2964:	4798      	blx	r3
		check_writes();
    2966:	4b14      	ldr	r3, [pc, #80]	; (29b8 <main+0x114>)
    2968:	4798      	blx	r3
		set_leds(button_array[0]);
    296a:	4b14      	ldr	r3, [pc, #80]	; (29bc <main+0x118>)
    296c:	7818      	ldrb	r0, [r3, #0]
    296e:	4b14      	ldr	r3, [pc, #80]	; (29c0 <main+0x11c>)
    2970:	4798      	blx	r3
    2972:	e7c1      	b.n	28f8 <main+0x54>
			turn_x_steps(true, ONE_UNIT);
    2974:	21e1      	movs	r1, #225	; 0xe1
    2976:	0109      	lsls	r1, r1, #4
    2978:	2001      	movs	r0, #1
    297a:	4b1b      	ldr	r3, [pc, #108]	; (29e8 <main+0x144>)
    297c:	4798      	blx	r3
			button_array[0]--;
    297e:	4a0f      	ldr	r2, [pc, #60]	; (29bc <main+0x118>)
    2980:	7813      	ldrb	r3, [r2, #0]
    2982:	3b01      	subs	r3, #1
    2984:	7013      	strb	r3, [r2, #0]
    2986:	e7d4      	b.n	2932 <main+0x8e>
    2988:	20000157 	.word	0x20000157
    298c:	20000124 	.word	0x20000124
    2990:	20000156 	.word	0x20000156
    2994:	00000115 	.word	0x00000115
    2998:	00002ced 	.word	0x00002ced
    299c:	00000175 	.word	0x00000175
    29a0:	000001a1 	.word	0x000001a1
    29a4:	00002cd1 	.word	0x00002cd1
    29a8:	00002c0d 	.word	0x00002c0d
    29ac:	00002c49 	.word	0x00002c49
    29b0:	00000d05 	.word	0x00000d05
    29b4:	00000d5d 	.word	0x00000d5d
    29b8:	00000ddd 	.word	0x00000ddd
    29bc:	2000007c 	.word	0x2000007c
    29c0:	000001ed 	.word	0x000001ed
    29c4:	20000014 	.word	0x20000014
    29c8:	200000a4 	.word	0x200000a4
    29cc:	000012c5 	.word	0x000012c5
    29d0:	00000c81 	.word	0x00000c81
    29d4:	00001388 	.word	0x00001388
    29d8:	00000f1d 	.word	0x00000f1d
    29dc:	00000345 	.word	0x00000345
    29e0:	00001465 	.word	0x00001465
    29e4:	00002cb9 	.word	0x00002cb9
    29e8:	00002a41 	.word	0x00002a41

000029ec <set_motor_direction>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    29ec:	2800      	cmp	r0, #0
    29ee:	d105      	bne.n	29fc <set_motor_direction+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29f0:	2280      	movs	r2, #128	; 0x80
    29f2:	0212      	lsls	r2, r2, #8
    29f4:	23c0      	movs	r3, #192	; 0xc0
    29f6:	05db      	lsls	r3, r3, #23
    29f8:	615a      	str	r2, [r3, #20]

void set_motor_direction(bool direction)
// call this function to change the value of the DIR pin on the IC which controls the direction the motor turns
{
	gpio_set_pin_level(DIR, direction);
}
    29fa:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    29fc:	2280      	movs	r2, #128	; 0x80
    29fe:	0212      	lsls	r2, r2, #8
    2a00:	23c0      	movs	r3, #192	; 0xc0
    2a02:	05db      	lsls	r3, r3, #23
    2a04:	619a      	str	r2, [r3, #24]
    2a06:	e7f8      	b.n	29fa <set_motor_direction+0xe>

00002a08 <step_motor>:

void step_motor(bool direction)
/* this function will call set_motor_direction() to set the motor function to turn one step in the direction of the passed variable. If there is a falult with the motor nothing will happen.
   One step will then be recorded in the steps_turned variable to keep track of how much the motor has turned */
{
    2a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
		set_motor_direction(direction);
    2a0a:	4b0a      	ldr	r3, [pc, #40]	; (2a34 <step_motor+0x2c>)
    2a0c:	4798      	blx	r3
    2a0e:	26c0      	movs	r6, #192	; 0xc0
    2a10:	05f6      	lsls	r6, r6, #23
    2a12:	2780      	movs	r7, #128	; 0x80
    2a14:	01ff      	lsls	r7, r7, #7
    2a16:	61b7      	str	r7, [r6, #24]
		gpio_set_pin_level(STEP, 1);
		delay_us(DELAY_TIME);
    2a18:	25fa      	movs	r5, #250	; 0xfa
    2a1a:	006d      	lsls	r5, r5, #1
    2a1c:	0028      	movs	r0, r5
    2a1e:	4c06      	ldr	r4, [pc, #24]	; (2a38 <step_motor+0x30>)
    2a20:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2a22:	6177      	str	r7, [r6, #20]
		gpio_set_pin_level(STEP, 0);
		delay_us(DELAY_TIME);
    2a24:	0028      	movs	r0, r5
    2a26:	47a0      	blx	r4
		steps_turned += 1;
    2a28:	4a04      	ldr	r2, [pc, #16]	; (2a3c <step_motor+0x34>)
    2a2a:	6813      	ldr	r3, [r2, #0]
    2a2c:	3301      	adds	r3, #1
    2a2e:	6013      	str	r3, [r2, #0]
	
	
}
    2a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	000029ed 	.word	0x000029ed
    2a38:	00000efd 	.word	0x00000efd
    2a3c:	20000084 	.word	0x20000084

00002a40 <turn_x_steps>:

void turn_x_steps(bool direction, uint16_t steps_to_turn)
/* this function will turn the motor a x number of steps in the specified direction. x will have to be worked out from the basal rate, bolus rate, and motor testing to determine
   how much insulin is actually required */ 
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    2a42:	0005      	movs	r5, r0
    2a44:	000c      	movs	r4, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a46:	2208      	movs	r2, #8
    2a48:	23c0      	movs	r3, #192	; 0xc0
    2a4a:	05db      	lsls	r3, r3, #23
    2a4c:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(BOOST_EN, true);
	delay_ms(20);
    2a4e:	2014      	movs	r0, #20
    2a50:	4b07      	ldr	r3, [pc, #28]	; (2a70 <turn_x_steps+0x30>)
    2a52:	4798      	blx	r3
	while(steps_to_turn > 0)
    2a54:	2c00      	cmp	r4, #0
    2a56:	d006      	beq.n	2a66 <turn_x_steps+0x26>
	{
		step_motor(direction);
    2a58:	4e06      	ldr	r6, [pc, #24]	; (2a74 <turn_x_steps+0x34>)
    2a5a:	0028      	movs	r0, r5
    2a5c:	47b0      	blx	r6
		steps_to_turn -=1;
    2a5e:	3c01      	subs	r4, #1
    2a60:	b2a4      	uxth	r4, r4
	while(steps_to_turn > 0)
    2a62:	2c00      	cmp	r4, #0
    2a64:	d1f9      	bne.n	2a5a <turn_x_steps+0x1a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2a66:	2208      	movs	r2, #8
    2a68:	23c0      	movs	r3, #192	; 0xc0
    2a6a:	05db      	lsls	r3, r3, #23
    2a6c:	615a      	str	r2, [r3, #20]
	}
	gpio_set_pin_level(BOOST_EN, false);
}
    2a6e:	bd70      	pop	{r4, r5, r6, pc}
    2a70:	00000f1d 	.word	0x00000f1d
    2a74:	00002a09 	.word	0x00002a09

00002a78 <bin2bcd>:
// bcd2bin and bin2bcd written by max
uint8_t bcd2bin(uint8_t value){
	return (value & 0x0F) + ((value >> 4) * 10);
}

uint8_t bin2bcd(uint8_t value){
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	0005      	movs	r5, r0
	return ((value / 10) << 4) + value % 10;
    2a7c:	210a      	movs	r1, #10
    2a7e:	4b05      	ldr	r3, [pc, #20]	; (2a94 <bin2bcd+0x1c>)
    2a80:	4798      	blx	r3
    2a82:	0104      	lsls	r4, r0, #4
    2a84:	210a      	movs	r1, #10
    2a86:	0028      	movs	r0, r5
    2a88:	4b03      	ldr	r3, [pc, #12]	; (2a98 <bin2bcd+0x20>)
    2a8a:	4798      	blx	r3
    2a8c:	1864      	adds	r4, r4, r1
    2a8e:	b2e0      	uxtb	r0, r4
}
    2a90:	bd70      	pop	{r4, r5, r6, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	00002d2d 	.word	0x00002d2d
    2a98:	00002e39 	.word	0x00002e39

00002a9c <rtc_write_operation>:

// generic function to write address and any data to the rtc, complies the data and address into a
// single array and writes in one go, can be used to write multiple subsequent registers.
void rtc_write_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9e:	af00      	add	r7, sp, #0
    2aa0:	000e      	movs	r6, r1
	uint8_t address_and_data[(data_length + 1)]; // create an array one element larger to hold 8bit address and data
    2aa2:	1c55      	adds	r5, r2, #1
    2aa4:	0013      	movs	r3, r2
    2aa6:	3308      	adds	r3, #8
    2aa8:	08db      	lsrs	r3, r3, #3
    2aaa:	00db      	lsls	r3, r3, #3
    2aac:	4669      	mov	r1, sp
    2aae:	1acb      	subs	r3, r1, r3
    2ab0:	469d      	mov	sp, r3
    2ab2:	4669      	mov	r1, sp
	uint8_t i;
	address_and_data[0] = address; // set first element as address
    2ab4:	7008      	strb	r0, [r1, #0]
	for(i = 1; i < (data_length + 1); i++)
    2ab6:	2d01      	cmp	r5, #1
    2ab8:	dd0a      	ble.n	2ad0 <rtc_write_operation+0x34>
    2aba:	2401      	movs	r4, #1
    2abc:	2301      	movs	r3, #1
	{
		address_and_data[i] = data[(i-1)];
    2abe:	18f0      	adds	r0, r6, r3
    2ac0:	3801      	subs	r0, #1
    2ac2:	7800      	ldrb	r0, [r0, #0]
    2ac4:	5508      	strb	r0, [r1, r4]
	for(i = 1; i < (data_length + 1); i++)
    2ac6:	3301      	adds	r3, #1
    2ac8:	b2db      	uxtb	r3, r3
    2aca:	001c      	movs	r4, r3
    2acc:	429d      	cmp	r5, r3
    2ace:	dcf6      	bgt.n	2abe <rtc_write_operation+0x22>
    2ad0:	24c0      	movs	r4, #192	; 0xc0
    2ad2:	05e4      	lsls	r4, r4, #23
    2ad4:	2501      	movs	r5, #1
    2ad6:	6165      	str	r5, [r4, #20]
	}
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address_and_data[0], (data_length + 1 ));
    2ad8:	3201      	adds	r2, #1
    2ada:	4b03      	ldr	r3, [pc, #12]	; (2ae8 <rtc_write_operation+0x4c>)
    2adc:	6818      	ldr	r0, [r3, #0]
    2ade:	4b03      	ldr	r3, [pc, #12]	; (2aec <rtc_write_operation+0x50>)
    2ae0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ae2:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2ae4:	46bd      	mov	sp, r7
    2ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae8:	20000120 	.word	0x20000120
    2aec:	0000139d 	.word	0x0000139d

00002af0 <rtc_read_operation>:

// generic function to read data from the rtc, as above can read subsequent registers in one go.
void rtc_read_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af2:	b083      	sub	sp, #12
    2af4:	000e      	movs	r6, r1
    2af6:	9200      	str	r2, [sp, #0]
    2af8:	466b      	mov	r3, sp
    2afa:	1dd9      	adds	r1, r3, #7
    2afc:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2afe:	25c0      	movs	r5, #192	; 0xc0
    2b00:	05ed      	lsls	r5, r5, #23
    2b02:	2701      	movs	r7, #1
    2b04:	616f      	str	r7, [r5, #20]
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address, 1);
    2b06:	4c07      	ldr	r4, [pc, #28]	; (2b24 <rtc_read_operation+0x34>)
    2b08:	2201      	movs	r2, #1
    2b0a:	6820      	ldr	r0, [r4, #0]
    2b0c:	4b06      	ldr	r3, [pc, #24]	; (2b28 <rtc_read_operation+0x38>)
    2b0e:	4798      	blx	r3
	io_read(spi_io, &data[0], data_length);
    2b10:	466b      	mov	r3, sp
    2b12:	881a      	ldrh	r2, [r3, #0]
    2b14:	6820      	ldr	r0, [r4, #0]
    2b16:	0031      	movs	r1, r6
    2b18:	4b04      	ldr	r3, [pc, #16]	; (2b2c <rtc_read_operation+0x3c>)
    2b1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b1c:	61af      	str	r7, [r5, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2b1e:	b003      	add	sp, #12
    2b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	20000120 	.word	0x20000120
    2b28:	0000139d 	.word	0x0000139d
    2b2c:	000013d1 	.word	0x000013d1

00002b30 <set_control_1_register>:

// following functions set registers on the rtc


void set_control_1_register()
{
    2b30:	b500      	push	{lr}
    2b32:	b083      	sub	sp, #12
	uint8_t address = 0x90; // 0x10 with a 1 bit shifted to bit 7 to denote a write = 0x90 = 10010000
	uint8_t data[1] = {0b00010101};
    2b34:	a901      	add	r1, sp, #4
    2b36:	2315      	movs	r3, #21
    2b38:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2b3a:	2201      	movs	r2, #1
    2b3c:	2090      	movs	r0, #144	; 0x90
    2b3e:	4b02      	ldr	r3, [pc, #8]	; (2b48 <set_control_1_register+0x18>)
    2b40:	4798      	blx	r3
}
    2b42:	b003      	add	sp, #12
    2b44:	bd00      	pop	{pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	00002a9d 	.word	0x00002a9d

00002b4c <set_control_2_register>:

void set_control_2_register()
{
    2b4c:	b500      	push	{lr}
    2b4e:	b083      	sub	sp, #12
	uint8_t address = 0x91; // 0x11 with a 1 bit shifted to bit 7 to allow write = 0x91 = 10010001
	uint8_t data[1] = {0b00011011};
    2b50:	a901      	add	r1, sp, #4
    2b52:	231b      	movs	r3, #27
    2b54:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2b56:	2201      	movs	r2, #1
    2b58:	2091      	movs	r0, #145	; 0x91
    2b5a:	4b02      	ldr	r3, [pc, #8]	; (2b64 <set_control_2_register+0x18>)
    2b5c:	4798      	blx	r3
}
    2b5e:	b003      	add	sp, #12
    2b60:	bd00      	pop	{pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	00002a9d 	.word	0x00002a9d

00002b68 <set_status_register>:

void set_status_register()
{
    2b68:	b500      	push	{lr}
    2b6a:	b083      	sub	sp, #12
	uint8_t address = 0x9D; // 0x1D |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2b6c:	a901      	add	r1, sp, #4
    2b6e:	2300      	movs	r3, #0
    2b70:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2b72:	2201      	movs	r2, #1
    2b74:	209d      	movs	r0, #157	; 0x9d
    2b76:	4b02      	ldr	r3, [pc, #8]	; (2b80 <set_status_register+0x18>)
    2b78:	4798      	blx	r3
}
    2b7a:	b003      	add	sp, #12
    2b7c:	bd00      	pop	{pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	00002a9d 	.word	0x00002a9d

00002b84 <set_interrupt_mask_register>:

void set_interrupt_mask_register()
{
    2b84:	b500      	push	{lr}
    2b86:	b083      	sub	sp, #12
	uint8_t address = 0x92;// 0x12 |= (1 << 7)
	uint8_t data[1] = {0b01101100}; //0b01101100
    2b88:	a901      	add	r1, sp, #4
    2b8a:	236c      	movs	r3, #108	; 0x6c
    2b8c:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2b8e:	2201      	movs	r2, #1
    2b90:	2092      	movs	r0, #146	; 0x92
    2b92:	4b02      	ldr	r3, [pc, #8]	; (2b9c <set_interrupt_mask_register+0x18>)
    2b94:	4798      	blx	r3
}
    2b96:	b003      	add	sp, #12
    2b98:	bd00      	pop	{pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00002a9d 	.word	0x00002a9d

00002ba0 <set_squarewave_register>:

void set_squarewave_register()
{
    2ba0:	b500      	push	{lr}
    2ba2:	b083      	sub	sp, #12
	uint8_t address = 0x93; // 0x13 |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2ba4:	a901      	add	r1, sp, #4
    2ba6:	2300      	movs	r3, #0
    2ba8:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);	
    2baa:	2201      	movs	r2, #1
    2bac:	2093      	movs	r0, #147	; 0x93
    2bae:	4b02      	ldr	r3, [pc, #8]	; (2bb8 <set_squarewave_register+0x18>)
    2bb0:	4798      	blx	r3
}
    2bb2:	b003      	add	sp, #12
    2bb4:	bd00      	pop	{pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	00002a9d 	.word	0x00002a9d

00002bbc <set_osc_control>:

void set_osc_control()
{
    2bbc:	b530      	push	{r4, r5, lr}
    2bbe:	b083      	sub	sp, #12
	// need to write config key with value 0xA1 to change osc control
	uint8_t address = 0x9F; // 0x1F |= (1 << 7)
	uint8_t data[1] = {0xA1};
    2bc0:	ac01      	add	r4, sp, #4
    2bc2:	23a1      	movs	r3, #161	; 0xa1
    2bc4:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2bc6:	2201      	movs	r2, #1
    2bc8:	0021      	movs	r1, r4
    2bca:	209f      	movs	r0, #159	; 0x9f
    2bcc:	4d04      	ldr	r5, [pc, #16]	; (2be0 <set_osc_control+0x24>)
    2bce:	47a8      	blx	r5
	address = 0x9C; // 0x1C |= (1 << 7)
	data[1] = 0b01001000;
    2bd0:	2348      	movs	r3, #72	; 0x48
    2bd2:	7063      	strb	r3, [r4, #1]
	rtc_write_operation(address, data, 1);
    2bd4:	2201      	movs	r2, #1
    2bd6:	0021      	movs	r1, r4
    2bd8:	209c      	movs	r0, #156	; 0x9c
    2bda:	47a8      	blx	r5
}
    2bdc:	b003      	add	sp, #12
    2bde:	bd30      	pop	{r4, r5, pc}
    2be0:	00002a9d 	.word	0x00002a9d

00002be4 <set_alarm_register>:

void set_alarm_register()
{
    2be4:	b530      	push	{r4, r5, lr}
    2be6:	b083      	sub	sp, #12
	uint8_t address = 0x98; // 0x18 |= (1 << 7)
	uint8_t data[1] = {0b00010100};
    2be8:	ac01      	add	r4, sp, #4
    2bea:	2314      	movs	r3, #20
    2bec:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2bee:	2201      	movs	r2, #1
    2bf0:	0021      	movs	r1, r4
    2bf2:	2098      	movs	r0, #152	; 0x98
    2bf4:	4d04      	ldr	r5, [pc, #16]	; (2c08 <set_alarm_register+0x24>)
    2bf6:	47a8      	blx	r5
	address = 0x8A; //0x0A |= (1 << 7)
	data[0] = 0b00110000;
    2bf8:	2330      	movs	r3, #48	; 0x30
    2bfa:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2bfc:	2201      	movs	r2, #1
    2bfe:	0021      	movs	r1, r4
    2c00:	208a      	movs	r0, #138	; 0x8a
    2c02:	47a8      	blx	r5
}
    2c04:	b003      	add	sp, #12
    2c06:	bd30      	pop	{r4, r5, pc}
    2c08:	00002a9d 	.word	0x00002a9d

00002c0c <initialise_rtc>:

// combine all initialisation functions and send at once
void initialise_rtc()
{
    2c0c:	b510      	push	{r4, lr}
	set_control_1_register();
    2c0e:	4b07      	ldr	r3, [pc, #28]	; (2c2c <initialise_rtc+0x20>)
    2c10:	4798      	blx	r3
	set_control_2_register();
    2c12:	4b07      	ldr	r3, [pc, #28]	; (2c30 <initialise_rtc+0x24>)
    2c14:	4798      	blx	r3
	set_status_register();
    2c16:	4b07      	ldr	r3, [pc, #28]	; (2c34 <initialise_rtc+0x28>)
    2c18:	4798      	blx	r3
	set_interrupt_mask_register();
    2c1a:	4b07      	ldr	r3, [pc, #28]	; (2c38 <initialise_rtc+0x2c>)
    2c1c:	4798      	blx	r3
	set_squarewave_register();
    2c1e:	4b07      	ldr	r3, [pc, #28]	; (2c3c <initialise_rtc+0x30>)
    2c20:	4798      	blx	r3
	set_osc_control();
    2c22:	4b07      	ldr	r3, [pc, #28]	; (2c40 <initialise_rtc+0x34>)
    2c24:	4798      	blx	r3
	set_alarm_register();
    2c26:	4b07      	ldr	r3, [pc, #28]	; (2c44 <initialise_rtc+0x38>)
    2c28:	4798      	blx	r3
	//rtc_clear_interrupts();
}
    2c2a:	bd10      	pop	{r4, pc}
    2c2c:	00002b31 	.word	0x00002b31
    2c30:	00002b4d 	.word	0x00002b4d
    2c34:	00002b69 	.word	0x00002b69
    2c38:	00002b85 	.word	0x00002b85
    2c3c:	00002ba1 	.word	0x00002ba1
    2c40:	00002bbd 	.word	0x00002bbd
    2c44:	00002be5 	.word	0x00002be5

00002c48 <rtc_set_current_time>:

// converts the input time to bcd format and sends to the rtc
void rtc_set_current_time(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second)
{
    2c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4a:	b085      	sub	sp, #20
    2c4c:	0004      	movs	r4, r0
    2c4e:	000f      	movs	r7, r1
    2c50:	9200      	str	r2, [sp, #0]
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	ab0a      	add	r3, sp, #40	; 0x28
    2c56:	781e      	ldrb	r6, [r3, #0]
    2c58:	ab0b      	add	r3, sp, #44	; 0x2c
    2c5a:	781d      	ldrb	r5, [r3, #0]
	uint8_t date_and_time[5] = {0};  // year values must range from 0 to 99
    2c5c:	2205      	movs	r2, #5
    2c5e:	2100      	movs	r1, #0
    2c60:	a802      	add	r0, sp, #8
    2c62:	4b12      	ldr	r3, [pc, #72]	; (2cac <rtc_set_current_time+0x64>)
    2c64:	4798      	blx	r3
	date_and_time[5] = bin2bcd(year);
    2c66:	0020      	movs	r0, r4
    2c68:	4c11      	ldr	r4, [pc, #68]	; (2cb0 <rtc_set_current_time+0x68>)
    2c6a:	47a0      	blx	r4
    2c6c:	a902      	add	r1, sp, #8
    2c6e:	7148      	strb	r0, [r1, #5]
	date_and_time[4] = bin2bcd(month);
    2c70:	0038      	movs	r0, r7
    2c72:	47a0      	blx	r4
    2c74:	a902      	add	r1, sp, #8
    2c76:	7108      	strb	r0, [r1, #4]
	date_and_time[3] = bin2bcd(day);
    2c78:	9800      	ldr	r0, [sp, #0]
    2c7a:	47a0      	blx	r4
    2c7c:	aa02      	add	r2, sp, #8
    2c7e:	70d0      	strb	r0, [r2, #3]
	date_and_time[2] = bin2bcd(hour);
    2c80:	9801      	ldr	r0, [sp, #4]
    2c82:	47a0      	blx	r4
    2c84:	ab02      	add	r3, sp, #8
    2c86:	7098      	strb	r0, [r3, #2]
	date_and_time[1] = bin2bcd(minute);
    2c88:	0030      	movs	r0, r6
    2c8a:	47a0      	blx	r4
    2c8c:	ab02      	add	r3, sp, #8
    2c8e:	7058      	strb	r0, [r3, #1]
	date_and_time[0] = bin2bcd(second);
    2c90:	0028      	movs	r0, r5
    2c92:	47a0      	blx	r4
	// writes the GP0 bit of the seconds register so this can be checked later to see if the rtc has been initialised
	// and the time has been set. 
	date_and_time[0] |= (1 << 7); 
    2c94:	2380      	movs	r3, #128	; 0x80
    2c96:	425b      	negs	r3, r3
    2c98:	4318      	orrs	r0, r3
    2c9a:	ab02      	add	r3, sp, #8
    2c9c:	7018      	strb	r0, [r3, #0]
	rtc_write_operation(0x81, date_and_time, 6);
    2c9e:	2206      	movs	r2, #6
    2ca0:	0019      	movs	r1, r3
    2ca2:	2081      	movs	r0, #129	; 0x81
    2ca4:	4b03      	ldr	r3, [pc, #12]	; (2cb4 <rtc_set_current_time+0x6c>)
    2ca6:	4798      	blx	r3
}
    2ca8:	b005      	add	sp, #20
    2caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cac:	00002ee1 	.word	0x00002ee1
    2cb0:	00002a79 	.word	0x00002a79
    2cb4:	00002a9d 	.word	0x00002a9d

00002cb8 <rtc_clear_interrupts>:
	ascii[1] = (byte & 0x0F) + 48;
}

// reads the status register in the rtc to clear all interrupts
void rtc_clear_interrupts()
{
    2cb8:	b500      	push	{lr}
    2cba:	b083      	sub	sp, #12
	uint8_t data[1];
	rtc_read_operation(0x0F, data, 1);
    2cbc:	2201      	movs	r2, #1
    2cbe:	a901      	add	r1, sp, #4
    2cc0:	200f      	movs	r0, #15
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <rtc_clear_interrupts+0x14>)
    2cc4:	4798      	blx	r3
}
    2cc6:	b003      	add	sp, #12
    2cc8:	bd00      	pop	{pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	00002af1 	.word	0x00002af1

00002cd0 <check_rtc_initialised>:
	gpio_set_pin_level(SS_RTC, true);
}

// reads the seconds register to check if GP0 has been set. does an & comparison and if it is set will output true.
bool check_rtc_initialised()
{
    2cd0:	b510      	push	{r4, lr}
    2cd2:	b082      	sub	sp, #8
	uint8_t data[1];
	bool result;
	rtc_read_operation(0x01, data, 1);
    2cd4:	ac01      	add	r4, sp, #4
    2cd6:	2201      	movs	r2, #1
    2cd8:	0021      	movs	r1, r4
    2cda:	2001      	movs	r0, #1
    2cdc:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <check_rtc_initialised+0x18>)
    2cde:	4798      	blx	r3
	uint8_t GP0 = data[0] & 0b10000000;
	if (GP0 == 0b10000000)
    2ce0:	7820      	ldrb	r0, [r4, #0]
    2ce2:	09c0      	lsrs	r0, r0, #7
		result = true;
	} else {
		result = false;
	}
	return result;
}
    2ce4:	b002      	add	sp, #8
    2ce6:	bd10      	pop	{r4, pc}
    2ce8:	00002af1 	.word	0x00002af1

00002cec <SPI_Begin>:
#include <driver_init.h>


extern struct io_descriptor *spi_io;

void SPI_Begin(void){
    2cec:	b510      	push	{r4, lr}
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_io);
    2cee:	4c08      	ldr	r4, [pc, #32]	; (2d10 <SPI_Begin+0x24>)
    2cf0:	4908      	ldr	r1, [pc, #32]	; (2d14 <SPI_Begin+0x28>)
    2cf2:	0020      	movs	r0, r4
    2cf4:	4b08      	ldr	r3, [pc, #32]	; (2d18 <SPI_Begin+0x2c>)
    2cf6:	4798      	blx	r3
	spi_m_sync_set_baudrate(&SPI_0, 100000);
    2cf8:	4908      	ldr	r1, [pc, #32]	; (2d1c <SPI_Begin+0x30>)
    2cfa:	0020      	movs	r0, r4
    2cfc:	4b08      	ldr	r3, [pc, #32]	; (2d20 <SPI_Begin+0x34>)
    2cfe:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
    2d00:	2100      	movs	r1, #0
    2d02:	0020      	movs	r0, r4
    2d04:	4b07      	ldr	r3, [pc, #28]	; (2d24 <SPI_Begin+0x38>)
    2d06:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2d08:	0020      	movs	r0, r4
    2d0a:	4b07      	ldr	r3, [pc, #28]	; (2d28 <SPI_Begin+0x3c>)
    2d0c:	4798      	blx	r3
}
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	200000ec 	.word	0x200000ec
    2d14:	20000120 	.word	0x20000120
    2d18:	00001619 	.word	0x00001619
    2d1c:	000186a0 	.word	0x000186a0
    2d20:	00001501 	.word	0x00001501
    2d24:	0000152d 	.word	0x0000152d
    2d28:	000014d9 	.word	0x000014d9

00002d2c <__udivsi3>:
    2d2c:	2200      	movs	r2, #0
    2d2e:	0843      	lsrs	r3, r0, #1
    2d30:	428b      	cmp	r3, r1
    2d32:	d374      	bcc.n	2e1e <__udivsi3+0xf2>
    2d34:	0903      	lsrs	r3, r0, #4
    2d36:	428b      	cmp	r3, r1
    2d38:	d35f      	bcc.n	2dfa <__udivsi3+0xce>
    2d3a:	0a03      	lsrs	r3, r0, #8
    2d3c:	428b      	cmp	r3, r1
    2d3e:	d344      	bcc.n	2dca <__udivsi3+0x9e>
    2d40:	0b03      	lsrs	r3, r0, #12
    2d42:	428b      	cmp	r3, r1
    2d44:	d328      	bcc.n	2d98 <__udivsi3+0x6c>
    2d46:	0c03      	lsrs	r3, r0, #16
    2d48:	428b      	cmp	r3, r1
    2d4a:	d30d      	bcc.n	2d68 <__udivsi3+0x3c>
    2d4c:	22ff      	movs	r2, #255	; 0xff
    2d4e:	0209      	lsls	r1, r1, #8
    2d50:	ba12      	rev	r2, r2
    2d52:	0c03      	lsrs	r3, r0, #16
    2d54:	428b      	cmp	r3, r1
    2d56:	d302      	bcc.n	2d5e <__udivsi3+0x32>
    2d58:	1212      	asrs	r2, r2, #8
    2d5a:	0209      	lsls	r1, r1, #8
    2d5c:	d065      	beq.n	2e2a <__udivsi3+0xfe>
    2d5e:	0b03      	lsrs	r3, r0, #12
    2d60:	428b      	cmp	r3, r1
    2d62:	d319      	bcc.n	2d98 <__udivsi3+0x6c>
    2d64:	e000      	b.n	2d68 <__udivsi3+0x3c>
    2d66:	0a09      	lsrs	r1, r1, #8
    2d68:	0bc3      	lsrs	r3, r0, #15
    2d6a:	428b      	cmp	r3, r1
    2d6c:	d301      	bcc.n	2d72 <__udivsi3+0x46>
    2d6e:	03cb      	lsls	r3, r1, #15
    2d70:	1ac0      	subs	r0, r0, r3
    2d72:	4152      	adcs	r2, r2
    2d74:	0b83      	lsrs	r3, r0, #14
    2d76:	428b      	cmp	r3, r1
    2d78:	d301      	bcc.n	2d7e <__udivsi3+0x52>
    2d7a:	038b      	lsls	r3, r1, #14
    2d7c:	1ac0      	subs	r0, r0, r3
    2d7e:	4152      	adcs	r2, r2
    2d80:	0b43      	lsrs	r3, r0, #13
    2d82:	428b      	cmp	r3, r1
    2d84:	d301      	bcc.n	2d8a <__udivsi3+0x5e>
    2d86:	034b      	lsls	r3, r1, #13
    2d88:	1ac0      	subs	r0, r0, r3
    2d8a:	4152      	adcs	r2, r2
    2d8c:	0b03      	lsrs	r3, r0, #12
    2d8e:	428b      	cmp	r3, r1
    2d90:	d301      	bcc.n	2d96 <__udivsi3+0x6a>
    2d92:	030b      	lsls	r3, r1, #12
    2d94:	1ac0      	subs	r0, r0, r3
    2d96:	4152      	adcs	r2, r2
    2d98:	0ac3      	lsrs	r3, r0, #11
    2d9a:	428b      	cmp	r3, r1
    2d9c:	d301      	bcc.n	2da2 <__udivsi3+0x76>
    2d9e:	02cb      	lsls	r3, r1, #11
    2da0:	1ac0      	subs	r0, r0, r3
    2da2:	4152      	adcs	r2, r2
    2da4:	0a83      	lsrs	r3, r0, #10
    2da6:	428b      	cmp	r3, r1
    2da8:	d301      	bcc.n	2dae <__udivsi3+0x82>
    2daa:	028b      	lsls	r3, r1, #10
    2dac:	1ac0      	subs	r0, r0, r3
    2dae:	4152      	adcs	r2, r2
    2db0:	0a43      	lsrs	r3, r0, #9
    2db2:	428b      	cmp	r3, r1
    2db4:	d301      	bcc.n	2dba <__udivsi3+0x8e>
    2db6:	024b      	lsls	r3, r1, #9
    2db8:	1ac0      	subs	r0, r0, r3
    2dba:	4152      	adcs	r2, r2
    2dbc:	0a03      	lsrs	r3, r0, #8
    2dbe:	428b      	cmp	r3, r1
    2dc0:	d301      	bcc.n	2dc6 <__udivsi3+0x9a>
    2dc2:	020b      	lsls	r3, r1, #8
    2dc4:	1ac0      	subs	r0, r0, r3
    2dc6:	4152      	adcs	r2, r2
    2dc8:	d2cd      	bcs.n	2d66 <__udivsi3+0x3a>
    2dca:	09c3      	lsrs	r3, r0, #7
    2dcc:	428b      	cmp	r3, r1
    2dce:	d301      	bcc.n	2dd4 <__udivsi3+0xa8>
    2dd0:	01cb      	lsls	r3, r1, #7
    2dd2:	1ac0      	subs	r0, r0, r3
    2dd4:	4152      	adcs	r2, r2
    2dd6:	0983      	lsrs	r3, r0, #6
    2dd8:	428b      	cmp	r3, r1
    2dda:	d301      	bcc.n	2de0 <__udivsi3+0xb4>
    2ddc:	018b      	lsls	r3, r1, #6
    2dde:	1ac0      	subs	r0, r0, r3
    2de0:	4152      	adcs	r2, r2
    2de2:	0943      	lsrs	r3, r0, #5
    2de4:	428b      	cmp	r3, r1
    2de6:	d301      	bcc.n	2dec <__udivsi3+0xc0>
    2de8:	014b      	lsls	r3, r1, #5
    2dea:	1ac0      	subs	r0, r0, r3
    2dec:	4152      	adcs	r2, r2
    2dee:	0903      	lsrs	r3, r0, #4
    2df0:	428b      	cmp	r3, r1
    2df2:	d301      	bcc.n	2df8 <__udivsi3+0xcc>
    2df4:	010b      	lsls	r3, r1, #4
    2df6:	1ac0      	subs	r0, r0, r3
    2df8:	4152      	adcs	r2, r2
    2dfa:	08c3      	lsrs	r3, r0, #3
    2dfc:	428b      	cmp	r3, r1
    2dfe:	d301      	bcc.n	2e04 <__udivsi3+0xd8>
    2e00:	00cb      	lsls	r3, r1, #3
    2e02:	1ac0      	subs	r0, r0, r3
    2e04:	4152      	adcs	r2, r2
    2e06:	0883      	lsrs	r3, r0, #2
    2e08:	428b      	cmp	r3, r1
    2e0a:	d301      	bcc.n	2e10 <__udivsi3+0xe4>
    2e0c:	008b      	lsls	r3, r1, #2
    2e0e:	1ac0      	subs	r0, r0, r3
    2e10:	4152      	adcs	r2, r2
    2e12:	0843      	lsrs	r3, r0, #1
    2e14:	428b      	cmp	r3, r1
    2e16:	d301      	bcc.n	2e1c <__udivsi3+0xf0>
    2e18:	004b      	lsls	r3, r1, #1
    2e1a:	1ac0      	subs	r0, r0, r3
    2e1c:	4152      	adcs	r2, r2
    2e1e:	1a41      	subs	r1, r0, r1
    2e20:	d200      	bcs.n	2e24 <__udivsi3+0xf8>
    2e22:	4601      	mov	r1, r0
    2e24:	4152      	adcs	r2, r2
    2e26:	4610      	mov	r0, r2
    2e28:	4770      	bx	lr
    2e2a:	e7ff      	b.n	2e2c <__udivsi3+0x100>
    2e2c:	b501      	push	{r0, lr}
    2e2e:	2000      	movs	r0, #0
    2e30:	f000 f806 	bl	2e40 <__aeabi_idiv0>
    2e34:	bd02      	pop	{r1, pc}
    2e36:	46c0      	nop			; (mov r8, r8)

00002e38 <__aeabi_uidivmod>:
    2e38:	2900      	cmp	r1, #0
    2e3a:	d0f7      	beq.n	2e2c <__udivsi3+0x100>
    2e3c:	e776      	b.n	2d2c <__udivsi3>
    2e3e:	4770      	bx	lr

00002e40 <__aeabi_idiv0>:
    2e40:	4770      	bx	lr
    2e42:	46c0      	nop			; (mov r8, r8)

00002e44 <__ffssi2>:
    2e44:	b510      	push	{r4, lr}
    2e46:	2300      	movs	r3, #0
    2e48:	2800      	cmp	r0, #0
    2e4a:	d002      	beq.n	2e52 <__ffssi2+0xe>
    2e4c:	f000 f804 	bl	2e58 <__ctzsi2>
    2e50:	1c43      	adds	r3, r0, #1
    2e52:	0018      	movs	r0, r3
    2e54:	bd10      	pop	{r4, pc}
    2e56:	46c0      	nop			; (mov r8, r8)

00002e58 <__ctzsi2>:
    2e58:	4241      	negs	r1, r0
    2e5a:	4008      	ands	r0, r1
    2e5c:	211c      	movs	r1, #28
    2e5e:	2301      	movs	r3, #1
    2e60:	041b      	lsls	r3, r3, #16
    2e62:	4298      	cmp	r0, r3
    2e64:	d301      	bcc.n	2e6a <__ctzsi2+0x12>
    2e66:	0c00      	lsrs	r0, r0, #16
    2e68:	3910      	subs	r1, #16
    2e6a:	0a1b      	lsrs	r3, r3, #8
    2e6c:	4298      	cmp	r0, r3
    2e6e:	d301      	bcc.n	2e74 <__ctzsi2+0x1c>
    2e70:	0a00      	lsrs	r0, r0, #8
    2e72:	3908      	subs	r1, #8
    2e74:	091b      	lsrs	r3, r3, #4
    2e76:	4298      	cmp	r0, r3
    2e78:	d301      	bcc.n	2e7e <__ctzsi2+0x26>
    2e7a:	0900      	lsrs	r0, r0, #4
    2e7c:	3904      	subs	r1, #4
    2e7e:	a202      	add	r2, pc, #8	; (adr r2, 2e88 <__ctzsi2+0x30>)
    2e80:	5c10      	ldrb	r0, [r2, r0]
    2e82:	1a40      	subs	r0, r0, r1
    2e84:	4770      	bx	lr
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	1d1d1c1b 	.word	0x1d1d1c1b
    2e8c:	1e1e1e1e 	.word	0x1e1e1e1e
    2e90:	1f1f1f1f 	.word	0x1f1f1f1f
    2e94:	1f1f1f1f 	.word	0x1f1f1f1f

00002e98 <__libc_init_array>:
    2e98:	b570      	push	{r4, r5, r6, lr}
    2e9a:	2600      	movs	r6, #0
    2e9c:	4d0c      	ldr	r5, [pc, #48]	; (2ed0 <__libc_init_array+0x38>)
    2e9e:	4c0d      	ldr	r4, [pc, #52]	; (2ed4 <__libc_init_array+0x3c>)
    2ea0:	1b64      	subs	r4, r4, r5
    2ea2:	10a4      	asrs	r4, r4, #2
    2ea4:	42a6      	cmp	r6, r4
    2ea6:	d109      	bne.n	2ebc <__libc_init_array+0x24>
    2ea8:	2600      	movs	r6, #0
    2eaa:	f000 f933 	bl	3114 <_init>
    2eae:	4d0a      	ldr	r5, [pc, #40]	; (2ed8 <__libc_init_array+0x40>)
    2eb0:	4c0a      	ldr	r4, [pc, #40]	; (2edc <__libc_init_array+0x44>)
    2eb2:	1b64      	subs	r4, r4, r5
    2eb4:	10a4      	asrs	r4, r4, #2
    2eb6:	42a6      	cmp	r6, r4
    2eb8:	d105      	bne.n	2ec6 <__libc_init_array+0x2e>
    2eba:	bd70      	pop	{r4, r5, r6, pc}
    2ebc:	00b3      	lsls	r3, r6, #2
    2ebe:	58eb      	ldr	r3, [r5, r3]
    2ec0:	4798      	blx	r3
    2ec2:	3601      	adds	r6, #1
    2ec4:	e7ee      	b.n	2ea4 <__libc_init_array+0xc>
    2ec6:	00b3      	lsls	r3, r6, #2
    2ec8:	58eb      	ldr	r3, [r5, r3]
    2eca:	4798      	blx	r3
    2ecc:	3601      	adds	r6, #1
    2ece:	e7f2      	b.n	2eb6 <__libc_init_array+0x1e>
    2ed0:	00003120 	.word	0x00003120
    2ed4:	00003120 	.word	0x00003120
    2ed8:	00003120 	.word	0x00003120
    2edc:	00003124 	.word	0x00003124

00002ee0 <memset>:
    2ee0:	0003      	movs	r3, r0
    2ee2:	1882      	adds	r2, r0, r2
    2ee4:	4293      	cmp	r3, r2
    2ee6:	d100      	bne.n	2eea <memset+0xa>
    2ee8:	4770      	bx	lr
    2eea:	7019      	strb	r1, [r3, #0]
    2eec:	3301      	adds	r3, #1
    2eee:	e7f9      	b.n	2ee4 <memset+0x4>
    2ef0:	682f2e2e 	.word	0x682f2e2e
    2ef4:	692f6c61 	.word	0x692f6c61
    2ef8:	756c636e 	.word	0x756c636e
    2efc:	682f6564 	.word	0x682f6564
    2f00:	775f6c61 	.word	0x775f6c61
    2f04:	682e7464 	.word	0x682e7464
    2f08:	00000000 	.word	0x00000000
    2f0c:	682f2e2e 	.word	0x682f2e2e
    2f10:	732f6c61 	.word	0x732f6c61
    2f14:	682f6372 	.word	0x682f6372
    2f18:	615f6c61 	.word	0x615f6c61
    2f1c:	735f6364 	.word	0x735f6364
    2f20:	2e636e79 	.word	0x2e636e79
    2f24:	00000063 	.word	0x00000063
    2f28:	682f2e2e 	.word	0x682f2e2e
    2f2c:	732f6c61 	.word	0x732f6c61
    2f30:	682f6372 	.word	0x682f6372
    2f34:	645f6c61 	.word	0x645f6c61
    2f38:	735f6361 	.word	0x735f6361
    2f3c:	2e636e79 	.word	0x2e636e79
    2f40:	00000063 	.word	0x00000063
    2f44:	682f2e2e 	.word	0x682f2e2e
    2f48:	732f6c61 	.word	0x732f6c61
    2f4c:	682f6372 	.word	0x682f6372
    2f50:	665f6c61 	.word	0x665f6c61
    2f54:	6873616c 	.word	0x6873616c
    2f58:	0000632e 	.word	0x0000632e
    2f5c:	682f2e2e 	.word	0x682f2e2e
    2f60:	732f6c61 	.word	0x732f6c61
    2f64:	682f6372 	.word	0x682f6372
    2f68:	695f6c61 	.word	0x695f6c61
    2f6c:	00632e6f 	.word	0x00632e6f
    2f70:	682f2e2e 	.word	0x682f2e2e
    2f74:	732f6c61 	.word	0x732f6c61
    2f78:	682f6372 	.word	0x682f6372
    2f7c:	705f6c61 	.word	0x705f6c61
    2f80:	632e6d77 	.word	0x632e6d77
    2f84:	00000000 	.word	0x00000000
    2f88:	682f2e2e 	.word	0x682f2e2e
    2f8c:	732f6c61 	.word	0x732f6c61
    2f90:	682f6372 	.word	0x682f6372
    2f94:	735f6c61 	.word	0x735f6c61
    2f98:	6d5f6970 	.word	0x6d5f6970
    2f9c:	6e79735f 	.word	0x6e79735f
    2fa0:	00632e63 	.word	0x00632e63
    2fa4:	682f2e2e 	.word	0x682f2e2e
    2fa8:	732f6c61 	.word	0x732f6c61
    2fac:	682f6372 	.word	0x682f6372
    2fb0:	745f6c61 	.word	0x745f6c61
    2fb4:	72656d69 	.word	0x72656d69
    2fb8:	0000632e 	.word	0x0000632e
    2fbc:	682f2e2e 	.word	0x682f2e2e
    2fc0:	752f6c61 	.word	0x752f6c61
    2fc4:	736c6974 	.word	0x736c6974
    2fc8:	6372732f 	.word	0x6372732f
    2fcc:	6974752f 	.word	0x6974752f
    2fd0:	6c5f736c 	.word	0x6c5f736c
    2fd4:	2e747369 	.word	0x2e747369
    2fd8:	00000063 	.word	0x00000063

00002fdc <_adcs>:
    2fdc:	00000200 00000000 00000000 00000000     ................
	...
    2ff8:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3008:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3018:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003028 <_map>:
    3028:	00000005 00000005 00000006 00000006     ................
    3038:	00000009 00000009 682f2e2e 652f6c70     ........../hpl/e
    3048:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3058:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3068:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    3078:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    3088:	632e6374 00000000                       tc.c....

00003090 <_i2cms>:
	...

000030a8 <sercomspi_regs>:
    30a8:	0001000c 00020000 00000000 01ff0009     ................
    30b8:	01000c00 02000000 00000000 ff000900     ................
    30c8:	00000301 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    30d8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    30e8:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    30f8:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    3108:	775f6c70 632e7464 00000000              pl_wdt.c....

00003114 <_init>:
    3114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	bcf8      	pop	{r3, r4, r5, r6, r7}
    311a:	bc08      	pop	{r3}
    311c:	469e      	mov	lr, r3
    311e:	4770      	bx	lr

00003120 <__init_array_start>:
    3120:	000000dd 	.word	0x000000dd

00003124 <_fini>:
    3124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	bcf8      	pop	{r3, r4, r5, r6, r7}
    312a:	bc08      	pop	{r3}
    312c:	469e      	mov	lr, r3
    312e:	4770      	bx	lr

00003130 <__fini_array_start>:
    3130:	000000b5 	.word	0x000000b5
