
MyProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003284  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00003284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  20000020  000032a4  00020020  2**2
                  ALLOC
  3 .stack        00002000  20000178  000033fc  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b994  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055e2  00000000  00000000  0005ba35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016dfd  00000000  00000000  00061017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011e8  00000000  00000000  00077e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016d0  00000000  00000000  00078ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e5a5  00000000  00000000  0007a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001affd  00000000  00000000  00098c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000904de  00000000  00000000  000b3c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d10  00000000  00000000  0014414c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 21 00 20 d5 03 00 00 d3 03 00 00 d3 03 00 00     x!. ............
	...
      2c:	d3 03 00 00 00 00 00 00 00 00 00 00 d3 03 00 00     ................
      3c:	d3 03 00 00 d3 03 00 00 d3 03 00 00 d3 03 00 00     ................
      4c:	21 23 00 00 49 1d 00 00 9d 21 00 00 d3 03 00 00     !#..I....!......
      5c:	d3 03 00 00 d3 03 00 00 d3 03 00 00 d3 03 00 00     ................
      6c:	d3 03 00 00 d3 03 00 00 d3 03 00 00 d3 03 00 00     ................
      7c:	d3 03 00 00 d3 03 00 00 d3 03 00 00 3d 29 00 00     ............=)..
      8c:	d3 03 00 00 d3 03 00 00 00 00 00 00 00 00 00 00     ................
      9c:	d3 03 00 00 d3 03 00 00 d3 03 00 00 d3 03 00 00     ................
      ac:	d3 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00003284 	.word	0x00003284

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00003284 	.word	0x00003284
     10c:	00003284 	.word	0x00003284
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000009c9 	.word	0x000009c9

00000120 <button_3_cb>:
	timer_start(&TIMER_0);
}

// cb function which starts TIMER_0 when button 3 pressed
static void button_3_cb(void)
{
     120:	b510      	push	{r4, lr}
	button_3 = true;
     122:	2201      	movs	r2, #1
     124:	4b02      	ldr	r3, [pc, #8]	; (130 <button_3_cb+0x10>)
     126:	701a      	strb	r2, [r3, #0]
	timer_start(&TIMER_0);
     128:	4802      	ldr	r0, [pc, #8]	; (134 <button_3_cb+0x14>)
     12a:	4b03      	ldr	r3, [pc, #12]	; (138 <button_3_cb+0x18>)
     12c:	4798      	blx	r3
}
     12e:	bd10      	pop	{r4, pc}
     130:	2000003c 	.word	0x2000003c
     134:	20000124 	.word	0x20000124
     138:	000018a5 	.word	0x000018a5

0000013c <button_1_cb>:
{
     13c:	b510      	push	{r4, lr}
	button_1 = true;
     13e:	2201      	movs	r2, #1
     140:	4b02      	ldr	r3, [pc, #8]	; (14c <button_1_cb+0x10>)
     142:	705a      	strb	r2, [r3, #1]
	timer_start(&TIMER_0);
     144:	4802      	ldr	r0, [pc, #8]	; (150 <button_1_cb+0x14>)
     146:	4b03      	ldr	r3, [pc, #12]	; (154 <button_1_cb+0x18>)
     148:	4798      	blx	r3
}
     14a:	bd10      	pop	{r4, pc}
     14c:	2000003c 	.word	0x2000003c
     150:	20000124 	.word	0x20000124
     154:	000018a5 	.word	0x000018a5

00000158 <button_2_cb>:
{
     158:	b510      	push	{r4, lr}
	button_2 = true;
     15a:	2201      	movs	r2, #1
     15c:	4b02      	ldr	r3, [pc, #8]	; (168 <button_2_cb+0x10>)
     15e:	709a      	strb	r2, [r3, #2]
	timer_start(&TIMER_0);
     160:	4802      	ldr	r0, [pc, #8]	; (16c <button_2_cb+0x14>)
     162:	4b03      	ldr	r3, [pc, #12]	; (170 <button_2_cb+0x18>)
     164:	4798      	blx	r3
}
     166:	bd10      	pop	{r4, pc}
     168:	2000003c 	.word	0x2000003c
     16c:	20000124 	.word	0x20000124
     170:	000018a5 	.word	0x000018a5

00000174 <TIMER_0_setup>:
{
     174:	b510      	push	{r4, lr}
	TIMER_0_task1.interval = 10;
     176:	4906      	ldr	r1, [pc, #24]	; (190 <TIMER_0_setup+0x1c>)
     178:	230a      	movs	r3, #10
     17a:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <TIMER_0_setup+0x20>)
     17e:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
     180:	2301      	movs	r3, #1
     182:	750b      	strb	r3, [r1, #20]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
     184:	3104      	adds	r1, #4
     186:	4804      	ldr	r0, [pc, #16]	; (198 <TIMER_0_setup+0x24>)
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <TIMER_0_setup+0x28>)
     18a:	4798      	blx	r3
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000003c 	.word	0x2000003c
     194:	000002c1 	.word	0x000002c1
     198:	20000124 	.word	0x20000124
     19c:	0000191d 	.word	0x0000191d

000001a0 <init_interrupts>:

// Initialise external interrupts, and tie them to callback functions.
// Interrupts are disabled and then enabled, otherwise they are triggered
// on startup.
void init_interrupts(void)
{
     1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ext_irq_disable(BUTTON1);
     1a2:	2006      	movs	r0, #6
     1a4:	4e16      	ldr	r6, [pc, #88]	; (200 <init_interrupts+0x60>)
     1a6:	47b0      	blx	r6
	ext_irq_disable(BUTTON2);
     1a8:	2005      	movs	r0, #5
     1aa:	47b0      	blx	r6
	ext_irq_disable(BUTTON3);
     1ac:	2009      	movs	r0, #9
     1ae:	47b0      	blx	r6
	ext_irq_register(BUTTON2, button_2_cb);
     1b0:	4f14      	ldr	r7, [pc, #80]	; (204 <init_interrupts+0x64>)
     1b2:	0039      	movs	r1, r7
     1b4:	2005      	movs	r0, #5
     1b6:	4d14      	ldr	r5, [pc, #80]	; (208 <init_interrupts+0x68>)
     1b8:	47a8      	blx	r5
	ext_irq_register(BUTTON1, button_1_cb);
     1ba:	4914      	ldr	r1, [pc, #80]	; (20c <init_interrupts+0x6c>)
     1bc:	2006      	movs	r0, #6
     1be:	47a8      	blx	r5
	ext_irq_register(BUTTON3, button_3_cb);
     1c0:	4913      	ldr	r1, [pc, #76]	; (210 <init_interrupts+0x70>)
     1c2:	2009      	movs	r0, #9
     1c4:	47a8      	blx	r5
	ext_irq_enable(BUTTON1);
     1c6:	2006      	movs	r0, #6
     1c8:	4c12      	ldr	r4, [pc, #72]	; (214 <init_interrupts+0x74>)
     1ca:	47a0      	blx	r4
	ext_irq_enable(BUTTON2);
     1cc:	2005      	movs	r0, #5
     1ce:	47a0      	blx	r4
	ext_irq_enable(BUTTON3);
     1d0:	2009      	movs	r0, #9
     1d2:	47a0      	blx	r4
	
	/*	CS 490 James	*/
	ext_irq_disable(APS_BUTTON1);
     1d4:	2019      	movs	r0, #25
     1d6:	47b0      	blx	r6
	ext_irq_disable(APS_BUTTON2);
     1d8:	201b      	movs	r0, #27
     1da:	47b0      	blx	r6
	ext_irq_disable(APS_BUTTON3);
     1dc:	201c      	movs	r0, #28
     1de:	47b0      	blx	r6
	ext_irq_register(APS_BUTTON2, button_2_cb);
     1e0:	0039      	movs	r1, r7
     1e2:	201b      	movs	r0, #27
     1e4:	47a8      	blx	r5
	ext_irq_register(APS_BUTTON1, button_1_cb);
     1e6:	4909      	ldr	r1, [pc, #36]	; (20c <init_interrupts+0x6c>)
     1e8:	2019      	movs	r0, #25
     1ea:	47a8      	blx	r5
	ext_irq_register(APS_BUTTON3, button_3_cb);
     1ec:	4908      	ldr	r1, [pc, #32]	; (210 <init_interrupts+0x70>)
     1ee:	201c      	movs	r0, #28
     1f0:	47a8      	blx	r5
	ext_irq_enable(APS_BUTTON1);
     1f2:	2019      	movs	r0, #25
     1f4:	47a0      	blx	r4
	ext_irq_enable(APS_BUTTON2);
     1f6:	201b      	movs	r0, #27
     1f8:	47a0      	blx	r4
	ext_irq_enable(APS_BUTTON3);
     1fa:	201c      	movs	r0, #28
     1fc:	47a0      	blx	r4
}
     1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     200:	000011d1 	.word	0x000011d1
     204:	00000159 	.word	0x00000159
     208:	000010e1 	.word	0x000010e1
     20c:	0000013d 	.word	0x0000013d
     210:	00000121 	.word	0x00000121
     214:	000011c1 	.word	0x000011c1

00000218 <set_leds>:

void set_leds(uint8_t button_count)
{
	if(button_count < 1) 
     218:	2800      	cmp	r0, #0
     21a:	d11e      	bne.n	25a <set_leds+0x42>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     21c:	23c0      	movs	r3, #192	; 0xc0
     21e:	05db      	lsls	r3, r3, #23
     220:	2280      	movs	r2, #128	; 0x80
     222:	0412      	lsls	r2, r2, #16
     224:	615a      	str	r2, [r3, #20]
     226:	2280      	movs	r2, #128	; 0x80
     228:	0112      	lsls	r2, r2, #4
     22a:	615a      	str	r2, [r3, #20]
     22c:	2280      	movs	r2, #128	; 0x80
     22e:	0352      	lsls	r2, r2, #13
     230:	615a      	str	r2, [r3, #20]
     232:	2280      	movs	r2, #128	; 0x80
     234:	0292      	lsls	r2, r2, #10
     236:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, false);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 3 )
     238:	2803      	cmp	r0, #3
     23a:	d11e      	bne.n	27a <set_leds+0x62>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     23c:	23c0      	movs	r3, #192	; 0xc0
     23e:	05db      	lsls	r3, r3, #23
     240:	2280      	movs	r2, #128	; 0x80
     242:	0412      	lsls	r2, r2, #16
     244:	619a      	str	r2, [r3, #24]
     246:	2280      	movs	r2, #128	; 0x80
     248:	0112      	lsls	r2, r2, #4
     24a:	619a      	str	r2, [r3, #24]
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	0352      	lsls	r2, r2, #13
     250:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     252:	2280      	movs	r2, #128	; 0x80
     254:	0292      	lsls	r2, r2, #10
     256:	615a      	str	r2, [r3, #20]
     258:	e01f      	b.n	29a <set_leds+0x82>
	if (button_count == 1 )
     25a:	2801      	cmp	r0, #1
     25c:	d11e      	bne.n	29c <set_leds+0x84>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     25e:	23c0      	movs	r3, #192	; 0xc0
     260:	05db      	lsls	r3, r3, #23
     262:	2280      	movs	r2, #128	; 0x80
     264:	0412      	lsls	r2, r2, #16
     266:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     268:	2280      	movs	r2, #128	; 0x80
     26a:	0112      	lsls	r2, r2, #4
     26c:	615a      	str	r2, [r3, #20]
     26e:	2280      	movs	r2, #128	; 0x80
     270:	0352      	lsls	r2, r2, #13
     272:	615a      	str	r2, [r3, #20]
     274:	2280      	movs	r2, #128	; 0x80
     276:	0292      	lsls	r2, r2, #10
     278:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 4 )
     27a:	2804      	cmp	r0, #4
     27c:	d10d      	bne.n	29a <set_leds+0x82>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     27e:	23c0      	movs	r3, #192	; 0xc0
     280:	05db      	lsls	r3, r3, #23
     282:	2280      	movs	r2, #128	; 0x80
     284:	0412      	lsls	r2, r2, #16
     286:	619a      	str	r2, [r3, #24]
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0112      	lsls	r2, r2, #4
     28c:	619a      	str	r2, [r3, #24]
     28e:	2280      	movs	r2, #128	; 0x80
     290:	0352      	lsls	r2, r2, #13
     292:	619a      	str	r2, [r3, #24]
     294:	2280      	movs	r2, #128	; 0x80
     296:	0292      	lsls	r2, r2, #10
     298:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(OUT7, true);
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, true);
	}
}
     29a:	4770      	bx	lr
	if (button_count == 2 )
     29c:	2802      	cmp	r0, #2
     29e:	d1cb      	bne.n	238 <set_leds+0x20>
     2a0:	23c0      	movs	r3, #192	; 0xc0
     2a2:	05db      	lsls	r3, r3, #23
     2a4:	2280      	movs	r2, #128	; 0x80
     2a6:	0412      	lsls	r2, r2, #16
     2a8:	619a      	str	r2, [r3, #24]
     2aa:	2280      	movs	r2, #128	; 0x80
     2ac:	0112      	lsls	r2, r2, #4
     2ae:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2b0:	2280      	movs	r2, #128	; 0x80
     2b2:	0352      	lsls	r2, r2, #13
     2b4:	615a      	str	r2, [r3, #20]
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	0292      	lsls	r2, r2, #10
     2ba:	615a      	str	r2, [r3, #20]
     2bc:	e7ed      	b.n	29a <set_leds+0x82>
	...

000002c0 <TIMER_0_task1_cb>:
	{
     2c0:	b510      	push	{r4, lr}
	if (button_1)
     2c2:	4b30      	ldr	r3, [pc, #192]	; (384 <TIMER_0_task1_cb+0xc4>)
     2c4:	785b      	ldrb	r3, [r3, #1]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d023      	beq.n	312 <TIMER_0_task1_cb+0x52>
		if(insulinDeliveryIndex >= 7)	//	insulinDeliveryAmount is 8 bit number and so trying to add more digits should do nothing
     2ca:	4b2f      	ldr	r3, [pc, #188]	; (388 <TIMER_0_task1_cb+0xc8>)
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	b25b      	sxtb	r3, r3
     2d0:	2b06      	cmp	r3, #6
     2d2:	dc08      	bgt.n	2e6 <TIMER_0_task1_cb+0x26>
			insulinDeliveryIndex++;
     2d4:	3301      	adds	r3, #1
     2d6:	4a2c      	ldr	r2, [pc, #176]	; (388 <TIMER_0_task1_cb+0xc8>)
     2d8:	7013      	strb	r3, [r2, #0]
			insulinDeliveryAmount |= 1;
     2da:	4a2c      	ldr	r2, [pc, #176]	; (38c <TIMER_0_task1_cb+0xcc>)
			insulinDeliveryAmount <<= 1;
     2dc:	7813      	ldrb	r3, [r2, #0]
     2de:	005b      	lsls	r3, r3, #1
			insulinDeliveryAmount |= 1;
     2e0:	2101      	movs	r1, #1
     2e2:	430b      	orrs	r3, r1
     2e4:	7013      	strb	r3, [r2, #0]
		button_array[0] = insulinDeliveryAmount;
     2e6:	4c2a      	ldr	r4, [pc, #168]	; (390 <TIMER_0_task1_cb+0xd0>)
     2e8:	4b28      	ldr	r3, [pc, #160]	; (38c <TIMER_0_task1_cb+0xcc>)
     2ea:	781b      	ldrb	r3, [r3, #0]
     2ec:	7023      	strb	r3, [r4, #0]
		button_1 = false;
     2ee:	2200      	movs	r2, #0
     2f0:	4b24      	ldr	r3, [pc, #144]	; (384 <TIMER_0_task1_cb+0xc4>)
     2f2:	705a      	strb	r2, [r3, #1]
		timer_stop(&TIMER_0);
     2f4:	4827      	ldr	r0, [pc, #156]	; (394 <TIMER_0_task1_cb+0xd4>)
     2f6:	4b28      	ldr	r3, [pc, #160]	; (398 <TIMER_0_task1_cb+0xd8>)
     2f8:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     2fa:	4b28      	ldr	r3, [pc, #160]	; (39c <TIMER_0_task1_cb+0xdc>)
     2fc:	8819      	ldrh	r1, [r3, #0]
     2fe:	2201      	movs	r2, #1
     300:	4827      	ldr	r0, [pc, #156]	; (3a0 <TIMER_0_task1_cb+0xe0>)
     302:	4b28      	ldr	r3, [pc, #160]	; (3a4 <TIMER_0_task1_cb+0xe4>)
     304:	4798      	blx	r3
		store_delivery_data();
     306:	4b28      	ldr	r3, [pc, #160]	; (3a8 <TIMER_0_task1_cb+0xe8>)
     308:	4798      	blx	r3
		set_leds(button_array[0]);
     30a:	7820      	ldrb	r0, [r4, #0]
     30c:	4b27      	ldr	r3, [pc, #156]	; (3ac <TIMER_0_task1_cb+0xec>)
     30e:	4798      	blx	r3
}
     310:	bd10      	pop	{r4, pc}
	else if (button_2)
     312:	4b1c      	ldr	r3, [pc, #112]	; (384 <TIMER_0_task1_cb+0xc4>)
     314:	789b      	ldrb	r3, [r3, #2]
     316:	2b00      	cmp	r3, #0
     318:	d021      	beq.n	35e <TIMER_0_task1_cb+0x9e>
		if(insulinDeliveryIndex >= 7)	//	insulinDeliveryAmount is 8 bit number and so trying to add more digits should do nothing
     31a:	4b1b      	ldr	r3, [pc, #108]	; (388 <TIMER_0_task1_cb+0xc8>)
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	b25b      	sxtb	r3, r3
     320:	2b06      	cmp	r3, #6
     322:	dc06      	bgt.n	332 <TIMER_0_task1_cb+0x72>
			insulinDeliveryIndex++;
     324:	3301      	adds	r3, #1
     326:	4a18      	ldr	r2, [pc, #96]	; (388 <TIMER_0_task1_cb+0xc8>)
     328:	7013      	strb	r3, [r2, #0]
			insulinDeliveryAmount <<= 1;
     32a:	4a18      	ldr	r2, [pc, #96]	; (38c <TIMER_0_task1_cb+0xcc>)
     32c:	7813      	ldrb	r3, [r2, #0]
     32e:	005b      	lsls	r3, r3, #1
     330:	7013      	strb	r3, [r2, #0]
		button_array[0] = insulinDeliveryAmount;
     332:	4c17      	ldr	r4, [pc, #92]	; (390 <TIMER_0_task1_cb+0xd0>)
     334:	4b15      	ldr	r3, [pc, #84]	; (38c <TIMER_0_task1_cb+0xcc>)
     336:	781b      	ldrb	r3, [r3, #0]
     338:	7023      	strb	r3, [r4, #0]
		button_2 = false;
     33a:	2200      	movs	r2, #0
     33c:	4b11      	ldr	r3, [pc, #68]	; (384 <TIMER_0_task1_cb+0xc4>)
     33e:	709a      	strb	r2, [r3, #2]
		timer_stop(&TIMER_0);
     340:	4814      	ldr	r0, [pc, #80]	; (394 <TIMER_0_task1_cb+0xd4>)
     342:	4b15      	ldr	r3, [pc, #84]	; (398 <TIMER_0_task1_cb+0xd8>)
     344:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     346:	4b15      	ldr	r3, [pc, #84]	; (39c <TIMER_0_task1_cb+0xdc>)
     348:	8819      	ldrh	r1, [r3, #0]
     34a:	2201      	movs	r2, #1
     34c:	4814      	ldr	r0, [pc, #80]	; (3a0 <TIMER_0_task1_cb+0xe0>)
     34e:	4b15      	ldr	r3, [pc, #84]	; (3a4 <TIMER_0_task1_cb+0xe4>)
     350:	4798      	blx	r3
		store_delivery_data();
     352:	4b15      	ldr	r3, [pc, #84]	; (3a8 <TIMER_0_task1_cb+0xe8>)
     354:	4798      	blx	r3
		set_leds(button_array[0]);
     356:	7820      	ldrb	r0, [r4, #0]
     358:	4b14      	ldr	r3, [pc, #80]	; (3ac <TIMER_0_task1_cb+0xec>)
     35a:	4798      	blx	r3
     35c:	e7d8      	b.n	310 <TIMER_0_task1_cb+0x50>
	else if  (button_3)
     35e:	4b09      	ldr	r3, [pc, #36]	; (384 <TIMER_0_task1_cb+0xc4>)
     360:	781b      	ldrb	r3, [r3, #0]
     362:	2b00      	cmp	r3, #0
     364:	d0d4      	beq.n	310 <TIMER_0_task1_cb+0x50>
		button_array[2]++;
     366:	4a0a      	ldr	r2, [pc, #40]	; (390 <TIMER_0_task1_cb+0xd0>)
     368:	7893      	ldrb	r3, [r2, #2]
     36a:	3301      	adds	r3, #1
     36c:	7093      	strb	r3, [r2, #2]
		button_3 = false;
     36e:	2400      	movs	r4, #0
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <TIMER_0_task1_cb+0xc4>)
     372:	701c      	strb	r4, [r3, #0]
		main();
     374:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <TIMER_0_task1_cb+0xf0>)
     376:	4798      	blx	r3
		insulinDeliveryIndex = -1;
     378:	22ff      	movs	r2, #255	; 0xff
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <TIMER_0_task1_cb+0xc8>)
     37c:	701a      	strb	r2, [r3, #0]
		insulinDeliveryAmount = 0;
     37e:	4b03      	ldr	r3, [pc, #12]	; (38c <TIMER_0_task1_cb+0xcc>)
     380:	701c      	strb	r4, [r3, #0]
}
     382:	e7c5      	b.n	310 <TIMER_0_task1_cb+0x50>
     384:	2000003c 	.word	0x2000003c
     388:	20000000 	.word	0x20000000
     38c:	2000009b 	.word	0x2000009b
     390:	20000098 	.word	0x20000098
     394:	20000124 	.word	0x20000124
     398:	000018e1 	.word	0x000018e1
     39c:	20000018 	.word	0x20000018
     3a0:	200000c4 	.word	0x200000c4
     3a4:	000013e1 	.word	0x000013e1
     3a8:	00000d8d 	.word	0x00000d8d
     3ac:	00000219 	.word	0x00000219
     3b0:	000029e1 	.word	0x000029e1

000003b4 <leds_off>:
     3b4:	23c0      	movs	r3, #192	; 0xc0
     3b6:	05db      	lsls	r3, r3, #23
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	0112      	lsls	r2, r2, #4
     3bc:	615a      	str	r2, [r3, #20]
     3be:	2280      	movs	r2, #128	; 0x80
     3c0:	0352      	lsls	r2, r2, #13
     3c2:	615a      	str	r2, [r3, #20]
     3c4:	2280      	movs	r2, #128	; 0x80
     3c6:	0412      	lsls	r2, r2, #16
     3c8:	615a      	str	r2, [r3, #20]
     3ca:	2280      	movs	r2, #128	; 0x80
     3cc:	0292      	lsls	r2, r2, #10
     3ce:	615a      	str	r2, [r3, #20]
{
	gpio_set_pin_level(OUT1, false);
	gpio_set_pin_level(OUT6, false);
	gpio_set_pin_level(OUT7, false);
	gpio_set_pin_level(OUT4, false);
}
     3d0:	4770      	bx	lr

000003d2 <Dummy_Handler>:
     3d2:	e7fe      	b.n	3d2 <Dummy_Handler>

000003d4 <Reset_Handler>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4a2a      	ldr	r2, [pc, #168]	; (480 <Reset_Handler+0xac>)
     3d8:	4b2a      	ldr	r3, [pc, #168]	; (484 <Reset_Handler+0xb0>)
     3da:	429a      	cmp	r2, r3
     3dc:	d011      	beq.n	402 <Reset_Handler+0x2e>
     3de:	001a      	movs	r2, r3
     3e0:	4b29      	ldr	r3, [pc, #164]	; (488 <Reset_Handler+0xb4>)
     3e2:	429a      	cmp	r2, r3
     3e4:	d20d      	bcs.n	402 <Reset_Handler+0x2e>
     3e6:	4a29      	ldr	r2, [pc, #164]	; (48c <Reset_Handler+0xb8>)
     3e8:	3303      	adds	r3, #3
     3ea:	1a9b      	subs	r3, r3, r2
     3ec:	089b      	lsrs	r3, r3, #2
     3ee:	3301      	adds	r3, #1
     3f0:	009b      	lsls	r3, r3, #2
     3f2:	2200      	movs	r2, #0
     3f4:	4823      	ldr	r0, [pc, #140]	; (484 <Reset_Handler+0xb0>)
     3f6:	4922      	ldr	r1, [pc, #136]	; (480 <Reset_Handler+0xac>)
     3f8:	588c      	ldr	r4, [r1, r2]
     3fa:	5084      	str	r4, [r0, r2]
     3fc:	3204      	adds	r2, #4
     3fe:	429a      	cmp	r2, r3
     400:	d1fa      	bne.n	3f8 <Reset_Handler+0x24>
     402:	4a23      	ldr	r2, [pc, #140]	; (490 <Reset_Handler+0xbc>)
     404:	4b23      	ldr	r3, [pc, #140]	; (494 <Reset_Handler+0xc0>)
     406:	429a      	cmp	r2, r3
     408:	d20a      	bcs.n	420 <Reset_Handler+0x4c>
     40a:	43d3      	mvns	r3, r2
     40c:	4921      	ldr	r1, [pc, #132]	; (494 <Reset_Handler+0xc0>)
     40e:	185b      	adds	r3, r3, r1
     410:	2103      	movs	r1, #3
     412:	438b      	bics	r3, r1
     414:	3304      	adds	r3, #4
     416:	189b      	adds	r3, r3, r2
     418:	2100      	movs	r1, #0
     41a:	c202      	stmia	r2!, {r1}
     41c:	4293      	cmp	r3, r2
     41e:	d1fc      	bne.n	41a <Reset_Handler+0x46>
     420:	4a1d      	ldr	r2, [pc, #116]	; (498 <Reset_Handler+0xc4>)
     422:	21ff      	movs	r1, #255	; 0xff
     424:	4b1d      	ldr	r3, [pc, #116]	; (49c <Reset_Handler+0xc8>)
     426:	438b      	bics	r3, r1
     428:	6093      	str	r3, [r2, #8]
     42a:	39fd      	subs	r1, #253	; 0xfd
     42c:	2390      	movs	r3, #144	; 0x90
     42e:	005b      	lsls	r3, r3, #1
     430:	4a1b      	ldr	r2, [pc, #108]	; (4a0 <Reset_Handler+0xcc>)
     432:	50d1      	str	r1, [r2, r3]
     434:	4a1b      	ldr	r2, [pc, #108]	; (4a4 <Reset_Handler+0xd0>)
     436:	78d3      	ldrb	r3, [r2, #3]
     438:	2503      	movs	r5, #3
     43a:	43ab      	bics	r3, r5
     43c:	2402      	movs	r4, #2
     43e:	4323      	orrs	r3, r4
     440:	70d3      	strb	r3, [r2, #3]
     442:	78d3      	ldrb	r3, [r2, #3]
     444:	270c      	movs	r7, #12
     446:	43bb      	bics	r3, r7
     448:	2608      	movs	r6, #8
     44a:	4333      	orrs	r3, r6
     44c:	70d3      	strb	r3, [r2, #3]
     44e:	4b16      	ldr	r3, [pc, #88]	; (4a8 <Reset_Handler+0xd4>)
     450:	7b98      	ldrb	r0, [r3, #14]
     452:	2230      	movs	r2, #48	; 0x30
     454:	4390      	bics	r0, r2
     456:	2220      	movs	r2, #32
     458:	4310      	orrs	r0, r2
     45a:	7398      	strb	r0, [r3, #14]
     45c:	7b99      	ldrb	r1, [r3, #14]
     45e:	43b9      	bics	r1, r7
     460:	4331      	orrs	r1, r6
     462:	7399      	strb	r1, [r3, #14]
     464:	7b9a      	ldrb	r2, [r3, #14]
     466:	43aa      	bics	r2, r5
     468:	4322      	orrs	r2, r4
     46a:	739a      	strb	r2, [r3, #14]
     46c:	4a0f      	ldr	r2, [pc, #60]	; (4ac <Reset_Handler+0xd8>)
     46e:	6853      	ldr	r3, [r2, #4]
     470:	2180      	movs	r1, #128	; 0x80
     472:	430b      	orrs	r3, r1
     474:	6053      	str	r3, [r2, #4]
     476:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <Reset_Handler+0xdc>)
     478:	4798      	blx	r3
     47a:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <Reset_Handler+0xe0>)
     47c:	4798      	blx	r3
     47e:	e7fe      	b.n	47e <Reset_Handler+0xaa>
     480:	00003284 	.word	0x00003284
     484:	20000000 	.word	0x20000000
     488:	20000020 	.word	0x20000020
     48c:	20000004 	.word	0x20000004
     490:	20000020 	.word	0x20000020
     494:	20000178 	.word	0x20000178
     498:	e000ed00 	.word	0xe000ed00
     49c:	00000000 	.word	0x00000000
     4a0:	41007000 	.word	0x41007000
     4a4:	41005000 	.word	0x41005000
     4a8:	41004800 	.word	0x41004800
     4ac:	41004000 	.word	0x41004000
     4b0:	00002fd1 	.word	0x00002fd1
     4b4:	000029e1 	.word	0x000029e1

000004b8 <ADC_0_PORT_init>:
struct dac_sync_descriptor DAC_0;

struct wdt_descriptor WDT_0;

void ADC_0_PORT_init(void)
{
     4b8:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ba:	2204      	movs	r2, #4
     4bc:	23c0      	movs	r3, #192	; 0xc0
     4be:	05db      	lsls	r3, r3, #23
     4c0:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c2:	490a      	ldr	r1, [pc, #40]	; (4ec <ADC_0_PORT_init+0x34>)
     4c4:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <ADC_0_PORT_init+0x38>)
     4c6:	628b      	str	r3, [r1, #40]	; 0x28
     4c8:	23c0      	movs	r3, #192	; 0xc0
     4ca:	061b      	lsls	r3, r3, #24
     4cc:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	2342      	movs	r3, #66	; 0x42
     4d0:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	2001      	movs	r0, #1
     4d4:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	4302      	orrs	r2, r0
     4d8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4dc:	2231      	movs	r2, #49	; 0x31
     4de:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e0:	240f      	movs	r4, #15
     4e2:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     4e4:	4303      	orrs	r3, r0
     4e6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e8:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(ADC_BATT_TEST, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(ADC_BATT_TEST, PINMUX_PA02B_ADC_AIN0);
}
     4ea:	bd10      	pop	{r4, pc}
     4ec:	41004400 	.word	0x41004400
     4f0:	40000004 	.word	0x40000004

000004f4 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     4f4:	4a04      	ldr	r2, [pc, #16]	; (508 <ADC_0_CLOCK_init+0x14>)
     4f6:	6a11      	ldr	r1, [r2, #32]
     4f8:	2380      	movs	r3, #128	; 0x80
     4fa:	025b      	lsls	r3, r3, #9
     4fc:	430b      	orrs	r3, r1
     4fe:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     500:	4a02      	ldr	r2, [pc, #8]	; (50c <ADC_0_CLOCK_init+0x18>)
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <ADC_0_CLOCK_init+0x1c>)
     504:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     506:	4770      	bx	lr
     508:	40000400 	.word	0x40000400
     50c:	0000401e 	.word	0x0000401e
     510:	40000c00 	.word	0x40000c00

00000514 <ADC_0_init>:

void ADC_0_init(void)
{
     514:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     516:	4b05      	ldr	r3, [pc, #20]	; (52c <ADC_0_init+0x18>)
     518:	4798      	blx	r3
	ADC_0_PORT_init();
     51a:	4b05      	ldr	r3, [pc, #20]	; (530 <ADC_0_init+0x1c>)
     51c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     51e:	2200      	movs	r2, #0
     520:	4904      	ldr	r1, [pc, #16]	; (534 <ADC_0_init+0x20>)
     522:	4805      	ldr	r0, [pc, #20]	; (538 <ADC_0_init+0x24>)
     524:	4b05      	ldr	r3, [pc, #20]	; (53c <ADC_0_init+0x28>)
     526:	4798      	blx	r3
}
     528:	bd10      	pop	{r4, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	000004f5 	.word	0x000004f5
     530:	000004b9 	.word	0x000004b9
     534:	42004000 	.word	0x42004000
     538:	200000f8 	.word	0x200000f8
     53c:	00000f7d 	.word	0x00000f7d

00000540 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	46d6      	mov	lr, sl
     544:	464f      	mov	r7, r9
     546:	4646      	mov	r6, r8
     548:	b5c0      	push	{r6, r7, lr}
     54a:	4a4b      	ldr	r2, [pc, #300]	; (678 <EXTERNAL_IRQ_0_init+0x138>)
     54c:	4b4b      	ldr	r3, [pc, #300]	; (67c <EXTERNAL_IRQ_0_init+0x13c>)
     54e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     550:	26c0      	movs	r6, #192	; 0xc0
     552:	05f6      	lsls	r6, r6, #23
     554:	2320      	movs	r3, #32
     556:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     558:	4b49      	ldr	r3, [pc, #292]	; (680 <EXTERNAL_IRQ_0_init+0x140>)
     55a:	4a4a      	ldr	r2, [pc, #296]	; (684 <EXTERNAL_IRQ_0_init+0x144>)
     55c:	629a      	str	r2, [r3, #40]	; 0x28
     55e:	4a4a      	ldr	r2, [pc, #296]	; (688 <EXTERNAL_IRQ_0_init+0x148>)
     560:	4690      	mov	r8, r2
     562:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     564:	2445      	movs	r4, #69	; 0x45
     566:	5d19      	ldrb	r1, [r3, r4]
     568:	2204      	movs	r2, #4
     56a:	4391      	bics	r1, r2
     56c:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     570:	2501      	movs	r5, #1
     572:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     574:	2001      	movs	r0, #1
     576:	4301      	orrs	r1, r0
     578:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57c:	2732      	movs	r7, #50	; 0x32
     57e:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     580:	3c36      	subs	r4, #54	; 0x36
     582:	46a1      	mov	r9, r4
     584:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     586:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     588:	2140      	movs	r1, #64	; 0x40
     58a:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     58c:	493f      	ldr	r1, [pc, #252]	; (68c <EXTERNAL_IRQ_0_init+0x14c>)
     58e:	6299      	str	r1, [r3, #40]	; 0x28
     590:	4641      	mov	r1, r8
     592:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     594:	3714      	adds	r7, #20
     596:	5dd9      	ldrb	r1, [r3, r7]
     598:	4391      	bics	r1, r2
     59a:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59c:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     59e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a0:	4301      	orrs	r1, r0
     5a2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a4:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a6:	3f13      	subs	r7, #19
     5a8:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5aa:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ac:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ae:	2180      	movs	r1, #128	; 0x80
     5b0:	0549      	lsls	r1, r1, #21
     5b2:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b4:	4f36      	ldr	r7, [pc, #216]	; (690 <EXTERNAL_IRQ_0_init+0x150>)
     5b6:	629f      	str	r7, [r3, #40]	; 0x28
     5b8:	4936      	ldr	r1, [pc, #216]	; (694 <EXTERNAL_IRQ_0_init+0x154>)
     5ba:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5bc:	215c      	movs	r1, #92	; 0x5c
     5be:	468c      	mov	ip, r1
     5c0:	5c59      	ldrb	r1, [r3, r1]
     5c2:	4391      	bics	r1, r2
     5c4:	4664      	mov	r4, ip
     5c6:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c8:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ca:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5cc:	4301      	orrs	r1, r0
     5ce:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d0:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d2:	213e      	movs	r1, #62	; 0x3e
     5d4:	468c      	mov	ip, r1
     5d6:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5d8:	464c      	mov	r4, r9
     5da:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5dc:	4664      	mov	r4, ip
     5de:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5e0:	2180      	movs	r1, #128	; 0x80
     5e2:	0089      	lsls	r1, r1, #2
     5e4:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e6:	492c      	ldr	r1, [pc, #176]	; (698 <EXTERNAL_IRQ_0_init+0x158>)
     5e8:	6299      	str	r1, [r3, #40]	; 0x28
     5ea:	4641      	mov	r1, r8
     5ec:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5ee:	2149      	movs	r1, #73	; 0x49
     5f0:	468c      	mov	ip, r1
     5f2:	5c59      	ldrb	r1, [r3, r1]
     5f4:	4391      	bics	r1, r2
     5f6:	4664      	mov	r4, ip
     5f8:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fa:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fc:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fe:	4301      	orrs	r1, r0
     600:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     602:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     604:	2134      	movs	r1, #52	; 0x34
     606:	468c      	mov	ip, r1
     608:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     60a:	464c      	mov	r4, r9
     60c:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60e:	4664      	mov	r4, ip
     610:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     612:	2180      	movs	r1, #128	; 0x80
     614:	0489      	lsls	r1, r1, #18
     616:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     618:	629f      	str	r7, [r3, #40]	; 0x28
     61a:	4920      	ldr	r1, [pc, #128]	; (69c <EXTERNAL_IRQ_0_init+0x15c>)
     61c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61e:	2159      	movs	r1, #89	; 0x59
     620:	468c      	mov	ip, r1
     622:	5c59      	ldrb	r1, [r3, r1]
     624:	4391      	bics	r1, r2
     626:	4664      	mov	r4, ip
     628:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62a:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     62e:	4301      	orrs	r1, r0
     630:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     632:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     634:	213c      	movs	r1, #60	; 0x3c
     636:	468c      	mov	ip, r1
     638:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     63a:	464c      	mov	r4, r9
     63c:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63e:	4664      	mov	r4, ip
     640:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     642:	2180      	movs	r1, #128	; 0x80
     644:	0509      	lsls	r1, r1, #20
     646:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     648:	629f      	str	r7, [r3, #40]	; 0x28
     64a:	4915      	ldr	r1, [pc, #84]	; (6a0 <EXTERNAL_IRQ_0_init+0x160>)
     64c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     64e:	215b      	movs	r1, #91	; 0x5b
     650:	5c5e      	ldrb	r6, [r3, r1]
     652:	4396      	bics	r6, r2
     654:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     656:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     658:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65a:	4302      	orrs	r2, r0
     65c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     660:	391e      	subs	r1, #30
     662:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     664:	464c      	mov	r4, r9
     666:	4014      	ands	r4, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     668:	545c      	strb	r4, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(APS_BUTTON2, PINMUX_PA27A_EIC_EXTINT15);

	ext_irq_init();
     66a:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <EXTERNAL_IRQ_0_init+0x164>)
     66c:	4798      	blx	r3
}
     66e:	bc1c      	pop	{r2, r3, r4}
     670:	4690      	mov	r8, r2
     672:	4699      	mov	r9, r3
     674:	46a2      	mov	sl, r4
     676:	bdf0      	pop	{r4, r5, r6, r7, pc}
     678:	00004005 	.word	0x00004005
     67c:	40000c00 	.word	0x40000c00
     680:	41004400 	.word	0x41004400
     684:	40020020 	.word	0x40020020
     688:	c0020000 	.word	0xc0020000
     68c:	40020040 	.word	0x40020040
     690:	40020000 	.word	0x40020000
     694:	c0021000 	.word	0xc0021000
     698:	40020200 	.word	0x40020200
     69c:	c0020200 	.word	0xc0020200
     6a0:	c0020800 	.word	0xc0020800
     6a4:	000010b5 	.word	0x000010b5

000006a8 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     6a8:	4a02      	ldr	r2, [pc, #8]	; (6b4 <FLASH_0_CLOCK_init+0xc>)
     6aa:	69d3      	ldr	r3, [r2, #28]
     6ac:	2104      	movs	r1, #4
     6ae:	430b      	orrs	r3, r1
     6b0:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     6b2:	4770      	bx	lr
     6b4:	40000400 	.word	0x40000400

000006b8 <FLASH_0_init>:

void FLASH_0_init(void)
{
     6b8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     6ba:	4b03      	ldr	r3, [pc, #12]	; (6c8 <FLASH_0_init+0x10>)
     6bc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     6be:	4903      	ldr	r1, [pc, #12]	; (6cc <FLASH_0_init+0x14>)
     6c0:	4803      	ldr	r0, [pc, #12]	; (6d0 <FLASH_0_init+0x18>)
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <FLASH_0_init+0x1c>)
     6c4:	4798      	blx	r3
}
     6c6:	bd10      	pop	{r4, pc}
     6c8:	000006a9 	.word	0x000006a9
     6cc:	41004000 	.word	0x41004000
     6d0:	200000c4 	.word	0x200000c4
     6d4:	00001231 	.word	0x00001231

000006d8 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6da:	46c6      	mov	lr, r8
     6dc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6de:	22c0      	movs	r2, #192	; 0xc0
     6e0:	05d2      	lsls	r2, r2, #23
     6e2:	2380      	movs	r3, #128	; 0x80
     6e4:	005b      	lsls	r3, r3, #1
     6e6:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e8:	4b23      	ldr	r3, [pc, #140]	; (778 <SPI_0_PORT_init+0xa0>)
     6ea:	4924      	ldr	r1, [pc, #144]	; (77c <SPI_0_PORT_init+0xa4>)
     6ec:	6299      	str	r1, [r3, #40]	; 0x28
     6ee:	4924      	ldr	r1, [pc, #144]	; (780 <SPI_0_PORT_init+0xa8>)
     6f0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f2:	2048      	movs	r0, #72	; 0x48
     6f4:	5c19      	ldrb	r1, [r3, r0]
     6f6:	2404      	movs	r4, #4
     6f8:	43a1      	bics	r1, r4
     6fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6fc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6fe:	2501      	movs	r5, #1
     700:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     702:	2401      	movs	r4, #1
     704:	4321      	orrs	r1, r4
     706:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     708:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     70a:	2134      	movs	r1, #52	; 0x34
     70c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     70e:	260f      	movs	r6, #15
     710:	46b4      	mov	ip, r6
     712:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     714:	2702      	movs	r7, #2
     716:	4338      	orrs	r0, r7
     718:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     71a:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     71c:	2180      	movs	r1, #128	; 0x80
     71e:	00c9      	lsls	r1, r1, #3
     720:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     722:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     724:	4917      	ldr	r1, [pc, #92]	; (784 <SPI_0_PORT_init+0xac>)
     726:	6299      	str	r1, [r3, #40]	; 0x28
     728:	26c0      	movs	r6, #192	; 0xc0
     72a:	0636      	lsls	r6, r6, #24
     72c:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72e:	214a      	movs	r1, #74	; 0x4a
     730:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     732:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     734:	4320      	orrs	r0, r4
     736:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     738:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     73a:	3915      	subs	r1, #21
     73c:	4688      	mov	r8, r1
     73e:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     740:	4660      	mov	r0, ip
     742:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     744:	4339      	orrs	r1, r7
     746:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     748:	4640      	mov	r0, r8
     74a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     74c:	2180      	movs	r1, #128	; 0x80
     74e:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     750:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     752:	4a0d      	ldr	r2, [pc, #52]	; (788 <SPI_0_PORT_init+0xb0>)
     754:	629a      	str	r2, [r3, #40]	; 0x28
     756:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     758:	3939      	subs	r1, #57	; 0x39
     75a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     75c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     75e:	4322      	orrs	r2, r4
     760:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     762:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     764:	3914      	subs	r1, #20
     766:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     768:	3826      	subs	r0, #38	; 0x26
     76a:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     76c:	3021      	adds	r0, #33	; 0x21
     76e:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     770:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK, PINMUX_PA07D_SERCOM0_PAD3);
}
     772:	bc04      	pop	{r2}
     774:	4690      	mov	r8, r2
     776:	bdf0      	pop	{r4, r5, r6, r7, pc}
     778:	41004400 	.word	0x41004400
     77c:	40020100 	.word	0x40020100
     780:	c0020000 	.word	0xc0020000
     784:	40000400 	.word	0x40000400
     788:	40000080 	.word	0x40000080

0000078c <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     78c:	4a04      	ldr	r2, [pc, #16]	; (7a0 <SPI_0_CLOCK_init+0x14>)
     78e:	6a13      	ldr	r3, [r2, #32]
     790:	2104      	movs	r1, #4
     792:	430b      	orrs	r3, r1
     794:	6213      	str	r3, [r2, #32]
     796:	4a03      	ldr	r2, [pc, #12]	; (7a4 <SPI_0_CLOCK_init+0x18>)
     798:	4b03      	ldr	r3, [pc, #12]	; (7a8 <SPI_0_CLOCK_init+0x1c>)
     79a:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     79c:	4770      	bx	lr
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	40000400 	.word	0x40000400
     7a4:	00004014 	.word	0x00004014
     7a8:	40000c00 	.word	0x40000c00

000007ac <SPI_0_init>:

void SPI_0_init(void)
{
     7ac:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     7ae:	4b04      	ldr	r3, [pc, #16]	; (7c0 <SPI_0_init+0x14>)
     7b0:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     7b2:	4904      	ldr	r1, [pc, #16]	; (7c4 <SPI_0_init+0x18>)
     7b4:	4804      	ldr	r0, [pc, #16]	; (7c8 <SPI_0_init+0x1c>)
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <SPI_0_init+0x20>)
     7b8:	4798      	blx	r3
	SPI_0_PORT_init();
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <SPI_0_init+0x24>)
     7bc:	4798      	blx	r3
}
     7be:	bd10      	pop	{r4, pc}
     7c0:	0000078d 	.word	0x0000078d
     7c4:	42000800 	.word	0x42000800
     7c8:	2000010c 	.word	0x2000010c
     7cc:	000015a1 	.word	0x000015a1
     7d0:	000006d9 	.word	0x000006d9

000007d4 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d6:	46c6      	mov	lr, r8
     7d8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7da:	22c0      	movs	r2, #192	; 0xc0
     7dc:	05d2      	lsls	r2, r2, #23
     7de:	2380      	movs	r3, #128	; 0x80
     7e0:	03db      	lsls	r3, r3, #15
     7e2:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e4:	4b24      	ldr	r3, [pc, #144]	; (878 <SPI_1_PORT_init+0xa4>)
     7e6:	4925      	ldr	r1, [pc, #148]	; (87c <SPI_1_PORT_init+0xa8>)
     7e8:	6299      	str	r1, [r3, #40]	; 0x28
     7ea:	4925      	ldr	r1, [pc, #148]	; (880 <SPI_1_PORT_init+0xac>)
     7ec:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ee:	2056      	movs	r0, #86	; 0x56
     7f0:	5c19      	ldrb	r1, [r3, r0]
     7f2:	2404      	movs	r4, #4
     7f4:	43a1      	bics	r1, r4
     7f6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fa:	2501      	movs	r5, #1
     7fc:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fe:	2401      	movs	r4, #1
     800:	4321      	orrs	r1, r4
     802:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     804:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     806:	213b      	movs	r1, #59	; 0x3b
     808:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     80a:	260f      	movs	r6, #15
     80c:	46b4      	mov	ip, r6
     80e:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     810:	2702      	movs	r7, #2
     812:	4338      	orrs	r0, r7
     814:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     816:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	2180      	movs	r1, #128	; 0x80
     81a:	0449      	lsls	r1, r1, #17
     81c:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     81e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     820:	2680      	movs	r6, #128	; 0x80
     822:	05f6      	lsls	r6, r6, #23
     824:	629e      	str	r6, [r3, #40]	; 0x28
     826:	4917      	ldr	r1, [pc, #92]	; (884 <SPI_1_PORT_init+0xb0>)
     828:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     82a:	2158      	movs	r1, #88	; 0x58
     82c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     82e:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     830:	4320      	orrs	r0, r4
     832:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     834:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     836:	391c      	subs	r1, #28
     838:	4688      	mov	r8, r1
     83a:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     83c:	4660      	mov	r0, ip
     83e:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     840:	4339      	orrs	r1, r7
     842:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     844:	4640      	mov	r0, r8
     846:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     848:	2180      	movs	r1, #128	; 0x80
     84a:	0309      	lsls	r1, r1, #12
     84c:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     84e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     850:	629e      	str	r6, [r3, #40]	; 0x28
     852:	4a0d      	ldr	r2, [pc, #52]	; (888 <SPI_1_PORT_init+0xb4>)
     854:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     856:	2153      	movs	r1, #83	; 0x53
     858:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     85a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     85c:	4322      	orrs	r2, r4
     85e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     860:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     862:	391a      	subs	r1, #26
     864:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     866:	382d      	subs	r0, #45	; 0x2d
     868:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     86a:	3021      	adds	r0, #33	; 0x21
     86c:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     86e:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK_EXT, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK_EXT, PINMUX_PA19D_SERCOM3_PAD3);
}
     870:	bc04      	pop	{r2}
     872:	4690      	mov	r8, r2
     874:	bdf0      	pop	{r4, r5, r6, r7, pc}
     876:	46c0      	nop			; (mov r8, r8)
     878:	41004400 	.word	0x41004400
     87c:	40020000 	.word	0x40020000
     880:	c0020040 	.word	0xc0020040
     884:	c0000100 	.word	0xc0000100
     888:	c0000008 	.word	0xc0000008

0000088c <SPI_1_CLOCK_init>:
     88c:	4a04      	ldr	r2, [pc, #16]	; (8a0 <SPI_1_CLOCK_init+0x14>)
     88e:	6a13      	ldr	r3, [r2, #32]
     890:	2120      	movs	r1, #32
     892:	430b      	orrs	r3, r1
     894:	6213      	str	r3, [r2, #32]
     896:	4a03      	ldr	r2, [pc, #12]	; (8a4 <SPI_1_CLOCK_init+0x18>)
     898:	4b03      	ldr	r3, [pc, #12]	; (8a8 <SPI_1_CLOCK_init+0x1c>)
     89a:	805a      	strh	r2, [r3, #2]

void SPI_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     89c:	4770      	bx	lr
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	40000400 	.word	0x40000400
     8a4:	00004017 	.word	0x00004017
     8a8:	40000c00 	.word	0x40000c00

000008ac <SPI_1_init>:

void SPI_1_init(void)
{
     8ac:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <SPI_1_init+0x14>)
     8b0:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM3);
     8b2:	4904      	ldr	r1, [pc, #16]	; (8c4 <SPI_1_init+0x18>)
     8b4:	4804      	ldr	r0, [pc, #16]	; (8c8 <SPI_1_init+0x1c>)
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <SPI_1_init+0x20>)
     8b8:	4798      	blx	r3
	SPI_1_PORT_init();
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <SPI_1_init+0x24>)
     8bc:	4798      	blx	r3
}
     8be:	bd10      	pop	{r4, pc}
     8c0:	0000088d 	.word	0x0000088d
     8c4:	42001400 	.word	0x42001400
     8c8:	200000e0 	.word	0x200000e0
     8cc:	000015a1 	.word	0x000015a1
     8d0:	000007d5 	.word	0x000007d5

000008d4 <delay_driver_init>:

void delay_driver_init(void)
{
     8d4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     8d6:	4802      	ldr	r0, [pc, #8]	; (8e0 <delay_driver_init+0xc>)
     8d8:	4b02      	ldr	r3, [pc, #8]	; (8e4 <delay_driver_init+0x10>)
     8da:	4798      	blx	r3
}
     8dc:	bd10      	pop	{r4, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	e000e010 	.word	0xe000e010
     8e4:	0000100d 	.word	0x0000100d

000008e8 <PWM_0_CLOCK_init>:
     8e8:	4a04      	ldr	r2, [pc, #16]	; (8fc <PWM_0_CLOCK_init+0x14>)
     8ea:	6a11      	ldr	r1, [r2, #32]
     8ec:	2380      	movs	r3, #128	; 0x80
     8ee:	011b      	lsls	r3, r3, #4
     8f0:	430b      	orrs	r3, r1
     8f2:	6213      	str	r3, [r2, #32]
     8f4:	4a02      	ldr	r2, [pc, #8]	; (900 <PWM_0_CLOCK_init+0x18>)
     8f6:	4b03      	ldr	r3, [pc, #12]	; (904 <PWM_0_CLOCK_init+0x1c>)
     8f8:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     8fa:	4770      	bx	lr
     8fc:	40000400 	.word	0x40000400
     900:	0000401b 	.word	0x0000401b
     904:	40000c00 	.word	0x40000c00

00000908 <PWM_0_init>:

void PWM_0_init(void)
{
     908:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     90a:	4b05      	ldr	r3, [pc, #20]	; (920 <PWM_0_init+0x18>)
     90c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <PWM_0_init+0x1c>)
     910:	4798      	blx	r3
     912:	0002      	movs	r2, r0
     914:	4904      	ldr	r1, [pc, #16]	; (928 <PWM_0_init+0x20>)
     916:	4805      	ldr	r0, [pc, #20]	; (92c <PWM_0_init+0x24>)
     918:	4b05      	ldr	r3, [pc, #20]	; (930 <PWM_0_init+0x28>)
     91a:	4798      	blx	r3
}
     91c:	bd10      	pop	{r4, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	000008e9 	.word	0x000008e9
     924:	00002939 	.word	0x00002939
     928:	42002c00 	.word	0x42002c00
     92c:	200000a8 	.word	0x200000a8
     930:	00001539 	.word	0x00001539

00000934 <DAC_0_CLOCK_init>:
     934:	4a04      	ldr	r2, [pc, #16]	; (948 <DAC_0_CLOCK_init+0x14>)
     936:	6a11      	ldr	r1, [r2, #32]
     938:	2380      	movs	r3, #128	; 0x80
     93a:	02db      	lsls	r3, r3, #11
     93c:	430b      	orrs	r3, r1
     93e:	6213      	str	r3, [r2, #32]
     940:	4a02      	ldr	r2, [pc, #8]	; (94c <DAC_0_CLOCK_init+0x18>)
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <DAC_0_CLOCK_init+0x1c>)
     944:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     946:	4770      	bx	lr
     948:	40000400 	.word	0x40000400
     94c:	00004021 	.word	0x00004021
     950:	40000c00 	.word	0x40000c00

00000954 <DAC_0_init>:

void DAC_0_init(void)
{
     954:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <DAC_0_init+0x10>)
     958:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     95a:	4903      	ldr	r1, [pc, #12]	; (968 <DAC_0_init+0x14>)
     95c:	4803      	ldr	r0, [pc, #12]	; (96c <DAC_0_init+0x18>)
     95e:	4b04      	ldr	r3, [pc, #16]	; (970 <DAC_0_init+0x1c>)
     960:	4798      	blx	r3
	DAC_0_PORT_init();
}
     962:	bd10      	pop	{r4, pc}
     964:	00000935 	.word	0x00000935
     968:	42004800 	.word	0x42004800
     96c:	20000100 	.word	0x20000100
     970:	00000fcd 	.word	0x00000fcd

00000974 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     974:	4a04      	ldr	r2, [pc, #16]	; (988 <WDT_0_CLOCK_init+0x14>)
     976:	6993      	ldr	r3, [r2, #24]
     978:	2110      	movs	r1, #16
     97a:	430b      	orrs	r3, r1
     97c:	6193      	str	r3, [r2, #24]
     97e:	4a03      	ldr	r2, [pc, #12]	; (98c <WDT_0_CLOCK_init+0x18>)
     980:	4b03      	ldr	r3, [pc, #12]	; (990 <WDT_0_CLOCK_init+0x1c>)
     982:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     984:	4770      	bx	lr
     986:	46c0      	nop			; (mov r8, r8)
     988:	40000400 	.word	0x40000400
     98c:	00004003 	.word	0x00004003
     990:	40000c00 	.word	0x40000c00

00000994 <WDT_0_init>:

void WDT_0_init(void)
{
     994:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <WDT_0_init+0x1c>)
     998:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     99a:	2248      	movs	r2, #72	; 0x48
     99c:	4905      	ldr	r1, [pc, #20]	; (9b4 <WDT_0_init+0x20>)
     99e:	2001      	movs	r0, #1
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <WDT_0_init+0x24>)
     9a2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     9a4:	4805      	ldr	r0, [pc, #20]	; (9bc <WDT_0_init+0x28>)
     9a6:	4b06      	ldr	r3, [pc, #24]	; (9c0 <WDT_0_init+0x2c>)
     9a8:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     9aa:	4b06      	ldr	r3, [pc, #24]	; (9c4 <WDT_0_init+0x30>)
     9ac:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     9ae:	bd10      	pop	{r4, pc}
     9b0:	00000975 	.word	0x00000975
     9b4:	00003028 	.word	0x00003028
     9b8:	000019c9 	.word	0x000019c9
     9bc:	200000fc 	.word	0x200000fc
     9c0:	40001000 	.word	0x40001000
     9c4:	00002975 	.word	0x00002975

000009c8 <system_init>:

void system_init(void)
{
     9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9ca:	46de      	mov	lr, fp
     9cc:	4657      	mov	r7, sl
     9ce:	464e      	mov	r6, r9
     9d0:	4645      	mov	r5, r8
     9d2:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9d4:	4bba      	ldr	r3, [pc, #744]	; (cc0 <system_init+0x2f8>)
     9d6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d8:	22c0      	movs	r2, #192	; 0xc0
     9da:	05d2      	lsls	r2, r2, #23
     9dc:	2101      	movs	r1, #1
     9de:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e0:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e2:	4bb8      	ldr	r3, [pc, #736]	; (cc4 <system_init+0x2fc>)
     9e4:	48b8      	ldr	r0, [pc, #736]	; (cc8 <system_init+0x300>)
     9e6:	6298      	str	r0, [r3, #40]	; 0x28
     9e8:	20c0      	movs	r0, #192	; 0xc0
     9ea:	0600      	lsls	r0, r0, #24
     9ec:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ee:	2540      	movs	r5, #64	; 0x40
     9f0:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f4:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f6:	2002      	movs	r0, #2
     9f8:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9fa:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9fc:	48b3      	ldr	r0, [pc, #716]	; (ccc <system_init+0x304>)
     9fe:	6298      	str	r0, [r3, #40]	; 0x28
     a00:	20c0      	movs	r0, #192	; 0xc0
     a02:	0600      	lsls	r0, r0, #24
     a04:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a06:	3501      	adds	r5, #1
     a08:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a0a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a0c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0e:	2708      	movs	r7, #8
     a10:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a12:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a14:	48ae      	ldr	r0, [pc, #696]	; (cd0 <system_init+0x308>)
     a16:	4682      	mov	sl, r0
     a18:	6298      	str	r0, [r3, #40]	; 0x28
     a1a:	20c0      	movs	r0, #192	; 0xc0
     a1c:	0600      	lsls	r0, r0, #24
     a1e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a20:	3502      	adds	r5, #2
     a22:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a24:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a26:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a28:	2010      	movs	r0, #16
     a2a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a2c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a2e:	48a9      	ldr	r0, [pc, #676]	; (cd4 <system_init+0x30c>)
     a30:	6298      	str	r0, [r3, #40]	; 0x28
     a32:	20c0      	movs	r0, #192	; 0xc0
     a34:	0600      	lsls	r0, r0, #24
     a36:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a38:	3501      	adds	r5, #1
     a3a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a3c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a40:	2080      	movs	r0, #128	; 0x80
     a42:	0100      	lsls	r0, r0, #4
     a44:	4680      	mov	r8, r0
     a46:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a48:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a4a:	48a3      	ldr	r0, [pc, #652]	; (cd8 <system_init+0x310>)
     a4c:	6298      	str	r0, [r3, #40]	; 0x28
     a4e:	20c0      	movs	r0, #192	; 0xc0
     a50:	0600      	lsls	r0, r0, #24
     a52:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a54:	3507      	adds	r5, #7
     a56:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a58:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a5c:	2080      	movs	r0, #128	; 0x80
     a5e:	0140      	lsls	r0, r0, #5
     a60:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a62:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a64:	489d      	ldr	r0, [pc, #628]	; (cdc <system_init+0x314>)
     a66:	6298      	str	r0, [r3, #40]	; 0x28
     a68:	20c0      	movs	r0, #192	; 0xc0
     a6a:	0600      	lsls	r0, r0, #24
     a6c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a6e:	3501      	adds	r5, #1
     a70:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a72:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a74:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a76:	2080      	movs	r0, #128	; 0x80
     a78:	0180      	lsls	r0, r0, #6
     a7a:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4898      	ldr	r0, [pc, #608]	; (ce0 <system_init+0x318>)
     a7e:	6298      	str	r0, [r3, #40]	; 0x28
     a80:	4898      	ldr	r0, [pc, #608]	; (ce4 <system_init+0x31c>)
     a82:	4683      	mov	fp, r0
     a84:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a86:	204d      	movs	r0, #77	; 0x4d
     a88:	5c1c      	ldrb	r4, [r3, r0]
     a8a:	3d48      	subs	r5, #72	; 0x48
     a8c:	43ac      	bics	r4, r5
     a8e:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a90:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a92:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a94:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a96:	2080      	movs	r0, #128	; 0x80
     a98:	01c0      	lsls	r0, r0, #7
     a9a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a9c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9e:	4892      	ldr	r0, [pc, #584]	; (ce8 <system_init+0x320>)
     aa0:	6298      	str	r0, [r3, #40]	; 0x28
     aa2:	20c0      	movs	r0, #192	; 0xc0
     aa4:	0600      	lsls	r0, r0, #24
     aa6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa8:	204e      	movs	r0, #78	; 0x4e
     aaa:	4684      	mov	ip, r0
     aac:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aae:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab0:	4664      	mov	r4, ip
     ab2:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab4:	2080      	movs	r0, #128	; 0x80
     ab6:	0200      	lsls	r0, r0, #8
     ab8:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aba:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     abc:	488b      	ldr	r0, [pc, #556]	; (cec <system_init+0x324>)
     abe:	6298      	str	r0, [r3, #40]	; 0x28
     ac0:	20c0      	movs	r0, #192	; 0xc0
     ac2:	0600      	lsls	r0, r0, #24
     ac4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac6:	204f      	movs	r0, #79	; 0x4f
     ac8:	4684      	mov	ip, r0
     aca:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     acc:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ace:	4664      	mov	r4, ip
     ad0:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad2:	2080      	movs	r0, #128	; 0x80
     ad4:	0240      	lsls	r0, r0, #9
     ad6:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ada:	2080      	movs	r0, #128	; 0x80
     adc:	05c0      	lsls	r0, r0, #23
     ade:	6298      	str	r0, [r3, #40]	; 0x28
     ae0:	4c83      	ldr	r4, [pc, #524]	; (cf0 <system_init+0x328>)
     ae2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	2450      	movs	r4, #80	; 0x50
     ae6:	46a1      	mov	r9, r4
     ae8:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aea:	438c      	bics	r4, r1
     aec:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aee:	464c      	mov	r4, r9
     af0:	4666      	mov	r6, ip
     af2:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af4:	2480      	movs	r4, #128	; 0x80
     af6:	02a4      	lsls	r4, r4, #10
     af8:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     afa:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afc:	6298      	str	r0, [r3, #40]	; 0x28
     afe:	4c7d      	ldr	r4, [pc, #500]	; (cf4 <system_init+0x32c>)
     b00:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b02:	2451      	movs	r4, #81	; 0x51
     b04:	46a1      	mov	r9, r4
     b06:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b08:	438c      	bics	r4, r1
     b0a:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0c:	464c      	mov	r4, r9
     b0e:	4666      	mov	r6, ip
     b10:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b12:	2480      	movs	r4, #128	; 0x80
     b14:	02e4      	lsls	r4, r4, #11
     b16:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b18:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b1a:	6298      	str	r0, [r3, #40]	; 0x28
     b1c:	4c76      	ldr	r4, [pc, #472]	; (cf8 <system_init+0x330>)
     b1e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b20:	2452      	movs	r4, #82	; 0x52
     b22:	46a1      	mov	r9, r4
     b24:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b26:	438c      	bics	r4, r1
     b28:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2a:	464c      	mov	r4, r9
     b2c:	4666      	mov	r6, ip
     b2e:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b30:	2480      	movs	r4, #128	; 0x80
     b32:	0364      	lsls	r4, r4, #13
     b34:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b36:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b38:	6298      	str	r0, [r3, #40]	; 0x28
     b3a:	4c70      	ldr	r4, [pc, #448]	; (cfc <system_init+0x334>)
     b3c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3e:	2454      	movs	r4, #84	; 0x54
     b40:	46a1      	mov	r9, r4
     b42:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b44:	438c      	bics	r4, r1
     b46:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b48:	464c      	mov	r4, r9
     b4a:	4666      	mov	r6, ip
     b4c:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b4e:	2480      	movs	r4, #128	; 0x80
     b50:	0424      	lsls	r4, r4, #16
     b52:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b54:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b56:	6298      	str	r0, [r3, #40]	; 0x28
     b58:	4c69      	ldr	r4, [pc, #420]	; (d00 <system_init+0x338>)
     b5a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b5c:	2457      	movs	r4, #87	; 0x57
     b5e:	46a1      	mov	r9, r4
     b60:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b62:	438c      	bics	r4, r1
     b64:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b66:	464c      	mov	r4, r9
     b68:	4666      	mov	r6, ip
     b6a:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b6c:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	4865      	ldr	r0, [pc, #404]	; (d04 <system_init+0x33c>)
     b70:	4681      	mov	r9, r0
     b72:	6298      	str	r0, [r3, #40]	; 0x28
     b74:	4864      	ldr	r0, [pc, #400]	; (d08 <system_init+0x340>)
     b76:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b78:	205e      	movs	r0, #94	; 0x5e
     b7a:	5c1c      	ldrb	r4, [r3, r0]
     b7c:	43ac      	bics	r4, r5
     b7e:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b82:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b84:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b86:	2080      	movs	r0, #128	; 0x80
     b88:	0600      	lsls	r0, r0, #24
     b8a:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b8c:	4648      	mov	r0, r9
     b8e:	6298      	str	r0, [r3, #40]	; 0x28
     b90:	485e      	ldr	r0, [pc, #376]	; (d0c <system_init+0x344>)
     b92:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b94:	205f      	movs	r0, #95	; 0x5f
     b96:	5c1c      	ldrb	r4, [r3, r0]
     b98:	43ac      	bics	r4, r5
     b9a:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b9e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba0:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ba2:	3025      	adds	r0, #37	; 0x25
     ba4:	5015      	str	r5, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ba6:	3024      	adds	r0, #36	; 0x24
     ba8:	4c59      	ldr	r4, [pc, #356]	; (d10 <system_init+0x348>)
     baa:	501c      	str	r4, [r3, r0]
     bac:	465c      	mov	r4, fp
     bae:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bb0:	26c2      	movs	r6, #194	; 0xc2
     bb2:	5d9c      	ldrb	r4, [r3, r6]
     bb4:	43ac      	bics	r4, r5
     bb6:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bb8:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bbc:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bbe:	2494      	movs	r4, #148	; 0x94
     bc0:	46a4      	mov	ip, r4
     bc2:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bc4:	3e3a      	subs	r6, #58	; 0x3a
     bc6:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc8:	4654      	mov	r4, sl
     bca:	501c      	str	r4, [r3, r0]
     bcc:	24c0      	movs	r4, #192	; 0xc0
     bce:	0624      	lsls	r4, r4, #24
     bd0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bd2:	24c3      	movs	r4, #195	; 0xc3
     bd4:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bd6:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd8:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bda:	2780      	movs	r7, #128	; 0x80
     bdc:	007f      	lsls	r7, r7, #1
     bde:	4664      	mov	r4, ip
     be0:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     be2:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     be4:	4f4b      	ldr	r7, [pc, #300]	; (d14 <system_init+0x34c>)
     be6:	501f      	str	r7, [r3, r0]
     be8:	24c0      	movs	r4, #192	; 0xc0
     bea:	0624      	lsls	r4, r4, #24
     bec:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bee:	24c8      	movs	r4, #200	; 0xc8
     bf0:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bf2:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bf4:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bf6:	2780      	movs	r7, #128	; 0x80
     bf8:	00bf      	lsls	r7, r7, #2
     bfa:	4664      	mov	r4, ip
     bfc:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bfe:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c00:	4f45      	ldr	r7, [pc, #276]	; (d18 <system_init+0x350>)
     c02:	501f      	str	r7, [r3, r0]
     c04:	24c0      	movs	r4, #192	; 0xc0
     c06:	0624      	lsls	r4, r4, #24
     c08:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c0a:	24c9      	movs	r4, #201	; 0xc9
     c0c:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0e:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c10:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c12:	2780      	movs	r7, #128	; 0x80
     c14:	00ff      	lsls	r7, r7, #3
     c16:	4664      	mov	r4, ip
     c18:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c1a:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c1c:	4c3f      	ldr	r4, [pc, #252]	; (d1c <system_init+0x354>)
     c1e:	501c      	str	r4, [r3, r0]
     c20:	24c0      	movs	r4, #192	; 0xc0
     c22:	0624      	lsls	r4, r4, #24
     c24:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c26:	24ca      	movs	r4, #202	; 0xca
     c28:	46a3      	mov	fp, r4
     c2a:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c2c:	438c      	bics	r4, r1
     c2e:	46a2      	mov	sl, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c30:	465c      	mov	r4, fp
     c32:	4657      	mov	r7, sl
     c34:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c36:	4664      	mov	r4, ip
     c38:	4647      	mov	r7, r8
     c3a:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c3c:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c3e:	4c26      	ldr	r4, [pc, #152]	; (cd8 <system_init+0x310>)
     c40:	501c      	str	r4, [r3, r0]
     c42:	24c0      	movs	r4, #192	; 0xc0
     c44:	0624      	lsls	r4, r4, #24
     c46:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c48:	3643      	adds	r6, #67	; 0x43
     c4a:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c4c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c4e:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c50:	2480      	movs	r4, #128	; 0x80
     c52:	03e4      	lsls	r4, r4, #15
     c54:	3e47      	subs	r6, #71	; 0x47
     c56:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c58:	464a      	mov	r2, r9
     c5a:	501a      	str	r2, [r3, r0]
     c5c:	4a30      	ldr	r2, [pc, #192]	; (d20 <system_init+0x358>)
     c5e:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c60:	22d6      	movs	r2, #214	; 0xd6
     c62:	5c98      	ldrb	r0, [r3, r2]
     c64:	43a8      	bics	r0, r5
     c66:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c68:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c6a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c6c:	5498      	strb	r0, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DETECT, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     c6e:	4b2d      	ldr	r3, [pc, #180]	; (d24 <system_init+0x35c>)
     c70:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     c72:	4b2d      	ldr	r3, [pc, #180]	; (d28 <system_init+0x360>)
     c74:	4798      	blx	r3

	FLASH_0_init();
     c76:	4b2d      	ldr	r3, [pc, #180]	; (d2c <system_init+0x364>)
     c78:	4798      	blx	r3

	SPI_0_init();
     c7a:	4b2d      	ldr	r3, [pc, #180]	; (d30 <system_init+0x368>)
     c7c:	4798      	blx	r3

	SPI_1_init();
     c7e:	4b2d      	ldr	r3, [pc, #180]	; (d34 <system_init+0x36c>)
     c80:	4798      	blx	r3

	delay_driver_init();
     c82:	4b2d      	ldr	r3, [pc, #180]	; (d38 <system_init+0x370>)
     c84:	4798      	blx	r3
     c86:	4b25      	ldr	r3, [pc, #148]	; (d1c <system_init+0x354>)
     c88:	699b      	ldr	r3, [r3, #24]
     c8a:	2220      	movs	r2, #32
     c8c:	4313      	orrs	r3, r2
     c8e:	4a23      	ldr	r2, [pc, #140]	; (d1c <system_init+0x354>)
     c90:	6193      	str	r3, [r2, #24]
     c92:	4a2a      	ldr	r2, [pc, #168]	; (d3c <system_init+0x374>)
     c94:	4b2a      	ldr	r3, [pc, #168]	; (d40 <system_init+0x378>)
     c96:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     c98:	4b2a      	ldr	r3, [pc, #168]	; (d44 <system_init+0x37c>)
     c9a:	4798      	blx	r3
     c9c:	0002      	movs	r2, r0
     c9e:	492a      	ldr	r1, [pc, #168]	; (d48 <system_init+0x380>)
     ca0:	482a      	ldr	r0, [pc, #168]	; (d4c <system_init+0x384>)
     ca2:	4b2b      	ldr	r3, [pc, #172]	; (d50 <system_init+0x388>)
     ca4:	4798      	blx	r3

	TIMER_0_init();

	PWM_0_init();
     ca6:	4b2b      	ldr	r3, [pc, #172]	; (d54 <system_init+0x38c>)
     ca8:	4798      	blx	r3

	DAC_0_init();
     caa:	4b2b      	ldr	r3, [pc, #172]	; (d58 <system_init+0x390>)
     cac:	4798      	blx	r3

	WDT_0_init();
     cae:	4b2b      	ldr	r3, [pc, #172]	; (d5c <system_init+0x394>)
     cb0:	4798      	blx	r3
}
     cb2:	bc3c      	pop	{r2, r3, r4, r5}
     cb4:	4690      	mov	r8, r2
     cb6:	4699      	mov	r9, r3
     cb8:	46a2      	mov	sl, r4
     cba:	46ab      	mov	fp, r5
     cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00001ba1 	.word	0x00001ba1
     cc4:	41004400 	.word	0x41004400
     cc8:	40000001 	.word	0x40000001
     ccc:	40000002 	.word	0x40000002
     cd0:	40000008 	.word	0x40000008
     cd4:	40000010 	.word	0x40000010
     cd8:	40000800 	.word	0x40000800
     cdc:	40001000 	.word	0x40001000
     ce0:	40022000 	.word	0x40022000
     ce4:	c0020000 	.word	0xc0020000
     ce8:	40004000 	.word	0x40004000
     cec:	40008000 	.word	0x40008000
     cf0:	c0000001 	.word	0xc0000001
     cf4:	c0000002 	.word	0xc0000002
     cf8:	c0000004 	.word	0xc0000004
     cfc:	c0000010 	.word	0xc0000010
     d00:	c0000080 	.word	0xc0000080
     d04:	40020000 	.word	0x40020000
     d08:	c0024000 	.word	0xc0024000
     d0c:	c0028000 	.word	0xc0028000
     d10:	40020004 	.word	0x40020004
     d14:	40000100 	.word	0x40000100
     d18:	40000200 	.word	0x40000200
     d1c:	40000400 	.word	0x40000400
     d20:	c0020040 	.word	0xc0020040
     d24:	00000515 	.word	0x00000515
     d28:	00000541 	.word	0x00000541
     d2c:	000006b9 	.word	0x000006b9
     d30:	000007ad 	.word	0x000007ad
     d34:	000008ad 	.word	0x000008ad
     d38:	000008d5 	.word	0x000008d5
     d3c:	00004004 	.word	0x00004004
     d40:	40000c00 	.word	0x40000c00
     d44:	0000231b 	.word	0x0000231b
     d48:	40001400 	.word	0x40001400
     d4c:	20000124 	.word	0x20000124
     d50:	00001861 	.word	0x00001861
     d54:	00000909 	.word	0x00000909
     d58:	00000955 	.word	0x00000955
     d5c:	00000995 	.word	0x00000995

00000d60 <split_to_8>:
	store_delivery_data();
}

void split_to_8(void)
{
	write_array[0] = writes >> 8;
     d60:	4b06      	ldr	r3, [pc, #24]	; (d7c <split_to_8+0x1c>)
     d62:	881a      	ldrh	r2, [r3, #0]
     d64:	4b06      	ldr	r3, [pc, #24]	; (d80 <split_to_8+0x20>)
     d66:	0a11      	lsrs	r1, r2, #8
     d68:	7019      	strb	r1, [r3, #0]
	write_array[1] = writes;
     d6a:	705a      	strb	r2, [r3, #1]
	address_array[0] = flash_address >> 8;
     d6c:	4b05      	ldr	r3, [pc, #20]	; (d84 <split_to_8+0x24>)
     d6e:	881a      	ldrh	r2, [r3, #0]
     d70:	4b05      	ldr	r3, [pc, #20]	; (d88 <split_to_8+0x28>)
     d72:	0a11      	lsrs	r1, r2, #8
     d74:	8019      	strh	r1, [r3, #0]
	address_array[1] = flash_address;
     d76:	805a      	strh	r2, [r3, #2]
}
     d78:	4770      	bx	lr
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	2000009c 	.word	0x2000009c
     d80:	20000170 	.word	0x20000170
     d84:	20000018 	.word	0x20000018
     d88:	20000174 	.word	0x20000174

00000d8c <store_delivery_data>:
{
     d8c:	b530      	push	{r4, r5, lr}
     d8e:	b0a1      	sub	sp, #132	; 0x84
	page_size = flash_get_page_size(&FLASH_0);
     d90:	4c14      	ldr	r4, [pc, #80]	; (de4 <store_delivery_data+0x58>)
     d92:	0020      	movs	r0, r4
     d94:	4b14      	ldr	r3, [pc, #80]	; (de8 <store_delivery_data+0x5c>)
     d96:	4798      	blx	r3
     d98:	0005      	movs	r5, r0
	writes++;
     d9a:	4a14      	ldr	r2, [pc, #80]	; (dec <store_delivery_data+0x60>)
     d9c:	8813      	ldrh	r3, [r2, #0]
     d9e:	3301      	adds	r3, #1
     da0:	8013      	strh	r3, [r2, #0]
	split_to_8();
     da2:	4b13      	ldr	r3, [pc, #76]	; (df0 <store_delivery_data+0x64>)
     da4:	4798      	blx	r3
	storage_array[0] = button_array[0];
     da6:	4b13      	ldr	r3, [pc, #76]	; (df4 <store_delivery_data+0x68>)
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	466a      	mov	r2, sp
     dac:	7013      	strb	r3, [r2, #0]
	storage_array[1] = basal_rate[0];
     dae:	4b12      	ldr	r3, [pc, #72]	; (df8 <store_delivery_data+0x6c>)
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	7053      	strb	r3, [r2, #1]
	storage_array[2] = count[0];
     db4:	4b11      	ldr	r3, [pc, #68]	; (dfc <store_delivery_data+0x70>)
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	7093      	strb	r3, [r2, #2]
	storage_array[3] = write_array[0];
     dba:	4b11      	ldr	r3, [pc, #68]	; (e00 <store_delivery_data+0x74>)
     dbc:	781a      	ldrb	r2, [r3, #0]
     dbe:	4669      	mov	r1, sp
     dc0:	70ca      	strb	r2, [r1, #3]
	storage_array[4] = write_array[1];
     dc2:	785b      	ldrb	r3, [r3, #1]
     dc4:	710b      	strb	r3, [r1, #4]
	storage_array[5] = address_array[0];
     dc6:	4b0f      	ldr	r3, [pc, #60]	; (e04 <store_delivery_data+0x78>)
     dc8:	881a      	ldrh	r2, [r3, #0]
     dca:	714a      	strb	r2, [r1, #5]
	storage_array[6] = address_array[1];
     dcc:	885b      	ldrh	r3, [r3, #2]
     dce:	466a      	mov	r2, sp
     dd0:	718b      	strb	r3, [r1, #6]
	flash_write(&FLASH_0, flash_address, storage_array, page_size);
     dd2:	4b0d      	ldr	r3, [pc, #52]	; (e08 <store_delivery_data+0x7c>)
     dd4:	8819      	ldrh	r1, [r3, #0]
     dd6:	002b      	movs	r3, r5
     dd8:	0020      	movs	r0, r4
     dda:	4c0c      	ldr	r4, [pc, #48]	; (e0c <store_delivery_data+0x80>)
     ddc:	47a0      	blx	r4
}
     dde:	b021      	add	sp, #132	; 0x84
     de0:	bd30      	pop	{r4, r5, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	200000c4 	.word	0x200000c4
     de8:	00001491 	.word	0x00001491
     dec:	2000009c 	.word	0x2000009c
     df0:	00000d61 	.word	0x00000d61
     df4:	20000098 	.word	0x20000098
     df8:	2000001c 	.word	0x2000001c
     dfc:	200000a0 	.word	0x200000a0
     e00:	20000170 	.word	0x20000170
     e04:	20000174 	.word	0x20000174
     e08:	20000018 	.word	0x20000018
     e0c:	00001321 	.word	0x00001321

00000e10 <flash_initialise>:
{
     e10:	b510      	push	{r4, lr}
	flash_address = 0x4000;
     e12:	2180      	movs	r1, #128	; 0x80
     e14:	01c9      	lsls	r1, r1, #7
     e16:	4b04      	ldr	r3, [pc, #16]	; (e28 <flash_initialise+0x18>)
     e18:	8019      	strh	r1, [r3, #0]
	flash_erase(&FLASH_0, flash_address, 1);
     e1a:	2201      	movs	r2, #1
     e1c:	4803      	ldr	r0, [pc, #12]	; (e2c <flash_initialise+0x1c>)
     e1e:	4b04      	ldr	r3, [pc, #16]	; (e30 <flash_initialise+0x20>)
     e20:	4798      	blx	r3
	store_delivery_data();
     e22:	4b04      	ldr	r3, [pc, #16]	; (e34 <flash_initialise+0x24>)
     e24:	4798      	blx	r3
}
     e26:	bd10      	pop	{r4, pc}
     e28:	20000018 	.word	0x20000018
     e2c:	200000c4 	.word	0x200000c4
     e30:	000013e1 	.word	0x000013e1
     e34:	00000d8d 	.word	0x00000d8d

00000e38 <join_to_16>:

void join_to_16(void)
{
	writes = 0;
	writes = ((write_array[0] << 8) | write_array[1]);
     e38:	4907      	ldr	r1, [pc, #28]	; (e58 <join_to_16+0x20>)
     e3a:	780a      	ldrb	r2, [r1, #0]
     e3c:	0212      	lsls	r2, r2, #8
     e3e:	784b      	ldrb	r3, [r1, #1]
     e40:	4313      	orrs	r3, r2
     e42:	4a06      	ldr	r2, [pc, #24]	; (e5c <join_to_16+0x24>)
     e44:	8013      	strh	r3, [r2, #0]
	flash_address = 0;
	flash_address = ((address_array[0] << 8) | address_array[1]);
     e46:	4a06      	ldr	r2, [pc, #24]	; (e60 <join_to_16+0x28>)
     e48:	8813      	ldrh	r3, [r2, #0]
     e4a:	021b      	lsls	r3, r3, #8
     e4c:	8852      	ldrh	r2, [r2, #2]
     e4e:	4313      	orrs	r3, r2
     e50:	4a04      	ldr	r2, [pc, #16]	; (e64 <join_to_16+0x2c>)
     e52:	8013      	strh	r3, [r2, #0]
	
}
     e54:	4770      	bx	lr
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	20000170 	.word	0x20000170
     e5c:	2000009c 	.word	0x2000009c
     e60:	20000174 	.word	0x20000174
     e64:	20000018 	.word	0x20000018

00000e68 <get_delivery_data>:
{
     e68:	b510      	push	{r4, lr}
     e6a:	b0a0      	sub	sp, #128	; 0x80
	page_size = flash_get_page_size(&FLASH_0);
     e6c:	4c14      	ldr	r4, [pc, #80]	; (ec0 <get_delivery_data+0x58>)
     e6e:	0020      	movs	r0, r4
     e70:	4b14      	ldr	r3, [pc, #80]	; (ec4 <get_delivery_data+0x5c>)
     e72:	4798      	blx	r3
     e74:	0003      	movs	r3, r0
	flash_read(&FLASH_0, flash_address, storage_array, page_size);
     e76:	4a14      	ldr	r2, [pc, #80]	; (ec8 <get_delivery_data+0x60>)
     e78:	8811      	ldrh	r1, [r2, #0]
     e7a:	466a      	mov	r2, sp
     e7c:	0020      	movs	r0, r4
     e7e:	4c13      	ldr	r4, [pc, #76]	; (ecc <get_delivery_data+0x64>)
     e80:	47a0      	blx	r4
	button_array[0] = storage_array[0];
     e82:	466b      	mov	r3, sp
     e84:	781a      	ldrb	r2, [r3, #0]
     e86:	4b12      	ldr	r3, [pc, #72]	; (ed0 <get_delivery_data+0x68>)
     e88:	701a      	strb	r2, [r3, #0]
	basal_rate[0] = storage_array[1];
     e8a:	466b      	mov	r3, sp
     e8c:	785a      	ldrb	r2, [r3, #1]
     e8e:	4b11      	ldr	r3, [pc, #68]	; (ed4 <get_delivery_data+0x6c>)
     e90:	701a      	strb	r2, [r3, #0]
	count[0] = storage_array[2];
     e92:	466b      	mov	r3, sp
     e94:	789a      	ldrb	r2, [r3, #2]
     e96:	4b10      	ldr	r3, [pc, #64]	; (ed8 <get_delivery_data+0x70>)
     e98:	701a      	strb	r2, [r3, #0]
	write_array[0] = storage_array[3];
     e9a:	4b10      	ldr	r3, [pc, #64]	; (edc <get_delivery_data+0x74>)
     e9c:	466a      	mov	r2, sp
     e9e:	78d2      	ldrb	r2, [r2, #3]
     ea0:	701a      	strb	r2, [r3, #0]
	write_array[1] = storage_array[4];
     ea2:	466a      	mov	r2, sp
     ea4:	7912      	ldrb	r2, [r2, #4]
     ea6:	705a      	strb	r2, [r3, #1]
	address_array[0] = storage_array[5];
     ea8:	4b0d      	ldr	r3, [pc, #52]	; (ee0 <get_delivery_data+0x78>)
     eaa:	466a      	mov	r2, sp
     eac:	7952      	ldrb	r2, [r2, #5]
     eae:	801a      	strh	r2, [r3, #0]
	address_array[1] = storage_array[6];
     eb0:	466a      	mov	r2, sp
     eb2:	7992      	ldrb	r2, [r2, #6]
     eb4:	805a      	strh	r2, [r3, #2]
	join_to_16();
     eb6:	4b0b      	ldr	r3, [pc, #44]	; (ee4 <get_delivery_data+0x7c>)
     eb8:	4798      	blx	r3
}
     eba:	b020      	add	sp, #128	; 0x80
     ebc:	bd10      	pop	{r4, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	200000c4 	.word	0x200000c4
     ec4:	00001491 	.word	0x00001491
     ec8:	20000018 	.word	0x20000018
     ecc:	00001279 	.word	0x00001279
     ed0:	20000098 	.word	0x20000098
     ed4:	2000001c 	.word	0x2000001c
     ed8:	200000a0 	.word	0x200000a0
     edc:	20000170 	.word	0x20000170
     ee0:	20000174 	.word	0x20000174
     ee4:	00000e39 	.word	0x00000e39

00000ee8 <check_writes>:

void check_writes(void)
{
	if (writes < 7000)
     ee8:	4b1d      	ldr	r3, [pc, #116]	; (f60 <check_writes+0x78>)
     eea:	881b      	ldrh	r3, [r3, #0]
     eec:	4a1d      	ldr	r2, [pc, #116]	; (f64 <check_writes+0x7c>)
     eee:	4293      	cmp	r3, r2
     ef0:	d91d      	bls.n	f2e <check_writes+0x46>
	{
		flash_address = 0x4000;
	}
	else if (writes >= 7000 && writes < 14000)
     ef2:	491c      	ldr	r1, [pc, #112]	; (f64 <check_writes+0x7c>)
     ef4:	4a1c      	ldr	r2, [pc, #112]	; (f68 <check_writes+0x80>)
     ef6:	189a      	adds	r2, r3, r2
     ef8:	b292      	uxth	r2, r2
     efa:	428a      	cmp	r2, r1
     efc:	d91c      	bls.n	f38 <check_writes+0x50>
	{
		flash_address = 0x4100;
	}
	else if (writes >= 14000 && writes < 21000)
     efe:	4919      	ldr	r1, [pc, #100]	; (f64 <check_writes+0x7c>)
     f00:	4a1a      	ldr	r2, [pc, #104]	; (f6c <check_writes+0x84>)
     f02:	189a      	adds	r2, r3, r2
     f04:	b292      	uxth	r2, r2
     f06:	428a      	cmp	r2, r1
     f08:	d91b      	bls.n	f42 <check_writes+0x5a>
	{
		flash_address = 0x4200;
	}
	else if (writes >= 21000 && writes < 28000)
     f0a:	4916      	ldr	r1, [pc, #88]	; (f64 <check_writes+0x7c>)
     f0c:	4a18      	ldr	r2, [pc, #96]	; (f70 <check_writes+0x88>)
     f0e:	189a      	adds	r2, r3, r2
     f10:	b292      	uxth	r2, r2
     f12:	428a      	cmp	r2, r1
     f14:	d91a      	bls.n	f4c <check_writes+0x64>
	{
		flash_address = 0x4300;
	}
	else if (writes >= 28000 && writes < 35000)
     f16:	4a17      	ldr	r2, [pc, #92]	; (f74 <check_writes+0x8c>)
     f18:	4694      	mov	ip, r2
     f1a:	4463      	add	r3, ip
     f1c:	4a11      	ldr	r2, [pc, #68]	; (f64 <check_writes+0x7c>)
     f1e:	b29b      	uxth	r3, r3
     f20:	4293      	cmp	r3, r2
     f22:	d918      	bls.n	f56 <check_writes+0x6e>
	{
		flash_address = 0x4400;
	}
	else
	{
		flash_address = 0x4500;
     f24:	228a      	movs	r2, #138	; 0x8a
     f26:	01d2      	lsls	r2, r2, #7
     f28:	4b13      	ldr	r3, [pc, #76]	; (f78 <check_writes+0x90>)
     f2a:	801a      	strh	r2, [r3, #0]
	}
     f2c:	e003      	b.n	f36 <check_writes+0x4e>
		flash_address = 0x4000;
     f2e:	2280      	movs	r2, #128	; 0x80
     f30:	01d2      	lsls	r2, r2, #7
     f32:	4b11      	ldr	r3, [pc, #68]	; (f78 <check_writes+0x90>)
     f34:	801a      	strh	r2, [r3, #0]
     f36:	4770      	bx	lr
		flash_address = 0x4100;
     f38:	2282      	movs	r2, #130	; 0x82
     f3a:	01d2      	lsls	r2, r2, #7
     f3c:	4b0e      	ldr	r3, [pc, #56]	; (f78 <check_writes+0x90>)
     f3e:	801a      	strh	r2, [r3, #0]
     f40:	e7f9      	b.n	f36 <check_writes+0x4e>
		flash_address = 0x4200;
     f42:	2284      	movs	r2, #132	; 0x84
     f44:	01d2      	lsls	r2, r2, #7
     f46:	4b0c      	ldr	r3, [pc, #48]	; (f78 <check_writes+0x90>)
     f48:	801a      	strh	r2, [r3, #0]
     f4a:	e7f4      	b.n	f36 <check_writes+0x4e>
		flash_address = 0x4300;
     f4c:	2286      	movs	r2, #134	; 0x86
     f4e:	01d2      	lsls	r2, r2, #7
     f50:	4b09      	ldr	r3, [pc, #36]	; (f78 <check_writes+0x90>)
     f52:	801a      	strh	r2, [r3, #0]
     f54:	e7ef      	b.n	f36 <check_writes+0x4e>
		flash_address = 0x4400;
     f56:	2288      	movs	r2, #136	; 0x88
     f58:	01d2      	lsls	r2, r2, #7
     f5a:	4b07      	ldr	r3, [pc, #28]	; (f78 <check_writes+0x90>)
     f5c:	801a      	strh	r2, [r3, #0]
     f5e:	e7ea      	b.n	f36 <check_writes+0x4e>
     f60:	2000009c 	.word	0x2000009c
     f64:	00001b57 	.word	0x00001b57
     f68:	ffffe4a8 	.word	0xffffe4a8
     f6c:	ffffc950 	.word	0xffffc950
     f70:	ffffadf8 	.word	0xffffadf8
     f74:	ffff92a0 	.word	0xffff92a0
     f78:	20000018 	.word	0x20000018

00000f7c <adc_sync_init>:
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	0004      	movs	r4, r0
     f80:	000d      	movs	r5, r1
     f82:	2800      	cmp	r0, #0
     f84:	d00c      	beq.n	fa0 <adc_sync_init+0x24>
     f86:	0008      	movs	r0, r1
     f88:	1e43      	subs	r3, r0, #1
     f8a:	4198      	sbcs	r0, r3
     f8c:	b2c0      	uxtb	r0, r0
     f8e:	2239      	movs	r2, #57	; 0x39
     f90:	4904      	ldr	r1, [pc, #16]	; (fa4 <adc_sync_init+0x28>)
     f92:	4b05      	ldr	r3, [pc, #20]	; (fa8 <adc_sync_init+0x2c>)
     f94:	4798      	blx	r3
     f96:	0029      	movs	r1, r5
     f98:	0020      	movs	r0, r4
     f9a:	4b04      	ldr	r3, [pc, #16]	; (fac <adc_sync_init+0x30>)
     f9c:	4798      	blx	r3
     f9e:	bd70      	pop	{r4, r5, r6, pc}
     fa0:	2000      	movs	r0, #0
     fa2:	e7f4      	b.n	f8e <adc_sync_init+0x12>
     fa4:	00003044 	.word	0x00003044
     fa8:	000019c9 	.word	0x000019c9
     fac:	00001b41 	.word	0x00001b41

00000fb0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fb0:	f3ef 8310 	mrs	r3, PRIMASK
     fb4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     fb6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     fb8:	f3bf 8f5f 	dmb	sy
     fbc:	4770      	bx	lr

00000fbe <atomic_leave_critical>:
     fbe:	f3bf 8f5f 	dmb	sy
     fc2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     fc4:	f383 8810 	msr	PRIMASK, r3
     fc8:	4770      	bx	lr
	...

00000fcc <dac_sync_init>:
     fcc:	b570      	push	{r4, r5, r6, lr}
     fce:	0005      	movs	r5, r0
     fd0:	000c      	movs	r4, r1
     fd2:	2800      	cmp	r0, #0
     fd4:	d011      	beq.n	ffa <dac_sync_init+0x2e>
     fd6:	0008      	movs	r0, r1
     fd8:	1e43      	subs	r3, r0, #1
     fda:	4198      	sbcs	r0, r3
     fdc:	b2c0      	uxtb	r0, r0
     fde:	2232      	movs	r2, #50	; 0x32
     fe0:	4907      	ldr	r1, [pc, #28]	; (1000 <dac_sync_init+0x34>)
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <dac_sync_init+0x38>)
     fe4:	4798      	blx	r3
     fe6:	0021      	movs	r1, r4
     fe8:	0028      	movs	r0, r5
     fea:	4b07      	ldr	r3, [pc, #28]	; (1008 <dac_sync_init+0x3c>)
     fec:	4798      	blx	r3
     fee:	2800      	cmp	r0, #0
     ff0:	d102      	bne.n	ff8 <dac_sync_init+0x2c>
     ff2:	2300      	movs	r3, #0
     ff4:	606b      	str	r3, [r5, #4]
     ff6:	60ab      	str	r3, [r5, #8]
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	2000      	movs	r0, #0
     ffc:	e7ef      	b.n	fde <dac_sync_init+0x12>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00003060 	.word	0x00003060
    1004:	000019c9 	.word	0x000019c9
    1008:	00001c15 	.word	0x00001c15

0000100c <delay_init>:
    100c:	b510      	push	{r4, lr}
    100e:	4b02      	ldr	r3, [pc, #8]	; (1018 <delay_init+0xc>)
    1010:	6018      	str	r0, [r3, #0]
    1012:	4b02      	ldr	r3, [pc, #8]	; (101c <delay_init+0x10>)
    1014:	4798      	blx	r3
    1016:	bd10      	pop	{r4, pc}
    1018:	20000054 	.word	0x20000054
    101c:	000027b1 	.word	0x000027b1

00001020 <delay_us>:
    1020:	b510      	push	{r4, lr}
    1022:	4b04      	ldr	r3, [pc, #16]	; (1034 <delay_us+0x14>)
    1024:	681c      	ldr	r4, [r3, #0]
    1026:	4b04      	ldr	r3, [pc, #16]	; (1038 <delay_us+0x18>)
    1028:	4798      	blx	r3
    102a:	0001      	movs	r1, r0
    102c:	0020      	movs	r0, r4
    102e:	4b03      	ldr	r3, [pc, #12]	; (103c <delay_us+0x1c>)
    1030:	4798      	blx	r3
    1032:	bd10      	pop	{r4, pc}
    1034:	20000054 	.word	0x20000054
    1038:	00001b81 	.word	0x00001b81
    103c:	000027c5 	.word	0x000027c5

00001040 <delay_ms>:
    1040:	b510      	push	{r4, lr}
    1042:	4b04      	ldr	r3, [pc, #16]	; (1054 <delay_ms+0x14>)
    1044:	681c      	ldr	r4, [r3, #0]
    1046:	4b04      	ldr	r3, [pc, #16]	; (1058 <delay_ms+0x18>)
    1048:	4798      	blx	r3
    104a:	0001      	movs	r1, r0
    104c:	0020      	movs	r0, r4
    104e:	4b03      	ldr	r3, [pc, #12]	; (105c <delay_ms+0x1c>)
    1050:	4798      	blx	r3
    1052:	bd10      	pop	{r4, pc}
    1054:	20000054 	.word	0x20000054
    1058:	00001b99 	.word	0x00001b99
    105c:	000027c5 	.word	0x000027c5

00001060 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1062:	4b13      	ldr	r3, [pc, #76]	; (10b0 <process_ext_irq+0x50>)
    1064:	69d9      	ldr	r1, [r3, #28]
    1066:	4288      	cmp	r0, r1
    1068:	d005      	beq.n	1076 <process_ext_irq+0x16>
    106a:	2203      	movs	r2, #3
    106c:	2706      	movs	r7, #6
    106e:	2400      	movs	r4, #0
    1070:	26ff      	movs	r6, #255	; 0xff
    1072:	001d      	movs	r5, r3
    1074:	e016      	b.n	10a4 <process_ext_irq+0x44>
    1076:	2303      	movs	r3, #3
			if (ext_irqs[middle].cb) {
    1078:	00db      	lsls	r3, r3, #3
    107a:	4a0d      	ldr	r2, [pc, #52]	; (10b0 <process_ext_irq+0x50>)
    107c:	589b      	ldr	r3, [r3, r2]
    107e:	2b00      	cmp	r3, #0
    1080:	d000      	beq.n	1084 <process_ext_irq+0x24>
				ext_irqs[middle].cb();
    1082:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    1084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			upper = middle - 1;
    1086:	3a01      	subs	r2, #1
    1088:	b2d7      	uxtb	r7, r2
	while (upper >= lower) {
    108a:	42a7      	cmp	r7, r4
    108c:	d3fa      	bcc.n	1084 <process_ext_irq+0x24>
		middle = (upper + lower) >> 1;
    108e:	193b      	adds	r3, r7, r4
    1090:	105b      	asrs	r3, r3, #1
    1092:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1094:	2a05      	cmp	r2, #5
    1096:	d8f5      	bhi.n	1084 <process_ext_irq+0x24>
    1098:	4033      	ands	r3, r6
		if (ext_irqs[middle].pin == pin) {
    109a:	00d9      	lsls	r1, r3, #3
    109c:	1869      	adds	r1, r5, r1
    109e:	6849      	ldr	r1, [r1, #4]
    10a0:	4281      	cmp	r1, r0
    10a2:	d0e9      	beq.n	1078 <process_ext_irq+0x18>
		if (ext_irqs[middle].pin < pin) {
    10a4:	4288      	cmp	r0, r1
    10a6:	d9ee      	bls.n	1086 <process_ext_irq+0x26>
			lower = middle + 1;
    10a8:	3201      	adds	r2, #1
    10aa:	b2d4      	uxtb	r4, r2
    10ac:	e7ed      	b.n	108a <process_ext_irq+0x2a>
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	20000058 	.word	0x20000058

000010b4 <ext_irq_init>:
{
    10b4:	b510      	push	{r4, lr}
    10b6:	4b07      	ldr	r3, [pc, #28]	; (10d4 <ext_irq_init+0x20>)
    10b8:	0018      	movs	r0, r3
    10ba:	3030      	adds	r0, #48	; 0x30
		ext_irqs[i].pin = 0xFFFFFFFF;
    10bc:	2101      	movs	r1, #1
    10be:	4249      	negs	r1, r1
		ext_irqs[i].cb  = NULL;
    10c0:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    10c2:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    10c4:	601a      	str	r2, [r3, #0]
    10c6:	3308      	adds	r3, #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10c8:	4283      	cmp	r3, r0
    10ca:	d1fa      	bne.n	10c2 <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    10cc:	4802      	ldr	r0, [pc, #8]	; (10d8 <ext_irq_init+0x24>)
    10ce:	4b03      	ldr	r3, [pc, #12]	; (10dc <ext_irq_init+0x28>)
    10d0:	4798      	blx	r3
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	20000058 	.word	0x20000058
    10d8:	00001061 	.word	0x00001061
    10dc:	00001c41 	.word	0x00001c41

000010e0 <ext_irq_register>:
{
    10e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10e2:	46de      	mov	lr, fp
    10e4:	4657      	mov	r7, sl
    10e6:	464e      	mov	r6, r9
    10e8:	4645      	mov	r5, r8
    10ea:	b5e0      	push	{r5, r6, r7, lr}
		if (ext_irqs[i].pin == pin) {
    10ec:	4b32      	ldr	r3, [pc, #200]	; (11b8 <ext_irq_register+0xd8>)
    10ee:	685b      	ldr	r3, [r3, #4]
    10f0:	4298      	cmp	r0, r3
    10f2:	d01d      	beq.n	1130 <ext_irq_register+0x50>
    10f4:	4a30      	ldr	r2, [pc, #192]	; (11b8 <ext_irq_register+0xd8>)
    10f6:	2301      	movs	r3, #1
    10f8:	001c      	movs	r4, r3
    10fa:	68d5      	ldr	r5, [r2, #12]
    10fc:	4285      	cmp	r5, r0
    10fe:	d018      	beq.n	1132 <ext_irq_register+0x52>
    1100:	3301      	adds	r3, #1
    1102:	3208      	adds	r2, #8
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1104:	2b06      	cmp	r3, #6
    1106:	d1f7      	bne.n	10f8 <ext_irq_register+0x18>
	if (NULL == cb) {
    1108:	2900      	cmp	r1, #0
    110a:	d04d      	beq.n	11a8 <ext_irq_register+0xc8>
			if (NULL == ext_irqs[i].cb) {
    110c:	4b2a      	ldr	r3, [pc, #168]	; (11b8 <ext_irq_register+0xd8>)
    110e:	681a      	ldr	r2, [r3, #0]
    1110:	2301      	movs	r3, #1
    1112:	2a00      	cmp	r2, #0
    1114:	d04b      	beq.n	11ae <ext_irq_register+0xce>
    1116:	4c28      	ldr	r4, [pc, #160]	; (11b8 <ext_irq_register+0xd8>)
    1118:	b2de      	uxtb	r6, r3
    111a:	001d      	movs	r5, r3
    111c:	00da      	lsls	r2, r3, #3
    111e:	5912      	ldr	r2, [r2, r4]
    1120:	2a00      	cmp	r2, #0
    1122:	d00f      	beq.n	1144 <ext_irq_register+0x64>
    1124:	3301      	adds	r3, #1
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1126:	2b06      	cmp	r3, #6
    1128:	d1f6      	bne.n	1118 <ext_irq_register+0x38>
		return ERR_INVALID_ARG;
    112a:	200d      	movs	r0, #13
    112c:	4240      	negs	r0, r0
    112e:	e035      	b.n	119c <ext_irq_register+0xbc>
		if (ext_irqs[i].pin == pin) {
    1130:	2400      	movs	r4, #0
			ext_irqs[i].cb = cb;
    1132:	00e4      	lsls	r4, r4, #3
    1134:	4b20      	ldr	r3, [pc, #128]	; (11b8 <ext_irq_register+0xd8>)
    1136:	50e1      	str	r1, [r4, r3]
	if (NULL == cb) {
    1138:	2900      	cmp	r1, #0
    113a:	d12c      	bne.n	1196 <ext_irq_register+0xb6>
		return _ext_irq_enable(pin, false);
    113c:	2100      	movs	r1, #0
    113e:	4b1f      	ldr	r3, [pc, #124]	; (11bc <ext_irq_register+0xdc>)
    1140:	4798      	blx	r3
    1142:	e02b      	b.n	119c <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    1144:	4b1c      	ldr	r3, [pc, #112]	; (11b8 <ext_irq_register+0xd8>)
    1146:	00ed      	lsls	r5, r5, #3
    1148:	50e9      	str	r1, [r5, r3]
				ext_irqs[i].pin = pin;
    114a:	195d      	adds	r5, r3, r5
    114c:	6068      	str	r0, [r5, #4]
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    114e:	2e05      	cmp	r6, #5
    1150:	d821      	bhi.n	1196 <ext_irq_register+0xb6>
				ext_irqs[i] = tmp;
    1152:	4d19      	ldr	r5, [pc, #100]	; (11b8 <ext_irq_register+0xd8>)
    1154:	00f7      	lsls	r7, r6, #3
    1156:	46ba      	mov	sl, r7
    1158:	44aa      	add	sl, r5
    115a:	002b      	movs	r3, r5
    115c:	3530      	adds	r5, #48	; 0x30
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    115e:	46bb      	mov	fp, r7
    1160:	4654      	mov	r4, sl
				ext_irqs[j] = ext_irqs[i];
    1162:	4699      	mov	r9, r3
    1164:	e002      	b.n	116c <ext_irq_register+0x8c>
    1166:	3308      	adds	r3, #8
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1168:	429d      	cmp	r5, r3
    116a:	d014      	beq.n	1196 <ext_irq_register+0xb6>
    116c:	001a      	movs	r2, r3
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    116e:	6859      	ldr	r1, [r3, #4]
    1170:	6866      	ldr	r6, [r4, #4]
    1172:	428e      	cmp	r6, r1
    1174:	d2f7      	bcs.n	1166 <ext_irq_register+0x86>
    1176:	3101      	adds	r1, #1
    1178:	d0f5      	beq.n	1166 <ext_irq_register+0x86>
				struct ext_irq tmp = ext_irqs[j];
    117a:	6819      	ldr	r1, [r3, #0]
    117c:	4688      	mov	r8, r1
    117e:	6859      	ldr	r1, [r3, #4]
    1180:	468c      	mov	ip, r1
				ext_irqs[j] = ext_irqs[i];
    1182:	4649      	mov	r1, r9
    1184:	4459      	add	r1, fp
    1186:	c9c0      	ldmia	r1!, {r6, r7}
    1188:	c2c0      	stmia	r2!, {r6, r7}
				ext_irqs[i] = tmp;
    118a:	4642      	mov	r2, r8
    118c:	4651      	mov	r1, sl
    118e:	600a      	str	r2, [r1, #0]
    1190:	4662      	mov	r2, ip
    1192:	604a      	str	r2, [r1, #4]
    1194:	e7e7      	b.n	1166 <ext_irq_register+0x86>
	return _ext_irq_enable(pin, true);
    1196:	2101      	movs	r1, #1
    1198:	4b08      	ldr	r3, [pc, #32]	; (11bc <ext_irq_register+0xdc>)
    119a:	4798      	blx	r3
}
    119c:	bc3c      	pop	{r2, r3, r4, r5}
    119e:	4690      	mov	r8, r2
    11a0:	4699      	mov	r9, r3
    11a2:	46a2      	mov	sl, r4
    11a4:	46ab      	mov	fp, r5
    11a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    11a8:	200d      	movs	r0, #13
    11aa:	4240      	negs	r0, r0
    11ac:	e7f6      	b.n	119c <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    11ae:	4b02      	ldr	r3, [pc, #8]	; (11b8 <ext_irq_register+0xd8>)
    11b0:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
    11b2:	6058      	str	r0, [r3, #4]
    11b4:	2600      	movs	r6, #0
    11b6:	e7cc      	b.n	1152 <ext_irq_register+0x72>
    11b8:	20000058 	.word	0x20000058
    11bc:	00001ce1 	.word	0x00001ce1

000011c0 <ext_irq_enable>:
{
    11c0:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
    11c2:	2101      	movs	r1, #1
    11c4:	4b01      	ldr	r3, [pc, #4]	; (11cc <ext_irq_enable+0xc>)
    11c6:	4798      	blx	r3
}
    11c8:	bd10      	pop	{r4, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	00001ce1 	.word	0x00001ce1

000011d0 <ext_irq_disable>:
{
    11d0:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, false);
    11d2:	2100      	movs	r1, #0
    11d4:	4b01      	ldr	r3, [pc, #4]	; (11dc <ext_irq_disable+0xc>)
    11d6:	4798      	blx	r3
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00001ce1 	.word	0x00001ce1

000011e0 <flash_ready>:
    11e0:	b510      	push	{r4, lr}
    11e2:	6943      	ldr	r3, [r0, #20]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d000      	beq.n	11ea <flash_ready+0xa>
    11e8:	4798      	blx	r3
    11ea:	bd10      	pop	{r4, pc}

000011ec <flash_error>:
    11ec:	b510      	push	{r4, lr}
    11ee:	6983      	ldr	r3, [r0, #24]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d000      	beq.n	11f6 <flash_error+0xa>
    11f4:	4798      	blx	r3
    11f6:	bd10      	pop	{r4, pc}

000011f8 <flash_is_address_aligned>:
    11f8:	b570      	push	{r4, r5, r6, lr}
    11fa:	0004      	movs	r4, r0
    11fc:	000d      	movs	r5, r1
    11fe:	1e43      	subs	r3, r0, #1
    1200:	4198      	sbcs	r0, r3
    1202:	b2c0      	uxtb	r0, r0
    1204:	2218      	movs	r2, #24
    1206:	32ff      	adds	r2, #255	; 0xff
    1208:	4906      	ldr	r1, [pc, #24]	; (1224 <flash_is_address_aligned+0x2c>)
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <flash_is_address_aligned+0x30>)
    120c:	4798      	blx	r3
    120e:	0020      	movs	r0, r4
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <flash_is_address_aligned+0x34>)
    1212:	4798      	blx	r3
    1214:	3801      	subs	r0, #1
    1216:	4205      	tst	r5, r0
    1218:	d101      	bne.n	121e <flash_is_address_aligned+0x26>
    121a:	2000      	movs	r0, #0
    121c:	bd70      	pop	{r4, r5, r6, pc}
    121e:	200e      	movs	r0, #14
    1220:	4240      	negs	r0, r0
    1222:	e7fb      	b.n	121c <flash_is_address_aligned+0x24>
    1224:	0000307c 	.word	0x0000307c
    1228:	000019c9 	.word	0x000019c9
    122c:	00001f41 	.word	0x00001f41

00001230 <flash_init>:
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	0005      	movs	r5, r0
    1234:	000c      	movs	r4, r1
    1236:	2800      	cmp	r0, #0
    1238:	d012      	beq.n	1260 <flash_init+0x30>
    123a:	0008      	movs	r0, r1
    123c:	1e43      	subs	r3, r0, #1
    123e:	4198      	sbcs	r0, r3
    1240:	b2c0      	uxtb	r0, r0
    1242:	2238      	movs	r2, #56	; 0x38
    1244:	4907      	ldr	r1, [pc, #28]	; (1264 <flash_init+0x34>)
    1246:	4b08      	ldr	r3, [pc, #32]	; (1268 <flash_init+0x38>)
    1248:	4798      	blx	r3
    124a:	0021      	movs	r1, r4
    124c:	0028      	movs	r0, r5
    124e:	4b07      	ldr	r3, [pc, #28]	; (126c <flash_init+0x3c>)
    1250:	4798      	blx	r3
    1252:	2800      	cmp	r0, #0
    1254:	d103      	bne.n	125e <flash_init+0x2e>
    1256:	4b06      	ldr	r3, [pc, #24]	; (1270 <flash_init+0x40>)
    1258:	602b      	str	r3, [r5, #0]
    125a:	4b06      	ldr	r3, [pc, #24]	; (1274 <flash_init+0x44>)
    125c:	606b      	str	r3, [r5, #4]
    125e:	bd70      	pop	{r4, r5, r6, pc}
    1260:	2000      	movs	r0, #0
    1262:	e7ee      	b.n	1242 <flash_init+0x12>
    1264:	0000307c 	.word	0x0000307c
    1268:	000019c9 	.word	0x000019c9
    126c:	00001ee1 	.word	0x00001ee1
    1270:	000011e1 	.word	0x000011e1
    1274:	000011ed 	.word	0x000011ed

00001278 <flash_read>:
    1278:	b5f0      	push	{r4, r5, r6, r7, lr}
    127a:	46ce      	mov	lr, r9
    127c:	b500      	push	{lr}
    127e:	b082      	sub	sp, #8
    1280:	0004      	movs	r4, r0
    1282:	000f      	movs	r7, r1
    1284:	0016      	movs	r6, r2
    1286:	001d      	movs	r5, r3
    1288:	2800      	cmp	r0, #0
    128a:	d018      	beq.n	12be <flash_read+0x46>
    128c:	2a00      	cmp	r2, #0
    128e:	d035      	beq.n	12fc <flash_read+0x84>
    1290:	2001      	movs	r0, #1
    1292:	2b00      	cmp	r3, #0
    1294:	d114      	bne.n	12c0 <flash_read+0x48>
    1296:	2256      	movs	r2, #86	; 0x56
    1298:	491c      	ldr	r1, [pc, #112]	; (130c <flash_read+0x94>)
    129a:	2000      	movs	r0, #0
    129c:	4b1c      	ldr	r3, [pc, #112]	; (1310 <flash_read+0x98>)
    129e:	4798      	blx	r3
    12a0:	9401      	str	r4, [sp, #4]
    12a2:	0020      	movs	r0, r4
    12a4:	4b1b      	ldr	r3, [pc, #108]	; (1314 <flash_read+0x9c>)
    12a6:	4798      	blx	r3
    12a8:	4681      	mov	r9, r0
    12aa:	0020      	movs	r0, r4
    12ac:	4b1a      	ldr	r3, [pc, #104]	; (1318 <flash_read+0xa0>)
    12ae:	4798      	blx	r3
    12b0:	464b      	mov	r3, r9
    12b2:	4358      	muls	r0, r3
    12b4:	4287      	cmp	r7, r0
    12b6:	d916      	bls.n	12e6 <flash_read+0x6e>
    12b8:	200e      	movs	r0, #14
    12ba:	4240      	negs	r0, r0
    12bc:	e01a      	b.n	12f4 <flash_read+0x7c>
    12be:	2000      	movs	r0, #0
    12c0:	2256      	movs	r2, #86	; 0x56
    12c2:	4912      	ldr	r1, [pc, #72]	; (130c <flash_read+0x94>)
    12c4:	4b12      	ldr	r3, [pc, #72]	; (1310 <flash_read+0x98>)
    12c6:	4798      	blx	r3
    12c8:	9401      	str	r4, [sp, #4]
    12ca:	0020      	movs	r0, r4
    12cc:	4b11      	ldr	r3, [pc, #68]	; (1314 <flash_read+0x9c>)
    12ce:	4798      	blx	r3
    12d0:	4681      	mov	r9, r0
    12d2:	0020      	movs	r0, r4
    12d4:	4b10      	ldr	r3, [pc, #64]	; (1318 <flash_read+0xa0>)
    12d6:	4798      	blx	r3
    12d8:	464b      	mov	r3, r9
    12da:	4358      	muls	r0, r3
    12dc:	42b8      	cmp	r0, r7
    12de:	d30f      	bcc.n	1300 <flash_read+0x88>
    12e0:	19eb      	adds	r3, r5, r7
    12e2:	4298      	cmp	r0, r3
    12e4:	d30f      	bcc.n	1306 <flash_read+0x8e>
    12e6:	002b      	movs	r3, r5
    12e8:	0032      	movs	r2, r6
    12ea:	0039      	movs	r1, r7
    12ec:	9801      	ldr	r0, [sp, #4]
    12ee:	4c0b      	ldr	r4, [pc, #44]	; (131c <flash_read+0xa4>)
    12f0:	47a0      	blx	r4
    12f2:	2000      	movs	r0, #0
    12f4:	b002      	add	sp, #8
    12f6:	bc04      	pop	{r2}
    12f8:	4691      	mov	r9, r2
    12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12fc:	2000      	movs	r0, #0
    12fe:	e7df      	b.n	12c0 <flash_read+0x48>
    1300:	200e      	movs	r0, #14
    1302:	4240      	negs	r0, r0
    1304:	e7f6      	b.n	12f4 <flash_read+0x7c>
    1306:	200e      	movs	r0, #14
    1308:	4240      	negs	r0, r0
    130a:	e7f3      	b.n	12f4 <flash_read+0x7c>
    130c:	0000307c 	.word	0x0000307c
    1310:	000019c9 	.word	0x000019c9
    1314:	00001f41 	.word	0x00001f41
    1318:	00001f45 	.word	0x00001f45
    131c:	00001f4b 	.word	0x00001f4b

00001320 <flash_write>:
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	46c6      	mov	lr, r8
    1324:	b500      	push	{lr}
    1326:	b082      	sub	sp, #8
    1328:	0004      	movs	r4, r0
    132a:	000d      	movs	r5, r1
    132c:	0017      	movs	r7, r2
    132e:	001e      	movs	r6, r3
    1330:	2800      	cmp	r0, #0
    1332:	d018      	beq.n	1366 <flash_write+0x46>
    1334:	2a00      	cmp	r2, #0
    1336:	d03c      	beq.n	13b2 <flash_write+0x92>
    1338:	2001      	movs	r0, #1
    133a:	2b00      	cmp	r3, #0
    133c:	d114      	bne.n	1368 <flash_write+0x48>
    133e:	226a      	movs	r2, #106	; 0x6a
    1340:	4921      	ldr	r1, [pc, #132]	; (13c8 <flash_write+0xa8>)
    1342:	2000      	movs	r0, #0
    1344:	4b21      	ldr	r3, [pc, #132]	; (13cc <flash_write+0xac>)
    1346:	4798      	blx	r3
    1348:	9401      	str	r4, [sp, #4]
    134a:	0020      	movs	r0, r4
    134c:	4b20      	ldr	r3, [pc, #128]	; (13d0 <flash_write+0xb0>)
    134e:	4798      	blx	r3
    1350:	4680      	mov	r8, r0
    1352:	0020      	movs	r0, r4
    1354:	4b1f      	ldr	r3, [pc, #124]	; (13d4 <flash_write+0xb4>)
    1356:	4798      	blx	r3
    1358:	4643      	mov	r3, r8
    135a:	4358      	muls	r0, r3
    135c:	4285      	cmp	r5, r0
    135e:	d916      	bls.n	138e <flash_write+0x6e>
    1360:	200e      	movs	r0, #14
    1362:	4240      	negs	r0, r0
    1364:	e021      	b.n	13aa <flash_write+0x8a>
    1366:	2000      	movs	r0, #0
    1368:	226a      	movs	r2, #106	; 0x6a
    136a:	4917      	ldr	r1, [pc, #92]	; (13c8 <flash_write+0xa8>)
    136c:	4b17      	ldr	r3, [pc, #92]	; (13cc <flash_write+0xac>)
    136e:	4798      	blx	r3
    1370:	9401      	str	r4, [sp, #4]
    1372:	0020      	movs	r0, r4
    1374:	4b16      	ldr	r3, [pc, #88]	; (13d0 <flash_write+0xb0>)
    1376:	4798      	blx	r3
    1378:	4680      	mov	r8, r0
    137a:	0020      	movs	r0, r4
    137c:	4b15      	ldr	r3, [pc, #84]	; (13d4 <flash_write+0xb4>)
    137e:	4798      	blx	r3
    1380:	4643      	mov	r3, r8
    1382:	4358      	muls	r0, r3
    1384:	42a8      	cmp	r0, r5
    1386:	d316      	bcc.n	13b6 <flash_write+0x96>
    1388:	1973      	adds	r3, r6, r5
    138a:	4298      	cmp	r0, r3
    138c:	d316      	bcc.n	13bc <flash_write+0x9c>
    138e:	0029      	movs	r1, r5
    1390:	9c01      	ldr	r4, [sp, #4]
    1392:	0020      	movs	r0, r4
    1394:	4b10      	ldr	r3, [pc, #64]	; (13d8 <flash_write+0xb8>)
    1396:	4798      	blx	r3
    1398:	2800      	cmp	r0, #0
    139a:	d112      	bne.n	13c2 <flash_write+0xa2>
    139c:	0033      	movs	r3, r6
    139e:	003a      	movs	r2, r7
    13a0:	0029      	movs	r1, r5
    13a2:	0020      	movs	r0, r4
    13a4:	4c0d      	ldr	r4, [pc, #52]	; (13dc <flash_write+0xbc>)
    13a6:	47a0      	blx	r4
    13a8:	2000      	movs	r0, #0
    13aa:	b002      	add	sp, #8
    13ac:	bc04      	pop	{r2}
    13ae:	4690      	mov	r8, r2
    13b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13b2:	2000      	movs	r0, #0
    13b4:	e7d8      	b.n	1368 <flash_write+0x48>
    13b6:	200e      	movs	r0, #14
    13b8:	4240      	negs	r0, r0
    13ba:	e7f6      	b.n	13aa <flash_write+0x8a>
    13bc:	200e      	movs	r0, #14
    13be:	4240      	negs	r0, r0
    13c0:	e7f3      	b.n	13aa <flash_write+0x8a>
    13c2:	2011      	movs	r0, #17
    13c4:	4240      	negs	r0, r0
    13c6:	e7f0      	b.n	13aa <flash_write+0x8a>
    13c8:	0000307c 	.word	0x0000307c
    13cc:	000019c9 	.word	0x000019c9
    13d0:	00001f41 	.word	0x00001f41
    13d4:	00001f45 	.word	0x00001f45
    13d8:	00002185 	.word	0x00002185
    13dc:	00001f9d 	.word	0x00001f9d

000013e0 <flash_erase>:
    13e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e2:	b083      	sub	sp, #12
    13e4:	0004      	movs	r4, r0
    13e6:	000d      	movs	r5, r1
    13e8:	0016      	movs	r6, r2
    13ea:	2800      	cmp	r0, #0
    13ec:	d017      	beq.n	141e <flash_erase+0x3e>
    13ee:	2001      	movs	r0, #1
    13f0:	2a00      	cmp	r2, #0
    13f2:	d115      	bne.n	1420 <flash_erase+0x40>
    13f4:	229a      	movs	r2, #154	; 0x9a
    13f6:	491f      	ldr	r1, [pc, #124]	; (1474 <flash_erase+0x94>)
    13f8:	2000      	movs	r0, #0
    13fa:	4b1f      	ldr	r3, [pc, #124]	; (1478 <flash_erase+0x98>)
    13fc:	4798      	blx	r3
    13fe:	9401      	str	r4, [sp, #4]
    1400:	0020      	movs	r0, r4
    1402:	4b1e      	ldr	r3, [pc, #120]	; (147c <flash_erase+0x9c>)
    1404:	4798      	blx	r3
    1406:	9000      	str	r0, [sp, #0]
    1408:	0020      	movs	r0, r4
    140a:	4b1d      	ldr	r3, [pc, #116]	; (1480 <flash_erase+0xa0>)
    140c:	4798      	blx	r3
    140e:	0007      	movs	r7, r0
    1410:	0029      	movs	r1, r5
    1412:	0020      	movs	r0, r4
    1414:	4b1b      	ldr	r3, [pc, #108]	; (1484 <flash_erase+0xa4>)
    1416:	4798      	blx	r3
    1418:	2800      	cmp	r0, #0
    141a:	d016      	beq.n	144a <flash_erase+0x6a>
    141c:	e022      	b.n	1464 <flash_erase+0x84>
    141e:	2000      	movs	r0, #0
    1420:	229a      	movs	r2, #154	; 0x9a
    1422:	4914      	ldr	r1, [pc, #80]	; (1474 <flash_erase+0x94>)
    1424:	4b14      	ldr	r3, [pc, #80]	; (1478 <flash_erase+0x98>)
    1426:	4798      	blx	r3
    1428:	9401      	str	r4, [sp, #4]
    142a:	0020      	movs	r0, r4
    142c:	4b13      	ldr	r3, [pc, #76]	; (147c <flash_erase+0x9c>)
    142e:	4798      	blx	r3
    1430:	9000      	str	r0, [sp, #0]
    1432:	0020      	movs	r0, r4
    1434:	4b12      	ldr	r3, [pc, #72]	; (1480 <flash_erase+0xa0>)
    1436:	4798      	blx	r3
    1438:	0007      	movs	r7, r0
    143a:	0029      	movs	r1, r5
    143c:	0020      	movs	r0, r4
    143e:	4b11      	ldr	r3, [pc, #68]	; (1484 <flash_erase+0xa4>)
    1440:	4798      	blx	r3
    1442:	2800      	cmp	r0, #0
    1444:	d10e      	bne.n	1464 <flash_erase+0x84>
    1446:	42be      	cmp	r6, r7
    1448:	d80e      	bhi.n	1468 <flash_erase+0x88>
    144a:	9900      	ldr	r1, [sp, #0]
    144c:	0028      	movs	r0, r5
    144e:	4b0e      	ldr	r3, [pc, #56]	; (1488 <flash_erase+0xa8>)
    1450:	4798      	blx	r3
    1452:	1980      	adds	r0, r0, r6
    1454:	42b8      	cmp	r0, r7
    1456:	d80a      	bhi.n	146e <flash_erase+0x8e>
    1458:	0032      	movs	r2, r6
    145a:	0029      	movs	r1, r5
    145c:	9801      	ldr	r0, [sp, #4]
    145e:	4b0b      	ldr	r3, [pc, #44]	; (148c <flash_erase+0xac>)
    1460:	4798      	blx	r3
    1462:	2000      	movs	r0, #0
    1464:	b003      	add	sp, #12
    1466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1468:	200d      	movs	r0, #13
    146a:	4240      	negs	r0, r0
    146c:	e7fa      	b.n	1464 <flash_erase+0x84>
    146e:	200d      	movs	r0, #13
    1470:	4240      	negs	r0, r0
    1472:	e7f7      	b.n	1464 <flash_erase+0x84>
    1474:	0000307c 	.word	0x0000307c
    1478:	000019c9 	.word	0x000019c9
    147c:	00001f41 	.word	0x00001f41
    1480:	00001f45 	.word	0x00001f45
    1484:	000011f9 	.word	0x000011f9
    1488:	00002e65 	.word	0x00002e65
    148c:	000020b9 	.word	0x000020b9

00001490 <flash_get_page_size>:
    1490:	b510      	push	{r4, lr}
    1492:	0004      	movs	r4, r0
    1494:	1e43      	subs	r3, r0, #1
    1496:	4198      	sbcs	r0, r3
    1498:	b2c0      	uxtb	r0, r0
    149a:	22f7      	movs	r2, #247	; 0xf7
    149c:	4903      	ldr	r1, [pc, #12]	; (14ac <flash_get_page_size+0x1c>)
    149e:	4b04      	ldr	r3, [pc, #16]	; (14b0 <flash_get_page_size+0x20>)
    14a0:	4798      	blx	r3
    14a2:	0020      	movs	r0, r4
    14a4:	4b03      	ldr	r3, [pc, #12]	; (14b4 <flash_get_page_size+0x24>)
    14a6:	4798      	blx	r3
    14a8:	bd10      	pop	{r4, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	0000307c 	.word	0x0000307c
    14b0:	000019c9 	.word	0x000019c9
    14b4:	00001f41 	.word	0x00001f41

000014b8 <io_write>:
    14b8:	b570      	push	{r4, r5, r6, lr}
    14ba:	0006      	movs	r6, r0
    14bc:	000c      	movs	r4, r1
    14be:	0015      	movs	r5, r2
    14c0:	2800      	cmp	r0, #0
    14c2:	d00d      	beq.n	14e0 <io_write+0x28>
    14c4:	0008      	movs	r0, r1
    14c6:	1e43      	subs	r3, r0, #1
    14c8:	4198      	sbcs	r0, r3
    14ca:	b2c0      	uxtb	r0, r0
    14cc:	2234      	movs	r2, #52	; 0x34
    14ce:	4905      	ldr	r1, [pc, #20]	; (14e4 <io_write+0x2c>)
    14d0:	4b05      	ldr	r3, [pc, #20]	; (14e8 <io_write+0x30>)
    14d2:	4798      	blx	r3
    14d4:	6833      	ldr	r3, [r6, #0]
    14d6:	002a      	movs	r2, r5
    14d8:	0021      	movs	r1, r4
    14da:	0030      	movs	r0, r6
    14dc:	4798      	blx	r3
    14de:	bd70      	pop	{r4, r5, r6, pc}
    14e0:	2000      	movs	r0, #0
    14e2:	e7f3      	b.n	14cc <io_write+0x14>
    14e4:	00003094 	.word	0x00003094
    14e8:	000019c9 	.word	0x000019c9

000014ec <io_read>:
    14ec:	b570      	push	{r4, r5, r6, lr}
    14ee:	0006      	movs	r6, r0
    14f0:	000c      	movs	r4, r1
    14f2:	0015      	movs	r5, r2
    14f4:	2800      	cmp	r0, #0
    14f6:	d00d      	beq.n	1514 <io_read+0x28>
    14f8:	0008      	movs	r0, r1
    14fa:	1e43      	subs	r3, r0, #1
    14fc:	4198      	sbcs	r0, r3
    14fe:	b2c0      	uxtb	r0, r0
    1500:	223d      	movs	r2, #61	; 0x3d
    1502:	4905      	ldr	r1, [pc, #20]	; (1518 <io_read+0x2c>)
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <io_read+0x30>)
    1506:	4798      	blx	r3
    1508:	6873      	ldr	r3, [r6, #4]
    150a:	002a      	movs	r2, r5
    150c:	0021      	movs	r1, r4
    150e:	0030      	movs	r0, r6
    1510:	4798      	blx	r3
    1512:	bd70      	pop	{r4, r5, r6, pc}
    1514:	2000      	movs	r0, #0
    1516:	e7f3      	b.n	1500 <io_read+0x14>
    1518:	00003094 	.word	0x00003094
    151c:	000019c9 	.word	0x000019c9

00001520 <pwm_period_expired>:
    1520:	b510      	push	{r4, lr}
    1522:	6943      	ldr	r3, [r0, #20]
    1524:	2b00      	cmp	r3, #0
    1526:	d000      	beq.n	152a <pwm_period_expired+0xa>
    1528:	4798      	blx	r3
    152a:	bd10      	pop	{r4, pc}

0000152c <pwm_detect_fault>:
    152c:	b510      	push	{r4, lr}
    152e:	6983      	ldr	r3, [r0, #24]
    1530:	2b00      	cmp	r3, #0
    1532:	d000      	beq.n	1536 <pwm_detect_fault+0xa>
    1534:	4798      	blx	r3
    1536:	bd10      	pop	{r4, pc}

00001538 <pwm_init>:
    1538:	b570      	push	{r4, r5, r6, lr}
    153a:	0005      	movs	r5, r0
    153c:	000c      	movs	r4, r1
    153e:	2800      	cmp	r0, #0
    1540:	d011      	beq.n	1566 <pwm_init+0x2e>
    1542:	0008      	movs	r0, r1
    1544:	1e43      	subs	r3, r0, #1
    1546:	4198      	sbcs	r0, r3
    1548:	b2c0      	uxtb	r0, r0
    154a:	2233      	movs	r2, #51	; 0x33
    154c:	4907      	ldr	r1, [pc, #28]	; (156c <pwm_init+0x34>)
    154e:	4b08      	ldr	r3, [pc, #32]	; (1570 <pwm_init+0x38>)
    1550:	4798      	blx	r3
    1552:	0021      	movs	r1, r4
    1554:	0028      	movs	r0, r5
    1556:	4b07      	ldr	r3, [pc, #28]	; (1574 <pwm_init+0x3c>)
    1558:	4798      	blx	r3
    155a:	4b07      	ldr	r3, [pc, #28]	; (1578 <pwm_init+0x40>)
    155c:	602b      	str	r3, [r5, #0]
    155e:	4b07      	ldr	r3, [pc, #28]	; (157c <pwm_init+0x44>)
    1560:	606b      	str	r3, [r5, #4]
    1562:	2000      	movs	r0, #0
    1564:	bd70      	pop	{r4, r5, r6, pc}
    1566:	2000      	movs	r0, #0
    1568:	e7ef      	b.n	154a <pwm_init+0x12>
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000030a8 	.word	0x000030a8
    1570:	000019c9 	.word	0x000019c9
    1574:	00002855 	.word	0x00002855
    1578:	00001521 	.word	0x00001521
    157c:	0000152d 	.word	0x0000152d

00001580 <sleep>:
    1580:	b510      	push	{r4, lr}
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <sleep+0x18>)
    1584:	4798      	blx	r3
    1586:	2800      	cmp	r0, #0
    1588:	d103      	bne.n	1592 <sleep+0x12>
    158a:	4b04      	ldr	r3, [pc, #16]	; (159c <sleep+0x1c>)
    158c:	4798      	blx	r3
    158e:	2000      	movs	r0, #0
    1590:	bd10      	pop	{r4, pc}
    1592:	200d      	movs	r0, #13
    1594:	4240      	negs	r0, r0
    1596:	e7fb      	b.n	1590 <sleep+0x10>
    1598:	000021cd 	.word	0x000021cd
    159c:	00001b79 	.word	0x00001b79

000015a0 <spi_m_sync_init>:
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	0004      	movs	r4, r0
    15a4:	000d      	movs	r5, r1
    15a6:	2800      	cmp	r0, #0
    15a8:	d016      	beq.n	15d8 <spi_m_sync_init+0x38>
    15aa:	0008      	movs	r0, r1
    15ac:	1e43      	subs	r3, r0, #1
    15ae:	4198      	sbcs	r0, r3
    15b0:	b2c0      	uxtb	r0, r0
    15b2:	2240      	movs	r2, #64	; 0x40
    15b4:	4909      	ldr	r1, [pc, #36]	; (15dc <spi_m_sync_init+0x3c>)
    15b6:	4b0a      	ldr	r3, [pc, #40]	; (15e0 <spi_m_sync_init+0x40>)
    15b8:	4798      	blx	r3
    15ba:	6065      	str	r5, [r4, #4]
    15bc:	1d20      	adds	r0, r4, #4
    15be:	0029      	movs	r1, r5
    15c0:	4b08      	ldr	r3, [pc, #32]	; (15e4 <spi_m_sync_init+0x44>)
    15c2:	4798      	blx	r3
    15c4:	2800      	cmp	r0, #0
    15c6:	db06      	blt.n	15d6 <spi_m_sync_init+0x36>
    15c8:	4b07      	ldr	r3, [pc, #28]	; (15e8 <spi_m_sync_init+0x48>)
    15ca:	82a3      	strh	r3, [r4, #20]
    15cc:	4b07      	ldr	r3, [pc, #28]	; (15ec <spi_m_sync_init+0x4c>)
    15ce:	6123      	str	r3, [r4, #16]
    15d0:	4b07      	ldr	r3, [pc, #28]	; (15f0 <spi_m_sync_init+0x50>)
    15d2:	60e3      	str	r3, [r4, #12]
    15d4:	2000      	movs	r0, #0
    15d6:	bd70      	pop	{r4, r5, r6, pc}
    15d8:	2000      	movs	r0, #0
    15da:	e7ea      	b.n	15b2 <spi_m_sync_init+0x12>
    15dc:	000030c0 	.word	0x000030c0
    15e0:	000019c9 	.word	0x000019c9
    15e4:	000023a5 	.word	0x000023a5
    15e8:	ffff8000 	.word	0xffff8000
    15ec:	000016f9 	.word	0x000016f9
    15f0:	000016bd 	.word	0x000016bd

000015f4 <spi_m_sync_enable>:
    15f4:	b510      	push	{r4, lr}
    15f6:	0004      	movs	r4, r0
    15f8:	1e43      	subs	r3, r0, #1
    15fa:	4198      	sbcs	r0, r3
    15fc:	b2c0      	uxtb	r0, r0
    15fe:	2257      	movs	r2, #87	; 0x57
    1600:	4903      	ldr	r1, [pc, #12]	; (1610 <spi_m_sync_enable+0x1c>)
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <spi_m_sync_enable+0x20>)
    1604:	4798      	blx	r3
    1606:	1d20      	adds	r0, r4, #4
    1608:	4b03      	ldr	r3, [pc, #12]	; (1618 <spi_m_sync_enable+0x24>)
    160a:	4798      	blx	r3
    160c:	bd10      	pop	{r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	000030c0 	.word	0x000030c0
    1614:	000019c9 	.word	0x000019c9
    1618:	0000259d 	.word	0x0000259d

0000161c <spi_m_sync_set_baudrate>:
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	0004      	movs	r4, r0
    1620:	000d      	movs	r5, r1
    1622:	1e43      	subs	r3, r0, #1
    1624:	4198      	sbcs	r0, r3
    1626:	b2c0      	uxtb	r0, r0
    1628:	2263      	movs	r2, #99	; 0x63
    162a:	4904      	ldr	r1, [pc, #16]	; (163c <spi_m_sync_set_baudrate+0x20>)
    162c:	4b04      	ldr	r3, [pc, #16]	; (1640 <spi_m_sync_set_baudrate+0x24>)
    162e:	4798      	blx	r3
    1630:	1d20      	adds	r0, r4, #4
    1632:	0029      	movs	r1, r5
    1634:	4b03      	ldr	r3, [pc, #12]	; (1644 <spi_m_sync_set_baudrate+0x28>)
    1636:	4798      	blx	r3
    1638:	bd70      	pop	{r4, r5, r6, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	000030c0 	.word	0x000030c0
    1640:	000019c9 	.word	0x000019c9
    1644:	000025cd 	.word	0x000025cd

00001648 <spi_m_sync_set_char_size>:
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	0004      	movs	r4, r0
    164c:	000d      	movs	r5, r1
    164e:	1e43      	subs	r3, r0, #1
    1650:	4198      	sbcs	r0, r3
    1652:	b2c0      	uxtb	r0, r0
    1654:	226f      	movs	r2, #111	; 0x6f
    1656:	4904      	ldr	r1, [pc, #16]	; (1668 <spi_m_sync_set_char_size+0x20>)
    1658:	4b04      	ldr	r3, [pc, #16]	; (166c <spi_m_sync_set_char_size+0x24>)
    165a:	4798      	blx	r3
    165c:	1d20      	adds	r0, r4, #4
    165e:	0029      	movs	r1, r5
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <spi_m_sync_set_char_size+0x28>)
    1662:	4798      	blx	r3
    1664:	bd70      	pop	{r4, r5, r6, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	000030c0 	.word	0x000030c0
    166c:	000019c9 	.word	0x000019c9
    1670:	0000260d 	.word	0x0000260d

00001674 <spi_m_sync_transfer>:
    1674:	b530      	push	{r4, r5, lr}
    1676:	b087      	sub	sp, #28
    1678:	0004      	movs	r4, r0
    167a:	000d      	movs	r5, r1
    167c:	2800      	cmp	r0, #0
    167e:	d014      	beq.n	16aa <spi_m_sync_transfer+0x36>
    1680:	0008      	movs	r0, r1
    1682:	1e43      	subs	r3, r0, #1
    1684:	4198      	sbcs	r0, r3
    1686:	b2c0      	uxtb	r0, r0
    1688:	22b3      	movs	r2, #179	; 0xb3
    168a:	4909      	ldr	r1, [pc, #36]	; (16b0 <spi_m_sync_transfer+0x3c>)
    168c:	4b09      	ldr	r3, [pc, #36]	; (16b4 <spi_m_sync_transfer+0x40>)
    168e:	4798      	blx	r3
    1690:	682b      	ldr	r3, [r5, #0]
    1692:	9303      	str	r3, [sp, #12]
    1694:	686b      	ldr	r3, [r5, #4]
    1696:	9304      	str	r3, [sp, #16]
    1698:	68ab      	ldr	r3, [r5, #8]
    169a:	9301      	str	r3, [sp, #4]
    169c:	9305      	str	r3, [sp, #20]
    169e:	1d20      	adds	r0, r4, #4
    16a0:	a903      	add	r1, sp, #12
    16a2:	4b05      	ldr	r3, [pc, #20]	; (16b8 <spi_m_sync_transfer+0x44>)
    16a4:	4798      	blx	r3
    16a6:	b007      	add	sp, #28
    16a8:	bd30      	pop	{r4, r5, pc}
    16aa:	2000      	movs	r0, #0
    16ac:	e7ec      	b.n	1688 <spi_m_sync_transfer+0x14>
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	000030c0 	.word	0x000030c0
    16b4:	000019c9 	.word	0x000019c9
    16b8:	00002649 	.word	0x00002649

000016bc <_spi_m_sync_io_write>:
    16bc:	b570      	push	{r4, r5, r6, lr}
    16be:	b084      	sub	sp, #16
    16c0:	0004      	movs	r4, r0
    16c2:	000e      	movs	r6, r1
    16c4:	0015      	movs	r5, r2
    16c6:	1e43      	subs	r3, r0, #1
    16c8:	4198      	sbcs	r0, r3
    16ca:	b2c0      	uxtb	r0, r0
    16cc:	22a3      	movs	r2, #163	; 0xa3
    16ce:	4907      	ldr	r1, [pc, #28]	; (16ec <_spi_m_sync_io_write+0x30>)
    16d0:	4b07      	ldr	r3, [pc, #28]	; (16f0 <_spi_m_sync_io_write+0x34>)
    16d2:	4798      	blx	r3
    16d4:	2300      	movs	r3, #0
    16d6:	9302      	str	r3, [sp, #8]
    16d8:	9601      	str	r6, [sp, #4]
    16da:	9503      	str	r5, [sp, #12]
    16dc:	0020      	movs	r0, r4
    16de:	380c      	subs	r0, #12
    16e0:	a901      	add	r1, sp, #4
    16e2:	4b04      	ldr	r3, [pc, #16]	; (16f4 <_spi_m_sync_io_write+0x38>)
    16e4:	4798      	blx	r3
    16e6:	b004      	add	sp, #16
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	000030c0 	.word	0x000030c0
    16f0:	000019c9 	.word	0x000019c9
    16f4:	00001675 	.word	0x00001675

000016f8 <_spi_m_sync_io_read>:
    16f8:	b570      	push	{r4, r5, r6, lr}
    16fa:	b084      	sub	sp, #16
    16fc:	0004      	movs	r4, r0
    16fe:	000e      	movs	r6, r1
    1700:	0015      	movs	r5, r2
    1702:	1e43      	subs	r3, r0, #1
    1704:	4198      	sbcs	r0, r3
    1706:	b2c0      	uxtb	r0, r0
    1708:	2287      	movs	r2, #135	; 0x87
    170a:	4907      	ldr	r1, [pc, #28]	; (1728 <_spi_m_sync_io_read+0x30>)
    170c:	4b07      	ldr	r3, [pc, #28]	; (172c <_spi_m_sync_io_read+0x34>)
    170e:	4798      	blx	r3
    1710:	9602      	str	r6, [sp, #8]
    1712:	2300      	movs	r3, #0
    1714:	9301      	str	r3, [sp, #4]
    1716:	9503      	str	r5, [sp, #12]
    1718:	0020      	movs	r0, r4
    171a:	380c      	subs	r0, #12
    171c:	a901      	add	r1, sp, #4
    171e:	4b04      	ldr	r3, [pc, #16]	; (1730 <_spi_m_sync_io_read+0x38>)
    1720:	4798      	blx	r3
    1722:	b004      	add	sp, #16
    1724:	bd70      	pop	{r4, r5, r6, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	000030c0 	.word	0x000030c0
    172c:	000019c9 	.word	0x000019c9
    1730:	00001675 	.word	0x00001675

00001734 <spi_m_sync_get_io_descriptor>:
    1734:	b570      	push	{r4, r5, r6, lr}
    1736:	0004      	movs	r4, r0
    1738:	000d      	movs	r5, r1
    173a:	2800      	cmp	r0, #0
    173c:	d00b      	beq.n	1756 <spi_m_sync_get_io_descriptor+0x22>
    173e:	0008      	movs	r0, r1
    1740:	1e43      	subs	r3, r0, #1
    1742:	4198      	sbcs	r0, r3
    1744:	b2c0      	uxtb	r0, r0
    1746:	22bd      	movs	r2, #189	; 0xbd
    1748:	4904      	ldr	r1, [pc, #16]	; (175c <spi_m_sync_get_io_descriptor+0x28>)
    174a:	4b05      	ldr	r3, [pc, #20]	; (1760 <spi_m_sync_get_io_descriptor+0x2c>)
    174c:	4798      	blx	r3
    174e:	340c      	adds	r4, #12
    1750:	602c      	str	r4, [r5, #0]
    1752:	2000      	movs	r0, #0
    1754:	bd70      	pop	{r4, r5, r6, pc}
    1756:	2000      	movs	r0, #0
    1758:	e7f5      	b.n	1746 <spi_m_sync_get_io_descriptor+0x12>
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	000030c0 	.word	0x000030c0
    1760:	000019c9 	.word	0x000019c9

00001764 <timer_add_timer_task>:
    1764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1766:	46ce      	mov	lr, r9
    1768:	4647      	mov	r7, r8
    176a:	b580      	push	{r7, lr}
    176c:	4681      	mov	r9, r0
    176e:	6803      	ldr	r3, [r0, #0]
    1770:	469c      	mov	ip, r3
    1772:	2b00      	cmp	r3, #0
    1774:	d005      	beq.n	1782 <timer_add_timer_task+0x1e>
    1776:	688e      	ldr	r6, [r1, #8]
    1778:	001c      	movs	r4, r3
    177a:	2500      	movs	r5, #0
    177c:	2701      	movs	r7, #1
    177e:	1abf      	subs	r7, r7, r2
    1780:	e00d      	b.n	179e <timer_add_timer_task+0x3a>
    1782:	4b12      	ldr	r3, [pc, #72]	; (17cc <timer_add_timer_task+0x68>)
    1784:	4798      	blx	r3
    1786:	e018      	b.n	17ba <timer_add_timer_task+0x56>
    1788:	18fb      	adds	r3, r7, r3
    178a:	68a0      	ldr	r0, [r4, #8]
    178c:	4680      	mov	r8, r0
    178e:	4443      	add	r3, r8
    1790:	42b3      	cmp	r3, r6
    1792:	d20c      	bcs.n	17ae <timer_add_timer_task+0x4a>
    1794:	6823      	ldr	r3, [r4, #0]
    1796:	0025      	movs	r5, r4
    1798:	2b00      	cmp	r3, #0
    179a:	d00b      	beq.n	17b4 <timer_add_timer_task+0x50>
    179c:	001c      	movs	r4, r3
    179e:	6863      	ldr	r3, [r4, #4]
    17a0:	4293      	cmp	r3, r2
    17a2:	d8f1      	bhi.n	1788 <timer_add_timer_task+0x24>
    17a4:	68a0      	ldr	r0, [r4, #8]
    17a6:	4680      	mov	r8, r0
    17a8:	4443      	add	r3, r8
    17aa:	1a9b      	subs	r3, r3, r2
    17ac:	e7f0      	b.n	1790 <timer_add_timer_task+0x2c>
    17ae:	45a4      	cmp	ip, r4
    17b0:	d007      	beq.n	17c2 <timer_add_timer_task+0x5e>
    17b2:	002c      	movs	r4, r5
    17b4:	0020      	movs	r0, r4
    17b6:	4b06      	ldr	r3, [pc, #24]	; (17d0 <timer_add_timer_task+0x6c>)
    17b8:	4798      	blx	r3
    17ba:	bc0c      	pop	{r2, r3}
    17bc:	4690      	mov	r8, r2
    17be:	4699      	mov	r9, r3
    17c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17c2:	4648      	mov	r0, r9
    17c4:	4b01      	ldr	r3, [pc, #4]	; (17cc <timer_add_timer_task+0x68>)
    17c6:	4798      	blx	r3
    17c8:	e7f7      	b.n	17ba <timer_add_timer_task+0x56>
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	000019f5 	.word	0x000019f5
    17d0:	00001a21 	.word	0x00001a21

000017d4 <timer_process_counted>:
    17d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d6:	46c6      	mov	lr, r8
    17d8:	b500      	push	{lr}
    17da:	b082      	sub	sp, #8
    17dc:	0007      	movs	r7, r0
    17de:	6944      	ldr	r4, [r0, #20]
    17e0:	6903      	ldr	r3, [r0, #16]
    17e2:	3301      	adds	r3, #1
    17e4:	4698      	mov	r8, r3
    17e6:	6103      	str	r3, [r0, #16]
    17e8:	7e03      	ldrb	r3, [r0, #24]
    17ea:	07db      	lsls	r3, r3, #31
    17ec:	d411      	bmi.n	1812 <timer_process_counted+0x3e>
    17ee:	7e03      	ldrb	r3, [r0, #24]
    17f0:	079b      	lsls	r3, r3, #30
    17f2:	d40e      	bmi.n	1812 <timer_process_counted+0x3e>
    17f4:	2c00      	cmp	r4, #0
    17f6:	d010      	beq.n	181a <timer_process_counted+0x46>
    17f8:	4643      	mov	r3, r8
    17fa:	6862      	ldr	r2, [r4, #4]
    17fc:	1a9b      	subs	r3, r3, r2
    17fe:	68a2      	ldr	r2, [r4, #8]
    1800:	4293      	cmp	r3, r2
    1802:	d30a      	bcc.n	181a <timer_process_counted+0x46>
    1804:	2314      	movs	r3, #20
    1806:	469c      	mov	ip, r3
    1808:	4484      	add	ip, r0
    180a:	4663      	mov	r3, ip
    180c:	9301      	str	r3, [sp, #4]
    180e:	4e12      	ldr	r6, [pc, #72]	; (1858 <timer_process_counted+0x84>)
    1810:	e014      	b.n	183c <timer_process_counted+0x68>
    1812:	7e3b      	ldrb	r3, [r7, #24]
    1814:	2202      	movs	r2, #2
    1816:	4313      	orrs	r3, r2
    1818:	763b      	strb	r3, [r7, #24]
    181a:	b002      	add	sp, #8
    181c:	bc04      	pop	{r2}
    181e:	4690      	mov	r8, r2
    1820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1822:	697d      	ldr	r5, [r7, #20]
    1824:	68e3      	ldr	r3, [r4, #12]
    1826:	0020      	movs	r0, r4
    1828:	4798      	blx	r3
    182a:	2d00      	cmp	r5, #0
    182c:	d0f5      	beq.n	181a <timer_process_counted+0x46>
    182e:	002c      	movs	r4, r5
    1830:	4643      	mov	r3, r8
    1832:	686a      	ldr	r2, [r5, #4]
    1834:	1a9b      	subs	r3, r3, r2
    1836:	68aa      	ldr	r2, [r5, #8]
    1838:	4293      	cmp	r3, r2
    183a:	d3ee      	bcc.n	181a <timer_process_counted+0x46>
    183c:	9801      	ldr	r0, [sp, #4]
    183e:	47b0      	blx	r6
    1840:	7c23      	ldrb	r3, [r4, #16]
    1842:	2b01      	cmp	r3, #1
    1844:	d1ed      	bne.n	1822 <timer_process_counted+0x4e>
    1846:	4643      	mov	r3, r8
    1848:	6063      	str	r3, [r4, #4]
    184a:	4642      	mov	r2, r8
    184c:	0021      	movs	r1, r4
    184e:	9801      	ldr	r0, [sp, #4]
    1850:	4b02      	ldr	r3, [pc, #8]	; (185c <timer_process_counted+0x88>)
    1852:	4798      	blx	r3
    1854:	e7e5      	b.n	1822 <timer_process_counted+0x4e>
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	00001a29 	.word	0x00001a29
    185c:	00001765 	.word	0x00001765

00001860 <timer_init>:
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	0005      	movs	r5, r0
    1864:	000c      	movs	r4, r1
    1866:	2800      	cmp	r0, #0
    1868:	d011      	beq.n	188e <timer_init+0x2e>
    186a:	0008      	movs	r0, r1
    186c:	1e43      	subs	r3, r0, #1
    186e:	4198      	sbcs	r0, r3
    1870:	b2c0      	uxtb	r0, r0
    1872:	223b      	movs	r2, #59	; 0x3b
    1874:	4907      	ldr	r1, [pc, #28]	; (1894 <timer_init+0x34>)
    1876:	4b08      	ldr	r3, [pc, #32]	; (1898 <timer_init+0x38>)
    1878:	4798      	blx	r3
    187a:	0021      	movs	r1, r4
    187c:	0028      	movs	r0, r5
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <timer_init+0x3c>)
    1880:	4798      	blx	r3
    1882:	2300      	movs	r3, #0
    1884:	612b      	str	r3, [r5, #16]
    1886:	4b06      	ldr	r3, [pc, #24]	; (18a0 <timer_init+0x40>)
    1888:	602b      	str	r3, [r5, #0]
    188a:	2000      	movs	r0, #0
    188c:	bd70      	pop	{r4, r5, r6, pc}
    188e:	2000      	movs	r0, #0
    1890:	e7ef      	b.n	1872 <timer_init+0x12>
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	000030dc 	.word	0x000030dc
    1898:	000019c9 	.word	0x000019c9
    189c:	00002225 	.word	0x00002225
    18a0:	000017d5 	.word	0x000017d5

000018a4 <timer_start>:
    18a4:	b510      	push	{r4, lr}
    18a6:	0004      	movs	r4, r0
    18a8:	1e43      	subs	r3, r0, #1
    18aa:	4198      	sbcs	r0, r3
    18ac:	b2c0      	uxtb	r0, r0
    18ae:	2253      	movs	r2, #83	; 0x53
    18b0:	4907      	ldr	r1, [pc, #28]	; (18d0 <timer_start+0x2c>)
    18b2:	4b08      	ldr	r3, [pc, #32]	; (18d4 <timer_start+0x30>)
    18b4:	4798      	blx	r3
    18b6:	0020      	movs	r0, r4
    18b8:	4b07      	ldr	r3, [pc, #28]	; (18d8 <timer_start+0x34>)
    18ba:	4798      	blx	r3
    18bc:	2800      	cmp	r0, #0
    18be:	d104      	bne.n	18ca <timer_start+0x26>
    18c0:	0020      	movs	r0, r4
    18c2:	4b06      	ldr	r3, [pc, #24]	; (18dc <timer_start+0x38>)
    18c4:	4798      	blx	r3
    18c6:	2000      	movs	r0, #0
    18c8:	bd10      	pop	{r4, pc}
    18ca:	2011      	movs	r0, #17
    18cc:	4240      	negs	r0, r0
    18ce:	e7fb      	b.n	18c8 <timer_start+0x24>
    18d0:	000030dc 	.word	0x000030dc
    18d4:	000019c9 	.word	0x000019c9
    18d8:	00002309 	.word	0x00002309
    18dc:	00002281 	.word	0x00002281

000018e0 <timer_stop>:
    18e0:	b510      	push	{r4, lr}
    18e2:	0004      	movs	r4, r0
    18e4:	1e43      	subs	r3, r0, #1
    18e6:	4198      	sbcs	r0, r3
    18e8:	b2c0      	uxtb	r0, r0
    18ea:	2261      	movs	r2, #97	; 0x61
    18ec:	4907      	ldr	r1, [pc, #28]	; (190c <timer_stop+0x2c>)
    18ee:	4b08      	ldr	r3, [pc, #32]	; (1910 <timer_stop+0x30>)
    18f0:	4798      	blx	r3
    18f2:	0020      	movs	r0, r4
    18f4:	4b07      	ldr	r3, [pc, #28]	; (1914 <timer_stop+0x34>)
    18f6:	4798      	blx	r3
    18f8:	2800      	cmp	r0, #0
    18fa:	d004      	beq.n	1906 <timer_stop+0x26>
    18fc:	0020      	movs	r0, r4
    18fe:	4b06      	ldr	r3, [pc, #24]	; (1918 <timer_stop+0x38>)
    1900:	4798      	blx	r3
    1902:	2000      	movs	r0, #0
    1904:	bd10      	pop	{r4, pc}
    1906:	2011      	movs	r0, #17
    1908:	4240      	negs	r0, r0
    190a:	e7fb      	b.n	1904 <timer_stop+0x24>
    190c:	000030dc 	.word	0x000030dc
    1910:	000019c9 	.word	0x000019c9
    1914:	00002309 	.word	0x00002309
    1918:	000022d5 	.word	0x000022d5

0000191c <timer_add_task>:
    191c:	b570      	push	{r4, r5, r6, lr}
    191e:	b082      	sub	sp, #8
    1920:	0004      	movs	r4, r0
    1922:	000d      	movs	r5, r1
    1924:	2800      	cmp	r0, #0
    1926:	d024      	beq.n	1972 <timer_add_task+0x56>
    1928:	0008      	movs	r0, r1
    192a:	1e43      	subs	r3, r0, #1
    192c:	4198      	sbcs	r0, r3
    192e:	b2c0      	uxtb	r0, r0
    1930:	227a      	movs	r2, #122	; 0x7a
    1932:	491e      	ldr	r1, [pc, #120]	; (19ac <timer_add_task+0x90>)
    1934:	4b1e      	ldr	r3, [pc, #120]	; (19b0 <timer_add_task+0x94>)
    1936:	4798      	blx	r3
    1938:	7e23      	ldrb	r3, [r4, #24]
    193a:	2201      	movs	r2, #1
    193c:	4313      	orrs	r3, r2
    193e:	7623      	strb	r3, [r4, #24]
    1940:	0026      	movs	r6, r4
    1942:	3614      	adds	r6, #20
    1944:	0029      	movs	r1, r5
    1946:	0030      	movs	r0, r6
    1948:	4b1a      	ldr	r3, [pc, #104]	; (19b4 <timer_add_task+0x98>)
    194a:	4798      	blx	r3
    194c:	2800      	cmp	r0, #0
    194e:	d112      	bne.n	1976 <timer_add_task+0x5a>
    1950:	6923      	ldr	r3, [r4, #16]
    1952:	606b      	str	r3, [r5, #4]
    1954:	6922      	ldr	r2, [r4, #16]
    1956:	0029      	movs	r1, r5
    1958:	0030      	movs	r0, r6
    195a:	4b17      	ldr	r3, [pc, #92]	; (19b8 <timer_add_task+0x9c>)
    195c:	4798      	blx	r3
    195e:	7e23      	ldrb	r3, [r4, #24]
    1960:	2201      	movs	r2, #1
    1962:	4393      	bics	r3, r2
    1964:	7623      	strb	r3, [r4, #24]
    1966:	7e23      	ldrb	r3, [r4, #24]
    1968:	2000      	movs	r0, #0
    196a:	079b      	lsls	r3, r3, #30
    196c:	d40f      	bmi.n	198e <timer_add_task+0x72>
    196e:	b002      	add	sp, #8
    1970:	bd70      	pop	{r4, r5, r6, pc}
    1972:	2000      	movs	r0, #0
    1974:	e7dc      	b.n	1930 <timer_add_task+0x14>
    1976:	7e23      	ldrb	r3, [r4, #24]
    1978:	2201      	movs	r2, #1
    197a:	4393      	bics	r3, r2
    197c:	7623      	strb	r3, [r4, #24]
    197e:	327e      	adds	r2, #126	; 0x7e
    1980:	490a      	ldr	r1, [pc, #40]	; (19ac <timer_add_task+0x90>)
    1982:	2000      	movs	r0, #0
    1984:	4b0a      	ldr	r3, [pc, #40]	; (19b0 <timer_add_task+0x94>)
    1986:	4798      	blx	r3
    1988:	2012      	movs	r0, #18
    198a:	4240      	negs	r0, r0
    198c:	e7ef      	b.n	196e <timer_add_task+0x52>
    198e:	a801      	add	r0, sp, #4
    1990:	4b0a      	ldr	r3, [pc, #40]	; (19bc <timer_add_task+0xa0>)
    1992:	4798      	blx	r3
    1994:	7e23      	ldrb	r3, [r4, #24]
    1996:	2202      	movs	r2, #2
    1998:	4393      	bics	r3, r2
    199a:	7623      	strb	r3, [r4, #24]
    199c:	0020      	movs	r0, r4
    199e:	4b08      	ldr	r3, [pc, #32]	; (19c0 <timer_add_task+0xa4>)
    19a0:	4798      	blx	r3
    19a2:	a801      	add	r0, sp, #4
    19a4:	4b07      	ldr	r3, [pc, #28]	; (19c4 <timer_add_task+0xa8>)
    19a6:	4798      	blx	r3
    19a8:	2000      	movs	r0, #0
    19aa:	e7e0      	b.n	196e <timer_add_task+0x52>
    19ac:	000030dc 	.word	0x000030dc
    19b0:	000019c9 	.word	0x000019c9
    19b4:	000019d1 	.word	0x000019d1
    19b8:	00001765 	.word	0x00001765
    19bc:	00000fb1 	.word	0x00000fb1
    19c0:	00002319 	.word	0x00002319
    19c4:	00000fbf 	.word	0x00000fbf

000019c8 <assert>:
    19c8:	2800      	cmp	r0, #0
    19ca:	d100      	bne.n	19ce <assert+0x6>
    19cc:	be00      	bkpt	0x0000
    19ce:	4770      	bx	lr

000019d0 <is_list_element>:
    19d0:	6803      	ldr	r3, [r0, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d00a      	beq.n	19ec <is_list_element+0x1c>
    19d6:	428b      	cmp	r3, r1
    19d8:	d00a      	beq.n	19f0 <is_list_element+0x20>
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	2b00      	cmp	r3, #0
    19de:	d003      	beq.n	19e8 <is_list_element+0x18>
    19e0:	4299      	cmp	r1, r3
    19e2:	d1fa      	bne.n	19da <is_list_element+0xa>
    19e4:	2001      	movs	r0, #1
    19e6:	e000      	b.n	19ea <is_list_element+0x1a>
    19e8:	2000      	movs	r0, #0
    19ea:	4770      	bx	lr
    19ec:	2000      	movs	r0, #0
    19ee:	e7fc      	b.n	19ea <is_list_element+0x1a>
    19f0:	2001      	movs	r0, #1
    19f2:	e7fa      	b.n	19ea <is_list_element+0x1a>

000019f4 <list_insert_as_head>:
    19f4:	b570      	push	{r4, r5, r6, lr}
    19f6:	0004      	movs	r4, r0
    19f8:	000d      	movs	r5, r1
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <list_insert_as_head+0x20>)
    19fc:	4798      	blx	r3
    19fe:	2301      	movs	r3, #1
    1a00:	4058      	eors	r0, r3
    1a02:	b2c0      	uxtb	r0, r0
    1a04:	2239      	movs	r2, #57	; 0x39
    1a06:	4904      	ldr	r1, [pc, #16]	; (1a18 <list_insert_as_head+0x24>)
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <list_insert_as_head+0x28>)
    1a0a:	4798      	blx	r3
    1a0c:	6823      	ldr	r3, [r4, #0]
    1a0e:	602b      	str	r3, [r5, #0]
    1a10:	6025      	str	r5, [r4, #0]
    1a12:	bd70      	pop	{r4, r5, r6, pc}
    1a14:	000019d1 	.word	0x000019d1
    1a18:	000030f4 	.word	0x000030f4
    1a1c:	000019c9 	.word	0x000019c9

00001a20 <list_insert_after>:
    1a20:	6803      	ldr	r3, [r0, #0]
    1a22:	600b      	str	r3, [r1, #0]
    1a24:	6001      	str	r1, [r0, #0]
    1a26:	4770      	bx	lr

00001a28 <list_remove_head>:
    1a28:	6803      	ldr	r3, [r0, #0]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d001      	beq.n	1a32 <list_remove_head+0xa>
    1a2e:	681a      	ldr	r2, [r3, #0]
    1a30:	6002      	str	r2, [r0, #0]
    1a32:	0018      	movs	r0, r3
    1a34:	4770      	bx	lr

00001a36 <_adc_get_regs>:
    1a36:	2000      	movs	r0, #0
    1a38:	4770      	bx	lr
	...

00001a3c <_adc_init>:
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	0004      	movs	r4, r0
    1a40:	000d      	movs	r5, r1
    1a42:	4b39      	ldr	r3, [pc, #228]	; (1b28 <_adc_init+0xec>)
    1a44:	18c0      	adds	r0, r0, r3
    1a46:	4242      	negs	r2, r0
    1a48:	4142      	adcs	r2, r0
    1a4a:	b2d0      	uxtb	r0, r2
    1a4c:	2294      	movs	r2, #148	; 0x94
    1a4e:	4937      	ldr	r1, [pc, #220]	; (1b2c <_adc_init+0xf0>)
    1a50:	4b37      	ldr	r3, [pc, #220]	; (1b30 <_adc_init+0xf4>)
    1a52:	4798      	blx	r3
    1a54:	4b37      	ldr	r3, [pc, #220]	; (1b34 <_adc_init+0xf8>)
    1a56:	681a      	ldr	r2, [r3, #0]
    1a58:	0152      	lsls	r2, r2, #5
    1a5a:	23e0      	movs	r3, #224	; 0xe0
    1a5c:	00db      	lsls	r3, r3, #3
    1a5e:	401a      	ands	r2, r3
    1a60:	4b35      	ldr	r3, [pc, #212]	; (1b38 <_adc_init+0xfc>)
    1a62:	6859      	ldr	r1, [r3, #4]
    1a64:	0149      	lsls	r1, r1, #5
    1a66:	681b      	ldr	r3, [r3, #0]
    1a68:	0edb      	lsrs	r3, r3, #27
    1a6a:	430b      	orrs	r3, r1
    1a6c:	21ff      	movs	r1, #255	; 0xff
    1a6e:	400b      	ands	r3, r1
    1a70:	431a      	orrs	r2, r3
    1a72:	7e63      	ldrb	r3, [r4, #25]
    1a74:	09db      	lsrs	r3, r3, #7
    1a76:	d1fc      	bne.n	1a72 <_adc_init+0x36>
    1a78:	7823      	ldrb	r3, [r4, #0]
    1a7a:	079b      	lsls	r3, r3, #30
    1a7c:	d504      	bpl.n	1a88 <_adc_init+0x4c>
    1a7e:	2300      	movs	r3, #0
    1a80:	7023      	strb	r3, [r4, #0]
    1a82:	7e63      	ldrb	r3, [r4, #25]
    1a84:	09db      	lsrs	r3, r3, #7
    1a86:	d1fc      	bne.n	1a82 <_adc_init+0x46>
    1a88:	2301      	movs	r3, #1
    1a8a:	7023      	strb	r3, [r4, #0]
    1a8c:	7e63      	ldrb	r3, [r4, #25]
    1a8e:	09db      	lsrs	r3, r3, #7
    1a90:	d1fc      	bne.n	1a8c <_adc_init+0x50>
    1a92:	8522      	strh	r2, [r4, #40]	; 0x28
    1a94:	00ea      	lsls	r2, r5, #3
    1a96:	1b52      	subs	r2, r2, r5
    1a98:	0092      	lsls	r2, r2, #2
    1a9a:	4b28      	ldr	r3, [pc, #160]	; (1b3c <_adc_init+0x100>)
    1a9c:	189b      	adds	r3, r3, r2
    1a9e:	789a      	ldrb	r2, [r3, #2]
    1aa0:	7062      	strb	r2, [r4, #1]
    1aa2:	78da      	ldrb	r2, [r3, #3]
    1aa4:	70a2      	strb	r2, [r4, #2]
    1aa6:	791a      	ldrb	r2, [r3, #4]
    1aa8:	70e2      	strb	r2, [r4, #3]
    1aaa:	7c1a      	ldrb	r2, [r3, #16]
    1aac:	7522      	strb	r2, [r4, #20]
    1aae:	8ada      	ldrh	r2, [r3, #22]
    1ab0:	84a2      	strh	r2, [r4, #36]	; 0x24
    1ab2:	8b1a      	ldrh	r2, [r3, #24]
    1ab4:	84e2      	strh	r2, [r4, #38]	; 0x26
    1ab6:	7e99      	ldrb	r1, [r3, #26]
    1ab8:	222a      	movs	r2, #42	; 0x2a
    1aba:	54a1      	strb	r1, [r4, r2]
    1abc:	88db      	ldrh	r3, [r3, #6]
    1abe:	80a3      	strh	r3, [r4, #4]
    1ac0:	7e63      	ldrb	r3, [r4, #25]
    1ac2:	09db      	lsrs	r3, r3, #7
    1ac4:	d1fc      	bne.n	1ac0 <_adc_init+0x84>
    1ac6:	00eb      	lsls	r3, r5, #3
    1ac8:	1b5b      	subs	r3, r3, r5
    1aca:	009b      	lsls	r3, r3, #2
    1acc:	4a1b      	ldr	r2, [pc, #108]	; (1b3c <_adc_init+0x100>)
    1ace:	18d3      	adds	r3, r2, r3
    1ad0:	68db      	ldr	r3, [r3, #12]
    1ad2:	6123      	str	r3, [r4, #16]
    1ad4:	7e63      	ldrb	r3, [r4, #25]
    1ad6:	09db      	lsrs	r3, r3, #7
    1ad8:	d1fc      	bne.n	1ad4 <_adc_init+0x98>
    1ada:	00eb      	lsls	r3, r5, #3
    1adc:	1b5b      	subs	r3, r3, r5
    1ade:	009b      	lsls	r3, r3, #2
    1ae0:	4a16      	ldr	r2, [pc, #88]	; (1b3c <_adc_init+0x100>)
    1ae2:	18d3      	adds	r3, r2, r3
    1ae4:	7a1b      	ldrb	r3, [r3, #8]
    1ae6:	7223      	strb	r3, [r4, #8]
    1ae8:	7e63      	ldrb	r3, [r4, #25]
    1aea:	09db      	lsrs	r3, r3, #7
    1aec:	d1fc      	bne.n	1ae8 <_adc_init+0xac>
    1aee:	00eb      	lsls	r3, r5, #3
    1af0:	1b5b      	subs	r3, r3, r5
    1af2:	009b      	lsls	r3, r3, #2
    1af4:	4a11      	ldr	r2, [pc, #68]	; (1b3c <_adc_init+0x100>)
    1af6:	18d3      	adds	r3, r2, r3
    1af8:	8a5b      	ldrh	r3, [r3, #18]
    1afa:	83a3      	strh	r3, [r4, #28]
    1afc:	7e63      	ldrb	r3, [r4, #25]
    1afe:	09db      	lsrs	r3, r3, #7
    1b00:	d1fc      	bne.n	1afc <_adc_init+0xc0>
    1b02:	00eb      	lsls	r3, r5, #3
    1b04:	1b5b      	subs	r3, r3, r5
    1b06:	009b      	lsls	r3, r3, #2
    1b08:	4a0c      	ldr	r2, [pc, #48]	; (1b3c <_adc_init+0x100>)
    1b0a:	18d3      	adds	r3, r2, r3
    1b0c:	8a9b      	ldrh	r3, [r3, #20]
    1b0e:	8423      	strh	r3, [r4, #32]
    1b10:	7e63      	ldrb	r3, [r4, #25]
    1b12:	09db      	lsrs	r3, r3, #7
    1b14:	d1fc      	bne.n	1b10 <_adc_init+0xd4>
    1b16:	00eb      	lsls	r3, r5, #3
    1b18:	1b5d      	subs	r5, r3, r5
    1b1a:	00ad      	lsls	r5, r5, #2
    1b1c:	4b07      	ldr	r3, [pc, #28]	; (1b3c <_adc_init+0x100>)
    1b1e:	195d      	adds	r5, r3, r5
    1b20:	786b      	ldrb	r3, [r5, #1]
    1b22:	7023      	strb	r3, [r4, #0]
    1b24:	2000      	movs	r0, #0
    1b26:	bd70      	pop	{r4, r5, r6, pc}
    1b28:	bdffc000 	.word	0xbdffc000
    1b2c:	00003130 	.word	0x00003130
    1b30:	000019c9 	.word	0x000019c9
    1b34:	00806024 	.word	0x00806024
    1b38:	00806020 	.word	0x00806020
    1b3c:	00003114 	.word	0x00003114

00001b40 <_adc_sync_init>:
    1b40:	b570      	push	{r4, r5, r6, lr}
    1b42:	0005      	movs	r5, r0
    1b44:	000c      	movs	r4, r1
    1b46:	1e43      	subs	r3, r0, #1
    1b48:	4198      	sbcs	r0, r3
    1b4a:	b2c0      	uxtb	r0, r0
    1b4c:	22c5      	movs	r2, #197	; 0xc5
    1b4e:	4906      	ldr	r1, [pc, #24]	; (1b68 <_adc_sync_init+0x28>)
    1b50:	4b06      	ldr	r3, [pc, #24]	; (1b6c <_adc_sync_init+0x2c>)
    1b52:	4798      	blx	r3
    1b54:	602c      	str	r4, [r5, #0]
    1b56:	0020      	movs	r0, r4
    1b58:	4b05      	ldr	r3, [pc, #20]	; (1b70 <_adc_sync_init+0x30>)
    1b5a:	4798      	blx	r3
    1b5c:	0001      	movs	r1, r0
    1b5e:	0020      	movs	r0, r4
    1b60:	4b04      	ldr	r3, [pc, #16]	; (1b74 <_adc_sync_init+0x34>)
    1b62:	4798      	blx	r3
    1b64:	bd70      	pop	{r4, r5, r6, pc}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	00003130 	.word	0x00003130
    1b6c:	000019c9 	.word	0x000019c9
    1b70:	00001a37 	.word	0x00001a37
    1b74:	00001a3d 	.word	0x00001a3d

00001b78 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    1b78:	f3bf 8f4f 	dsb	sy
    1b7c:	bf30      	wfi
    1b7e:	4770      	bx	lr

00001b80 <_get_cycles_for_us>:
    1b80:	b510      	push	{r4, lr}
    1b82:	0003      	movs	r3, r0
    1b84:	2064      	movs	r0, #100	; 0x64
    1b86:	4358      	muls	r0, r3
    1b88:	3801      	subs	r0, #1
    1b8a:	2164      	movs	r1, #100	; 0x64
    1b8c:	4b01      	ldr	r3, [pc, #4]	; (1b94 <_get_cycles_for_us+0x14>)
    1b8e:	4798      	blx	r3
    1b90:	3001      	adds	r0, #1
    1b92:	bd10      	pop	{r4, pc}
    1b94:	00002e65 	.word	0x00002e65

00001b98 <_get_cycles_for_ms>:
    1b98:	23fa      	movs	r3, #250	; 0xfa
    1b9a:	009b      	lsls	r3, r3, #2
    1b9c:	4358      	muls	r0, r3
    1b9e:	4770      	bx	lr

00001ba0 <_init_chip>:
    1ba0:	b510      	push	{r4, lr}
    1ba2:	4b06      	ldr	r3, [pc, #24]	; (1bbc <_init_chip+0x1c>)
    1ba4:	685a      	ldr	r2, [r3, #4]
    1ba6:	605a      	str	r2, [r3, #4]
    1ba8:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <_init_chip+0x20>)
    1baa:	4798      	blx	r3
    1bac:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <_init_chip+0x24>)
    1bae:	4798      	blx	r3
    1bb0:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <_init_chip+0x28>)
    1bb2:	4798      	blx	r3
    1bb4:	20ff      	movs	r0, #255	; 0xff
    1bb6:	4b05      	ldr	r3, [pc, #20]	; (1bcc <_init_chip+0x2c>)
    1bb8:	4798      	blx	r3
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	41004000 	.word	0x41004000
    1bc0:	00002205 	.word	0x00002205
    1bc4:	00002759 	.word	0x00002759
    1bc8:	000027a1 	.word	0x000027a1
    1bcc:	00001e35 	.word	0x00001e35

00001bd0 <_dac_init>:
    1bd0:	79c3      	ldrb	r3, [r0, #7]
    1bd2:	09db      	lsrs	r3, r3, #7
    1bd4:	d1fc      	bne.n	1bd0 <_dac_init>
    1bd6:	79c3      	ldrb	r3, [r0, #7]
    1bd8:	09db      	lsrs	r3, r3, #7
    1bda:	d1fc      	bne.n	1bd6 <_dac_init+0x6>
    1bdc:	7803      	ldrb	r3, [r0, #0]
    1bde:	079b      	lsls	r3, r3, #30
    1be0:	d507      	bpl.n	1bf2 <_dac_init+0x22>
    1be2:	2300      	movs	r3, #0
    1be4:	7003      	strb	r3, [r0, #0]
    1be6:	79c3      	ldrb	r3, [r0, #7]
    1be8:	09db      	lsrs	r3, r3, #7
    1bea:	d1fc      	bne.n	1be6 <_dac_init+0x16>
    1bec:	79c3      	ldrb	r3, [r0, #7]
    1bee:	09db      	lsrs	r3, r3, #7
    1bf0:	d1fc      	bne.n	1bec <_dac_init+0x1c>
    1bf2:	2301      	movs	r3, #1
    1bf4:	7003      	strb	r3, [r0, #0]
    1bf6:	79c3      	ldrb	r3, [r0, #7]
    1bf8:	09db      	lsrs	r3, r3, #7
    1bfa:	d1fc      	bne.n	1bf6 <_dac_init+0x26>
    1bfc:	79c3      	ldrb	r3, [r0, #7]
    1bfe:	09db      	lsrs	r3, r3, #7
    1c00:	d1fc      	bne.n	1bfc <_dac_init+0x2c>
    1c02:	7083      	strb	r3, [r0, #2]
    1c04:	2201      	movs	r2, #1
    1c06:	7042      	strb	r2, [r0, #1]
    1c08:	7003      	strb	r3, [r0, #0]
    1c0a:	79c3      	ldrb	r3, [r0, #7]
    1c0c:	09db      	lsrs	r3, r3, #7
    1c0e:	d1fc      	bne.n	1c0a <_dac_init+0x3a>
    1c10:	2000      	movs	r0, #0
    1c12:	4770      	bx	lr

00001c14 <_dac_sync_init>:
    1c14:	b570      	push	{r4, r5, r6, lr}
    1c16:	0005      	movs	r5, r0
    1c18:	000c      	movs	r4, r1
    1c1a:	1e43      	subs	r3, r0, #1
    1c1c:	4198      	sbcs	r0, r3
    1c1e:	b2c0      	uxtb	r0, r0
    1c20:	2249      	movs	r2, #73	; 0x49
    1c22:	4904      	ldr	r1, [pc, #16]	; (1c34 <_dac_sync_init+0x20>)
    1c24:	4b04      	ldr	r3, [pc, #16]	; (1c38 <_dac_sync_init+0x24>)
    1c26:	4798      	blx	r3
    1c28:	602c      	str	r4, [r5, #0]
    1c2a:	0020      	movs	r0, r4
    1c2c:	4b03      	ldr	r3, [pc, #12]	; (1c3c <_dac_sync_init+0x28>)
    1c2e:	4798      	blx	r3
    1c30:	bd70      	pop	{r4, r5, r6, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00003148 	.word	0x00003148
    1c38:	000019c9 	.word	0x000019c9
    1c3c:	00001bd1 	.word	0x00001bd1

00001c40 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c40:	4a22      	ldr	r2, [pc, #136]	; (1ccc <_ext_irq_init+0x8c>)
    1c42:	7853      	ldrb	r3, [r2, #1]
    1c44:	09db      	lsrs	r3, r3, #7
    1c46:	d1fc      	bne.n	1c42 <_ext_irq_init+0x2>
    1c48:	4a20      	ldr	r2, [pc, #128]	; (1ccc <_ext_irq_init+0x8c>)
    1c4a:	7853      	ldrb	r3, [r2, #1]
    1c4c:	09db      	lsrs	r3, r3, #7
    1c4e:	d1fc      	bne.n	1c4a <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1c50:	4b1e      	ldr	r3, [pc, #120]	; (1ccc <_ext_irq_init+0x8c>)
    1c52:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1c54:	079b      	lsls	r3, r3, #30
    1c56:	d50a      	bpl.n	1c6e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1c58:	2200      	movs	r2, #0
    1c5a:	4b1c      	ldr	r3, [pc, #112]	; (1ccc <_ext_irq_init+0x8c>)
    1c5c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c5e:	001a      	movs	r2, r3
    1c60:	7853      	ldrb	r3, [r2, #1]
    1c62:	09db      	lsrs	r3, r3, #7
    1c64:	d1fc      	bne.n	1c60 <_ext_irq_init+0x20>
    1c66:	4a19      	ldr	r2, [pc, #100]	; (1ccc <_ext_irq_init+0x8c>)
    1c68:	7853      	ldrb	r3, [r2, #1]
    1c6a:	09db      	lsrs	r3, r3, #7
    1c6c:	d1fc      	bne.n	1c68 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    1c6e:	2201      	movs	r2, #1
    1c70:	4b16      	ldr	r3, [pc, #88]	; (1ccc <_ext_irq_init+0x8c>)
    1c72:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c74:	001a      	movs	r2, r3
    1c76:	7853      	ldrb	r3, [r2, #1]
    1c78:	09db      	lsrs	r3, r3, #7
    1c7a:	d1fc      	bne.n	1c76 <_ext_irq_init+0x36>
    1c7c:	4a13      	ldr	r2, [pc, #76]	; (1ccc <_ext_irq_init+0x8c>)
    1c7e:	7853      	ldrb	r3, [r2, #1]
    1c80:	09db      	lsrs	r3, r3, #7
    1c82:	d1fc      	bne.n	1c7e <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1c84:	4b11      	ldr	r3, [pc, #68]	; (1ccc <_ext_irq_init+0x8c>)
    1c86:	2200      	movs	r2, #0
    1c88:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1c8a:	4a11      	ldr	r2, [pc, #68]	; (1cd0 <_ext_irq_init+0x90>)
    1c8c:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1c8e:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1c90:	22dd      	movs	r2, #221	; 0xdd
    1c92:	0512      	lsls	r2, r2, #20
    1c94:	619a      	str	r2, [r3, #24]
    1c96:	4a0f      	ldr	r2, [pc, #60]	; (1cd4 <_ext_irq_init+0x94>)
    1c98:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1c9a:	781a      	ldrb	r2, [r3, #0]
    1c9c:	2102      	movs	r1, #2
    1c9e:	430a      	orrs	r2, r1
    1ca0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1ca2:	001a      	movs	r2, r3
    1ca4:	7853      	ldrb	r3, [r2, #1]
    1ca6:	09db      	lsrs	r3, r3, #7
    1ca8:	d1fc      	bne.n	1ca4 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1caa:	4b0b      	ldr	r3, [pc, #44]	; (1cd8 <_ext_irq_init+0x98>)
    1cac:	2210      	movs	r2, #16
    1cae:	2180      	movs	r1, #128	; 0x80
    1cb0:	505a      	str	r2, [r3, r1]
    1cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cb6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cba:	3101      	adds	r1, #1
    1cbc:	31ff      	adds	r1, #255	; 0xff
    1cbe:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc0:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1cc2:	4b06      	ldr	r3, [pc, #24]	; (1cdc <_ext_irq_init+0x9c>)
    1cc4:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1cc6:	2000      	movs	r0, #0
    1cc8:	4770      	bx	lr
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	40001800 	.word	0x40001800
    1cd0:	0000a360 	.word	0x0000a360
    1cd4:	d0d000dd 	.word	0xd0d000dd
    1cd8:	e000e100 	.word	0xe000e100
    1cdc:	20000088 	.word	0x20000088

00001ce0 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1ce0:	2805      	cmp	r0, #5
    1ce2:	d015      	beq.n	1d10 <_ext_irq_enable+0x30>
    1ce4:	2806      	cmp	r0, #6
    1ce6:	d00b      	beq.n	1d00 <_ext_irq_enable+0x20>
    1ce8:	281c      	cmp	r0, #28
    1cea:	d00b      	beq.n	1d04 <_ext_irq_enable+0x24>
    1cec:	2809      	cmp	r0, #9
    1cee:	d00b      	beq.n	1d08 <_ext_irq_enable+0x28>
    1cf0:	2819      	cmp	r0, #25
    1cf2:	d00b      	beq.n	1d0c <_ext_irq_enable+0x2c>
    1cf4:	2305      	movs	r3, #5
    1cf6:	281b      	cmp	r0, #27
    1cf8:	d00b      	beq.n	1d12 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    1cfa:	200d      	movs	r0, #13
    1cfc:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1cfe:	4770      	bx	lr
		if (_map[i].pin == pin) {
    1d00:	2301      	movs	r3, #1
    1d02:	e006      	b.n	1d12 <_ext_irq_enable+0x32>
    1d04:	2302      	movs	r3, #2
    1d06:	e004      	b.n	1d12 <_ext_irq_enable+0x32>
    1d08:	2303      	movs	r3, #3
    1d0a:	e002      	b.n	1d12 <_ext_irq_enable+0x32>
    1d0c:	2304      	movs	r3, #4
    1d0e:	e000      	b.n	1d12 <_ext_irq_enable+0x32>
    1d10:	2300      	movs	r3, #0
			extint = _map[i].extint;
    1d12:	00db      	lsls	r3, r3, #3
    1d14:	4a0a      	ldr	r2, [pc, #40]	; (1d40 <_ext_irq_enable+0x60>)
    1d16:	5c9a      	ldrb	r2, [r3, r2]
	if (INVALID_EXTINT_NUMBER == extint) {
    1d18:	2aff      	cmp	r2, #255	; 0xff
    1d1a:	d00e      	beq.n	1d3a <_ext_irq_enable+0x5a>
	if (enable) {
    1d1c:	2900      	cmp	r1, #0
    1d1e:	d106      	bne.n	1d2e <_ext_irq_enable+0x4e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1d20:	2301      	movs	r3, #1
    1d22:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1d24:	4a07      	ldr	r2, [pc, #28]	; (1d44 <_ext_irq_enable+0x64>)
    1d26:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d28:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1d2a:	2000      	movs	r0, #0
    1d2c:	e7e7      	b.n	1cfe <_ext_irq_enable+0x1e>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1d2e:	2301      	movs	r3, #1
    1d30:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1d32:	4a04      	ldr	r2, [pc, #16]	; (1d44 <_ext_irq_enable+0x64>)
    1d34:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1d36:	2000      	movs	r0, #0
    1d38:	e7e1      	b.n	1cfe <_ext_irq_enable+0x1e>
		return ERR_INVALID_ARG;
    1d3a:	200d      	movs	r0, #13
    1d3c:	4240      	negs	r0, r0
    1d3e:	e7de      	b.n	1cfe <_ext_irq_enable+0x1e>
    1d40:	00003160 	.word	0x00003160
    1d44:	40001800 	.word	0x40001800

00001d48 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d4a:	46d6      	mov	lr, sl
    1d4c:	464f      	mov	r7, r9
    1d4e:	4646      	mov	r6, r8
    1d50:	b5c0      	push	{r6, r7, lr}
    1d52:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    1d54:	4b31      	ldr	r3, [pc, #196]	; (1e1c <EIC_Handler+0xd4>)
    1d56:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1d58:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1d5a:	400a      	ands	r2, r1
    1d5c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1d5e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d60:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1d62:	4b2f      	ldr	r3, [pc, #188]	; (1e20 <EIC_Handler+0xd8>)
    1d64:	6818      	ldr	r0, [r3, #0]
    1d66:	1e43      	subs	r3, r0, #1
    1d68:	4198      	sbcs	r0, r3
    1d6a:	b2c0      	uxtb	r0, r0
    1d6c:	22d2      	movs	r2, #210	; 0xd2
    1d6e:	492d      	ldr	r1, [pc, #180]	; (1e24 <EIC_Handler+0xdc>)
    1d70:	4b2d      	ldr	r3, [pc, #180]	; (1e28 <EIC_Handler+0xe0>)
    1d72:	4798      	blx	r3

	while (flags) {
    1d74:	9b01      	ldr	r3, [sp, #4]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d04a      	beq.n	1e10 <EIC_Handler+0xc8>
    1d7a:	2301      	movs	r3, #1
    1d7c:	425b      	negs	r3, r3
    1d7e:	469a      	mov	sl, r3
		pos = ffs(flags) - 1;
    1d80:	4b2a      	ldr	r3, [pc, #168]	; (1e2c <EIC_Handler+0xe4>)
    1d82:	4698      	mov	r8, r3
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1d84:	4b2a      	ldr	r3, [pc, #168]	; (1e30 <EIC_Handler+0xe8>)
    1d86:	4699      	mov	r9, r3
				if (_map[middle].extint == pos) {
    1d88:	001d      	movs	r5, r3
    1d8a:	e03a      	b.n	1e02 <EIC_Handler+0xba>
    1d8c:	2303      	movs	r3, #3
					pin = _map[middle].pin;
    1d8e:	00db      	lsls	r3, r3, #3
    1d90:	444b      	add	r3, r9
    1d92:	685b      	ldr	r3, [r3, #4]
    1d94:	469a      	mov	sl, r3
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1d96:	4653      	mov	r3, sl
    1d98:	3301      	adds	r3, #1
    1d9a:	d003      	beq.n	1da4 <EIC_Handler+0x5c>
				callback(pin);
    1d9c:	4b20      	ldr	r3, [pc, #128]	; (1e20 <EIC_Handler+0xd8>)
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	4650      	mov	r0, sl
    1da2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1da4:	9b01      	ldr	r3, [sp, #4]
    1da6:	2201      	movs	r2, #1
    1da8:	40a2      	lsls	r2, r4
    1daa:	4393      	bics	r3, r2
    1dac:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1dae:	9801      	ldr	r0, [sp, #4]
    1db0:	4b1e      	ldr	r3, [pc, #120]	; (1e2c <EIC_Handler+0xe4>)
    1db2:	4798      	blx	r3
    1db4:	3801      	subs	r0, #1
    1db6:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1db8:	1c63      	adds	r3, r4, #1
    1dba:	d018      	beq.n	1dee <EIC_Handler+0xa6>
				if (_map[middle].extint == pos) {
    1dbc:	2c09      	cmp	r4, #9
    1dbe:	d0e5      	beq.n	1d8c <EIC_Handler+0x44>
    1dc0:	2709      	movs	r7, #9
    1dc2:	2203      	movs	r2, #3
    1dc4:	2606      	movs	r6, #6
    1dc6:	2100      	movs	r1, #0
    1dc8:	20ff      	movs	r0, #255	; 0xff
    1dca:	e00b      	b.n	1de4 <EIC_Handler+0x9c>
					upper = middle - 1;
    1dcc:	3a01      	subs	r2, #1
    1dce:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    1dd0:	42b1      	cmp	r1, r6
    1dd2:	d8e0      	bhi.n	1d96 <EIC_Handler+0x4e>
				middle = (upper + lower) >> 1;
    1dd4:	1873      	adds	r3, r6, r1
    1dd6:	105b      	asrs	r3, r3, #1
    1dd8:	b2da      	uxtb	r2, r3
    1dda:	4003      	ands	r3, r0
				if (_map[middle].extint == pos) {
    1ddc:	00df      	lsls	r7, r3, #3
    1dde:	5d7f      	ldrb	r7, [r7, r5]
    1de0:	42a7      	cmp	r7, r4
    1de2:	d0d4      	beq.n	1d8e <EIC_Handler+0x46>
				if (_map[middle].extint < pos) {
    1de4:	42bc      	cmp	r4, r7
    1de6:	ddf1      	ble.n	1dcc <EIC_Handler+0x84>
					lower = middle + 1;
    1de8:	3201      	adds	r2, #1
    1dea:	b2d1      	uxtb	r1, r2
    1dec:	e7f0      	b.n	1dd0 <EIC_Handler+0x88>
	return ((Eic *)hw)->INTFLAG.reg;
    1dee:	4b0b      	ldr	r3, [pc, #44]	; (1e1c <EIC_Handler+0xd4>)
    1df0:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1df2:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1df4:	400a      	ands	r2, r1
    1df6:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1df8:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1dfa:	611a      	str	r2, [r3, #16]
	while (flags) {
    1dfc:	9b01      	ldr	r3, [sp, #4]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d006      	beq.n	1e10 <EIC_Handler+0xc8>
		pos = ffs(flags) - 1;
    1e02:	9801      	ldr	r0, [sp, #4]
    1e04:	47c0      	blx	r8
    1e06:	3801      	subs	r0, #1
    1e08:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1e0a:	1c63      	adds	r3, r4, #1
    1e0c:	d1d6      	bne.n	1dbc <EIC_Handler+0x74>
    1e0e:	e7ee      	b.n	1dee <EIC_Handler+0xa6>
	}
}
    1e10:	b002      	add	sp, #8
    1e12:	bc1c      	pop	{r2, r3, r4}
    1e14:	4690      	mov	r8, r2
    1e16:	4699      	mov	r9, r3
    1e18:	46a2      	mov	sl, r4
    1e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e1c:	40001800 	.word	0x40001800
    1e20:	20000088 	.word	0x20000088
    1e24:	00003190 	.word	0x00003190
    1e28:	000019c9 	.word	0x000019c9
    1e2c:	00002f7d 	.word	0x00002f7d
    1e30:	00003160 	.word	0x00003160

00001e34 <_gclk_init_generators_by_fref>:
    1e34:	07c3      	lsls	r3, r0, #31
    1e36:	d50a      	bpl.n	1e4e <_gclk_init_generators_by_fref+0x1a>
    1e38:	4b05      	ldr	r3, [pc, #20]	; (1e50 <_gclk_init_generators_by_fref+0x1c>)
    1e3a:	2280      	movs	r2, #128	; 0x80
    1e3c:	0052      	lsls	r2, r2, #1
    1e3e:	609a      	str	r2, [r3, #8]
    1e40:	2283      	movs	r2, #131	; 0x83
    1e42:	0252      	lsls	r2, r2, #9
    1e44:	605a      	str	r2, [r3, #4]
    1e46:	001a      	movs	r2, r3
    1e48:	7853      	ldrb	r3, [r2, #1]
    1e4a:	09db      	lsrs	r3, r3, #7
    1e4c:	d1fc      	bne.n	1e48 <_gclk_init_generators_by_fref+0x14>
    1e4e:	4770      	bx	lr
    1e50:	40000c00 	.word	0x40000c00

00001e54 <_flash_program>:
    1e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e56:	0004      	movs	r4, r0
    1e58:	000d      	movs	r5, r1
    1e5a:	0017      	movs	r7, r2
    1e5c:	001e      	movs	r6, r3
    1e5e:	2301      	movs	r3, #1
    1e60:	404b      	eors	r3, r1
    1e62:	2001      	movs	r0, #1
    1e64:	4018      	ands	r0, r3
    1e66:	22c5      	movs	r2, #197	; 0xc5
    1e68:	0052      	lsls	r2, r2, #1
    1e6a:	4919      	ldr	r1, [pc, #100]	; (1ed0 <_flash_program+0x7c>)
    1e6c:	4b19      	ldr	r3, [pc, #100]	; (1ed4 <_flash_program+0x80>)
    1e6e:	4798      	blx	r3
    1e70:	0868      	lsrs	r0, r5, #1
    1e72:	2201      	movs	r2, #1
    1e74:	7d23      	ldrb	r3, [r4, #20]
    1e76:	4213      	tst	r3, r2
    1e78:	d0fc      	beq.n	1e74 <_flash_program+0x20>
    1e7a:	4b17      	ldr	r3, [pc, #92]	; (1ed8 <_flash_program+0x84>)
    1e7c:	8023      	strh	r3, [r4, #0]
    1e7e:	2201      	movs	r2, #1
    1e80:	7d23      	ldrb	r3, [r4, #20]
    1e82:	4213      	tst	r3, r2
    1e84:	d0fc      	beq.n	1e80 <_flash_program+0x2c>
    1e86:	2320      	movs	r3, #32
    1e88:	33ff      	adds	r3, #255	; 0xff
    1e8a:	8323      	strh	r3, [r4, #24]
    1e8c:	2e00      	cmp	r6, #0
    1e8e:	d00e      	beq.n	1eae <_flash_program+0x5a>
    1e90:	3b1f      	subs	r3, #31
    1e92:	3bff      	subs	r3, #255	; 0xff
    1e94:	0029      	movs	r1, r5
    1e96:	4399      	bics	r1, r3
    1e98:	2300      	movs	r3, #0
    1e9a:	5cfd      	ldrb	r5, [r7, r3]
    1e9c:	b2aa      	uxth	r2, r5
    1e9e:	2b3e      	cmp	r3, #62	; 0x3e
    1ea0:	d910      	bls.n	1ec4 <_flash_program+0x70>
    1ea2:	800a      	strh	r2, [r1, #0]
    1ea4:	3302      	adds	r3, #2
    1ea6:	b29b      	uxth	r3, r3
    1ea8:	3102      	adds	r1, #2
    1eaa:	429e      	cmp	r6, r3
    1eac:	d8f5      	bhi.n	1e9a <_flash_program+0x46>
    1eae:	2201      	movs	r2, #1
    1eb0:	7d23      	ldrb	r3, [r4, #20]
    1eb2:	4213      	tst	r3, r2
    1eb4:	d0fc      	beq.n	1eb0 <_flash_program+0x5c>
    1eb6:	61e0      	str	r0, [r4, #28]
    1eb8:	4b08      	ldr	r3, [pc, #32]	; (1edc <_flash_program+0x88>)
    1eba:	9a06      	ldr	r2, [sp, #24]
    1ebc:	4313      	orrs	r3, r2
    1ebe:	b29b      	uxth	r3, r3
    1ec0:	8023      	strh	r3, [r4, #0]
    1ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ec4:	18fa      	adds	r2, r7, r3
    1ec6:	7852      	ldrb	r2, [r2, #1]
    1ec8:	0212      	lsls	r2, r2, #8
    1eca:	432a      	orrs	r2, r5
    1ecc:	e7e9      	b.n	1ea2 <_flash_program+0x4e>
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	000031a8 	.word	0x000031a8
    1ed4:	000019c9 	.word	0x000019c9
    1ed8:	ffffa544 	.word	0xffffa544
    1edc:	ffffa500 	.word	0xffffa500

00001ee0 <_flash_init>:
    1ee0:	b570      	push	{r4, r5, r6, lr}
    1ee2:	0005      	movs	r5, r0
    1ee4:	000c      	movs	r4, r1
    1ee6:	2800      	cmp	r0, #0
    1ee8:	d01d      	beq.n	1f26 <_flash_init+0x46>
    1eea:	4b10      	ldr	r3, [pc, #64]	; (1f2c <_flash_init+0x4c>)
    1eec:	18c8      	adds	r0, r1, r3
    1eee:	4243      	negs	r3, r0
    1ef0:	4158      	adcs	r0, r3
    1ef2:	b2c0      	uxtb	r0, r0
    1ef4:	2246      	movs	r2, #70	; 0x46
    1ef6:	490e      	ldr	r1, [pc, #56]	; (1f30 <_flash_init+0x50>)
    1ef8:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <_flash_init+0x54>)
    1efa:	4798      	blx	r3
    1efc:	612c      	str	r4, [r5, #16]
    1efe:	6862      	ldr	r2, [r4, #4]
    1f00:	239e      	movs	r3, #158	; 0x9e
    1f02:	4013      	ands	r3, r2
    1f04:	6063      	str	r3, [r4, #4]
    1f06:	4b0c      	ldr	r3, [pc, #48]	; (1f38 <_flash_init+0x58>)
    1f08:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f0a:	4b0c      	ldr	r3, [pc, #48]	; (1f3c <_flash_init+0x5c>)
    1f0c:	2220      	movs	r2, #32
    1f0e:	2180      	movs	r1, #128	; 0x80
    1f10:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f16:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f1a:	3101      	adds	r1, #1
    1f1c:	31ff      	adds	r1, #255	; 0xff
    1f1e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f20:	601a      	str	r2, [r3, #0]
    1f22:	2000      	movs	r0, #0
    1f24:	bd70      	pop	{r4, r5, r6, pc}
    1f26:	2000      	movs	r0, #0
    1f28:	e7e4      	b.n	1ef4 <_flash_init+0x14>
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	beffc000 	.word	0xbeffc000
    1f30:	000031a8 	.word	0x000031a8
    1f34:	000019c9 	.word	0x000019c9
    1f38:	2000008c 	.word	0x2000008c
    1f3c:	e000e100 	.word	0xe000e100

00001f40 <_flash_get_page_size>:
    1f40:	2040      	movs	r0, #64	; 0x40
    1f42:	4770      	bx	lr

00001f44 <_flash_get_total_pages>:
    1f44:	2080      	movs	r0, #128	; 0x80
    1f46:	0140      	lsls	r0, r0, #5
    1f48:	4770      	bx	lr

00001f4a <_flash_read>:
    1f4a:	b570      	push	{r4, r5, r6, lr}
    1f4c:	084c      	lsrs	r4, r1, #1
    1f4e:	6905      	ldr	r5, [r0, #16]
    1f50:	2601      	movs	r6, #1
    1f52:	7d28      	ldrb	r0, [r5, #20]
    1f54:	4230      	tst	r0, r6
    1f56:	d0fc      	beq.n	1f52 <_flash_read+0x8>
    1f58:	2020      	movs	r0, #32
    1f5a:	30ff      	adds	r0, #255	; 0xff
    1f5c:	8328      	strh	r0, [r5, #24]
    1f5e:	2000      	movs	r0, #0
    1f60:	07cd      	lsls	r5, r1, #31
    1f62:	d505      	bpl.n	1f70 <_flash_read+0x26>
    1f64:	3401      	adds	r4, #1
    1f66:	3001      	adds	r0, #1
    1f68:	4381      	bics	r1, r0
    1f6a:	8809      	ldrh	r1, [r1, #0]
    1f6c:	0a09      	lsrs	r1, r1, #8
    1f6e:	7011      	strb	r1, [r2, #0]
    1f70:	4298      	cmp	r0, r3
    1f72:	d211      	bcs.n	1f98 <_flash_read+0x4e>
    1f74:	1812      	adds	r2, r2, r0
    1f76:	0064      	lsls	r4, r4, #1
    1f78:	1a24      	subs	r4, r4, r0
    1f7a:	1e5d      	subs	r5, r3, #1
    1f7c:	e003      	b.n	1f86 <_flash_read+0x3c>
    1f7e:	3002      	adds	r0, #2
    1f80:	3202      	adds	r2, #2
    1f82:	4283      	cmp	r3, r0
    1f84:	d908      	bls.n	1f98 <_flash_read+0x4e>
    1f86:	1821      	adds	r1, r4, r0
    1f88:	8809      	ldrh	r1, [r1, #0]
    1f8a:	b289      	uxth	r1, r1
    1f8c:	7011      	strb	r1, [r2, #0]
    1f8e:	4285      	cmp	r5, r0
    1f90:	d9f5      	bls.n	1f7e <_flash_read+0x34>
    1f92:	0a09      	lsrs	r1, r1, #8
    1f94:	7051      	strb	r1, [r2, #1]
    1f96:	e7f2      	b.n	1f7e <_flash_read+0x34>
    1f98:	bd70      	pop	{r4, r5, r6, pc}
	...

00001f9c <_flash_write>:
    1f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9e:	46de      	mov	lr, fp
    1fa0:	4657      	mov	r7, sl
    1fa2:	464e      	mov	r6, r9
    1fa4:	4645      	mov	r5, r8
    1fa6:	b5e0      	push	{r5, r6, r7, lr}
    1fa8:	b0c5      	sub	sp, #276	; 0x114
    1faa:	4683      	mov	fp, r0
    1fac:	0016      	movs	r6, r2
    1fae:	001d      	movs	r5, r3
    1fb0:	000c      	movs	r4, r1
    1fb2:	e02e      	b.n	2012 <STACK_SIZE+0x12>
    1fb4:	46ba      	mov	sl, r7
    1fb6:	4667      	mov	r7, ip
    1fb8:	465b      	mov	r3, fp
    1fba:	691a      	ldr	r2, [r3, #16]
    1fbc:	2101      	movs	r1, #1
    1fbe:	7d13      	ldrb	r3, [r2, #20]
    1fc0:	420b      	tst	r3, r1
    1fc2:	d0fc      	beq.n	1fbe <_flash_write+0x22>
    1fc4:	2320      	movs	r3, #32
    1fc6:	33ff      	adds	r3, #255	; 0xff
    1fc8:	8313      	strh	r3, [r2, #24]
    1fca:	464b      	mov	r3, r9
    1fcc:	085b      	lsrs	r3, r3, #1
    1fce:	61d3      	str	r3, [r2, #28]
    1fd0:	4b36      	ldr	r3, [pc, #216]	; (20ac <STACK_SIZE+0xac>)
    1fd2:	8013      	strh	r3, [r2, #0]
    1fd4:	002b      	movs	r3, r5
    1fd6:	003d      	movs	r5, r7
    1fd8:	464f      	mov	r7, r9
    1fda:	46a0      	mov	r8, r4
    1fdc:	9703      	str	r7, [sp, #12]
    1fde:	46b1      	mov	r9, r6
    1fe0:	465e      	mov	r6, fp
    1fe2:	469b      	mov	fp, r3
    1fe4:	9b03      	ldr	r3, [sp, #12]
    1fe6:	1afa      	subs	r2, r7, r3
    1fe8:	ab04      	add	r3, sp, #16
    1fea:	469c      	mov	ip, r3
    1fec:	4462      	add	r2, ip
    1fee:	2304      	movs	r3, #4
    1ff0:	9300      	str	r3, [sp, #0]
    1ff2:	333c      	adds	r3, #60	; 0x3c
    1ff4:	0039      	movs	r1, r7
    1ff6:	6930      	ldr	r0, [r6, #16]
    1ff8:	4c2d      	ldr	r4, [pc, #180]	; (20b0 <STACK_SIZE+0xb0>)
    1ffa:	47a0      	blx	r4
    1ffc:	3740      	adds	r7, #64	; 0x40
    1ffe:	42bd      	cmp	r5, r7
    2000:	d1f0      	bne.n	1fe4 <_flash_write+0x48>
    2002:	4644      	mov	r4, r8
    2004:	465d      	mov	r5, fp
    2006:	46b3      	mov	fp, r6
    2008:	464e      	mov	r6, r9
    200a:	192b      	adds	r3, r5, r4
    200c:	3b01      	subs	r3, #1
    200e:	459a      	cmp	sl, r3
    2010:	d244      	bcs.n	209c <STACK_SIZE+0x9c>
    2012:	23ff      	movs	r3, #255	; 0xff
    2014:	0022      	movs	r2, r4
    2016:	439a      	bics	r2, r3
    2018:	4691      	mov	r9, r2
    201a:	444b      	add	r3, r9
    201c:	469a      	mov	sl, r3
    201e:	2380      	movs	r3, #128	; 0x80
    2020:	005b      	lsls	r3, r3, #1
    2022:	444b      	add	r3, r9
    2024:	4698      	mov	r8, r3
    2026:	0017      	movs	r7, r2
    2028:	4642      	mov	r2, r8
    202a:	9203      	str	r2, [sp, #12]
    202c:	46a0      	mov	r8, r4
    202e:	464c      	mov	r4, r9
    2030:	46b1      	mov	r9, r6
    2032:	465e      	mov	r6, fp
    2034:	46ab      	mov	fp, r5
    2036:	1b3a      	subs	r2, r7, r4
    2038:	ab04      	add	r3, sp, #16
    203a:	469c      	mov	ip, r3
    203c:	4462      	add	r2, ip
    203e:	2340      	movs	r3, #64	; 0x40
    2040:	0039      	movs	r1, r7
    2042:	0030      	movs	r0, r6
    2044:	4d1b      	ldr	r5, [pc, #108]	; (20b4 <STACK_SIZE+0xb4>)
    2046:	47a8      	blx	r5
    2048:	3740      	adds	r7, #64	; 0x40
    204a:	9b03      	ldr	r3, [sp, #12]
    204c:	429f      	cmp	r7, r3
    204e:	d1f2      	bne.n	2036 <STACK_SIZE+0x36>
    2050:	465d      	mov	r5, fp
    2052:	46b3      	mov	fp, r6
    2054:	464e      	mov	r6, r9
    2056:	46a1      	mov	r9, r4
    2058:	4644      	mov	r4, r8
    205a:	464b      	mov	r3, r9
    205c:	1ae3      	subs	r3, r4, r3
    205e:	0999      	lsrs	r1, r3, #6
    2060:	223f      	movs	r2, #63	; 0x3f
    2062:	4013      	ands	r3, r2
    2064:	4554      	cmp	r4, sl
    2066:	d8a7      	bhi.n	1fb8 <_flash_write+0x1c>
    2068:	2d00      	cmp	r5, #0
    206a:	d0a5      	beq.n	1fb8 <_flash_write+0x1c>
    206c:	46bc      	mov	ip, r7
    206e:	4657      	mov	r7, sl
    2070:	018a      	lsls	r2, r1, #6
    2072:	a804      	add	r0, sp, #16
    2074:	4680      	mov	r8, r0
    2076:	4442      	add	r2, r8
    2078:	7830      	ldrb	r0, [r6, #0]
    207a:	54d0      	strb	r0, [r2, r3]
    207c:	3301      	adds	r3, #1
    207e:	223f      	movs	r2, #63	; 0x3f
    2080:	4013      	ands	r3, r2
    2082:	425a      	negs	r2, r3
    2084:	415a      	adcs	r2, r3
    2086:	1889      	adds	r1, r1, r2
    2088:	3401      	adds	r4, #1
    208a:	3601      	adds	r6, #1
    208c:	3d01      	subs	r5, #1
    208e:	42a7      	cmp	r7, r4
    2090:	d390      	bcc.n	1fb4 <_flash_write+0x18>
    2092:	2d00      	cmp	r5, #0
    2094:	d1ec      	bne.n	2070 <STACK_SIZE+0x70>
    2096:	46ba      	mov	sl, r7
    2098:	4667      	mov	r7, ip
    209a:	e78d      	b.n	1fb8 <_flash_write+0x1c>
    209c:	b045      	add	sp, #276	; 0x114
    209e:	bc3c      	pop	{r2, r3, r4, r5}
    20a0:	4690      	mov	r8, r2
    20a2:	4699      	mov	r9, r3
    20a4:	46a2      	mov	sl, r4
    20a6:	46ab      	mov	fp, r5
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	ffffa502 	.word	0xffffa502
    20b0:	00001e55 	.word	0x00001e55
    20b4:	00001f4b 	.word	0x00001f4b

000020b8 <_flash_erase>:
    20b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ba:	46d6      	mov	lr, sl
    20bc:	464f      	mov	r7, r9
    20be:	4646      	mov	r6, r8
    20c0:	b5c0      	push	{r6, r7, lr}
    20c2:	b090      	sub	sp, #64	; 0x40
    20c4:	0005      	movs	r5, r0
    20c6:	000c      	movs	r4, r1
    20c8:	0016      	movs	r6, r2
    20ca:	23ff      	movs	r3, #255	; 0xff
    20cc:	000f      	movs	r7, r1
    20ce:	439f      	bics	r7, r3
    20d0:	2240      	movs	r2, #64	; 0x40
    20d2:	21ff      	movs	r1, #255	; 0xff
    20d4:	4668      	mov	r0, sp
    20d6:	4b28      	ldr	r3, [pc, #160]	; (2178 <_flash_erase+0xc0>)
    20d8:	4798      	blx	r3
    20da:	42bc      	cmp	r4, r7
    20dc:	d048      	beq.n	2170 <_flash_erase+0xb8>
    20de:	1c7b      	adds	r3, r7, #1
    20e0:	33ff      	adds	r3, #255	; 0xff
    20e2:	469a      	mov	sl, r3
    20e4:	23c0      	movs	r3, #192	; 0xc0
    20e6:	4699      	mov	r9, r3
    20e8:	44a1      	add	r9, r4
    20ea:	4f24      	ldr	r7, [pc, #144]	; (217c <_flash_erase+0xc4>)
    20ec:	2340      	movs	r3, #64	; 0x40
    20ee:	466a      	mov	r2, sp
    20f0:	0021      	movs	r1, r4
    20f2:	0028      	movs	r0, r5
    20f4:	47b8      	blx	r7
    20f6:	3e01      	subs	r6, #1
    20f8:	2e00      	cmp	r6, #0
    20fa:	d033      	beq.n	2164 <_flash_erase+0xac>
    20fc:	3440      	adds	r4, #64	; 0x40
    20fe:	45a2      	cmp	sl, r4
    2100:	d001      	beq.n	2106 <_flash_erase+0x4e>
    2102:	454c      	cmp	r4, r9
    2104:	d1f2      	bne.n	20ec <_flash_erase+0x34>
    2106:	4654      	mov	r4, sl
    2108:	2e03      	cmp	r6, #3
    210a:	d91f      	bls.n	214c <_flash_erase+0x94>
    210c:	4654      	mov	r4, sl
    210e:	0030      	movs	r0, r6
    2110:	2101      	movs	r1, #1
    2112:	2320      	movs	r3, #32
    2114:	33ff      	adds	r3, #255	; 0xff
    2116:	4698      	mov	r8, r3
    2118:	4f19      	ldr	r7, [pc, #100]	; (2180 <_flash_erase+0xc8>)
    211a:	692a      	ldr	r2, [r5, #16]
    211c:	7d13      	ldrb	r3, [r2, #20]
    211e:	420b      	tst	r3, r1
    2120:	d0fc      	beq.n	211c <_flash_erase+0x64>
    2122:	4643      	mov	r3, r8
    2124:	8313      	strh	r3, [r2, #24]
    2126:	0863      	lsrs	r3, r4, #1
    2128:	61d3      	str	r3, [r2, #28]
    212a:	8017      	strh	r7, [r2, #0]
    212c:	3401      	adds	r4, #1
    212e:	34ff      	adds	r4, #255	; 0xff
    2130:	3804      	subs	r0, #4
    2132:	2803      	cmp	r0, #3
    2134:	d8f1      	bhi.n	211a <_flash_erase+0x62>
    2136:	4657      	mov	r7, sl
    2138:	3701      	adds	r7, #1
    213a:	37ff      	adds	r7, #255	; 0xff
    213c:	1f34      	subs	r4, r6, #4
    213e:	08a4      	lsrs	r4, r4, #2
    2140:	0224      	lsls	r4, r4, #8
    2142:	19e4      	adds	r4, r4, r7
    2144:	2303      	movs	r3, #3
    2146:	401e      	ands	r6, r3
    2148:	2e00      	cmp	r6, #0
    214a:	d00b      	beq.n	2164 <_flash_erase+0xac>
    214c:	2700      	movs	r7, #0
    214e:	4b0b      	ldr	r3, [pc, #44]	; (217c <_flash_erase+0xc4>)
    2150:	4698      	mov	r8, r3
    2152:	2340      	movs	r3, #64	; 0x40
    2154:	466a      	mov	r2, sp
    2156:	0021      	movs	r1, r4
    2158:	0028      	movs	r0, r5
    215a:	47c0      	blx	r8
    215c:	3440      	adds	r4, #64	; 0x40
    215e:	3701      	adds	r7, #1
    2160:	42be      	cmp	r6, r7
    2162:	d8f6      	bhi.n	2152 <_flash_erase+0x9a>
    2164:	b010      	add	sp, #64	; 0x40
    2166:	bc1c      	pop	{r2, r3, r4}
    2168:	4690      	mov	r8, r2
    216a:	4699      	mov	r9, r3
    216c:	46a2      	mov	sl, r4
    216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2170:	46a2      	mov	sl, r4
    2172:	2e03      	cmp	r6, #3
    2174:	d8ca      	bhi.n	210c <_flash_erase+0x54>
    2176:	e7e7      	b.n	2148 <_flash_erase+0x90>
    2178:	00003019 	.word	0x00003019
    217c:	00001f9d 	.word	0x00001f9d
    2180:	ffffa502 	.word	0xffffa502

00002184 <_flash_is_locked>:
    2184:	6903      	ldr	r3, [r0, #16]
    2186:	8c18      	ldrh	r0, [r3, #32]
    2188:	0089      	lsls	r1, r1, #2
    218a:	0c09      	lsrs	r1, r1, #16
    218c:	2301      	movs	r3, #1
    218e:	408b      	lsls	r3, r1
    2190:	4018      	ands	r0, r3
    2192:	4243      	negs	r3, r0
    2194:	4158      	adcs	r0, r3
    2196:	b2c0      	uxtb	r0, r0
    2198:	4770      	bx	lr
	...

0000219c <NVMCTRL_Handler>:
    219c:	b510      	push	{r4, lr}
    219e:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <NVMCTRL_Handler+0x2c>)
    21a0:	6818      	ldr	r0, [r3, #0]
    21a2:	6903      	ldr	r3, [r0, #16]
    21a4:	7d1a      	ldrb	r2, [r3, #20]
    21a6:	07d2      	lsls	r2, r2, #31
    21a8:	d504      	bpl.n	21b4 <NVMCTRL_Handler+0x18>
    21aa:	6803      	ldr	r3, [r0, #0]
    21ac:	2b00      	cmp	r3, #0
    21ae:	d000      	beq.n	21b2 <NVMCTRL_Handler+0x16>
    21b0:	4798      	blx	r3
    21b2:	bd10      	pop	{r4, pc}
    21b4:	7d1a      	ldrb	r2, [r3, #20]
    21b6:	0792      	lsls	r2, r2, #30
    21b8:	d5fb      	bpl.n	21b2 <NVMCTRL_Handler+0x16>
    21ba:	2202      	movs	r2, #2
    21bc:	751a      	strb	r2, [r3, #20]
    21be:	6843      	ldr	r3, [r0, #4]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d0f6      	beq.n	21b2 <NVMCTRL_Handler+0x16>
    21c4:	4798      	blx	r3
    21c6:	e7f4      	b.n	21b2 <NVMCTRL_Handler+0x16>
    21c8:	2000008c 	.word	0x2000008c

000021cc <_set_sleep_mode>:
    21cc:	2802      	cmp	r0, #2
    21ce:	d904      	bls.n	21da <_set_sleep_mode+0xe>
    21d0:	2803      	cmp	r0, #3
    21d2:	d00b      	beq.n	21ec <_set_sleep_mode+0x20>
    21d4:	200d      	movs	r0, #13
    21d6:	4240      	negs	r0, r0
    21d8:	e007      	b.n	21ea <_set_sleep_mode+0x1e>
    21da:	4a08      	ldr	r2, [pc, #32]	; (21fc <_set_sleep_mode+0x30>)
    21dc:	6913      	ldr	r3, [r2, #16]
    21de:	2104      	movs	r1, #4
    21e0:	438b      	bics	r3, r1
    21e2:	6113      	str	r3, [r2, #16]
    21e4:	4b06      	ldr	r3, [pc, #24]	; (2200 <_set_sleep_mode+0x34>)
    21e6:	7058      	strb	r0, [r3, #1]
    21e8:	2000      	movs	r0, #0
    21ea:	4770      	bx	lr
    21ec:	4a03      	ldr	r2, [pc, #12]	; (21fc <_set_sleep_mode+0x30>)
    21ee:	6913      	ldr	r3, [r2, #16]
    21f0:	2104      	movs	r1, #4
    21f2:	430b      	orrs	r3, r1
    21f4:	6113      	str	r3, [r2, #16]
    21f6:	2000      	movs	r0, #0
    21f8:	e7f7      	b.n	21ea <_set_sleep_mode+0x1e>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	e000ed00 	.word	0xe000ed00
    2200:	40000400 	.word	0x40000400

00002204 <_pm_init>:
    2204:	4b06      	ldr	r3, [pc, #24]	; (2220 <_pm_init+0x1c>)
    2206:	7a1a      	ldrb	r2, [r3, #8]
    2208:	b2d2      	uxtb	r2, r2
    220a:	721a      	strb	r2, [r3, #8]
    220c:	7a5a      	ldrb	r2, [r3, #9]
    220e:	b2d2      	uxtb	r2, r2
    2210:	725a      	strb	r2, [r3, #9]
    2212:	7a9a      	ldrb	r2, [r3, #10]
    2214:	b2d2      	uxtb	r2, r2
    2216:	729a      	strb	r2, [r3, #10]
    2218:	7ada      	ldrb	r2, [r3, #11]
    221a:	b2d2      	uxtb	r2, r2
    221c:	72da      	strb	r2, [r3, #11]
    221e:	4770      	bx	lr
    2220:	40000400 	.word	0x40000400

00002224 <_timer_init>:
    2224:	b570      	push	{r4, r5, r6, lr}
    2226:	0004      	movs	r4, r0
    2228:	000d      	movs	r5, r1
    222a:	1e43      	subs	r3, r0, #1
    222c:	4198      	sbcs	r0, r3
    222e:	b2c0      	uxtb	r0, r0
    2230:	2233      	movs	r2, #51	; 0x33
    2232:	4910      	ldr	r1, [pc, #64]	; (2274 <_timer_init+0x50>)
    2234:	4b10      	ldr	r3, [pc, #64]	; (2278 <_timer_init+0x54>)
    2236:	4798      	blx	r3
    2238:	60e5      	str	r5, [r4, #12]
    223a:	2301      	movs	r3, #1
    223c:	802b      	strh	r3, [r5, #0]
    223e:	7aab      	ldrb	r3, [r5, #10]
    2240:	09db      	lsrs	r3, r3, #7
    2242:	d1fc      	bne.n	223e <_timer_init+0x1a>
    2244:	68e2      	ldr	r2, [r4, #12]
    2246:	7a93      	ldrb	r3, [r2, #10]
    2248:	09db      	lsrs	r3, r3, #7
    224a:	d1fc      	bne.n	2246 <_timer_init+0x22>
    224c:	3380      	adds	r3, #128	; 0x80
    224e:	8013      	strh	r3, [r2, #0]
    2250:	7a93      	ldrb	r3, [r2, #10]
    2252:	09db      	lsrs	r3, r3, #7
    2254:	d1fc      	bne.n	2250 <_timer_init+0x2c>
    2256:	68e2      	ldr	r2, [r4, #12]
    2258:	6993      	ldr	r3, [r2, #24]
    225a:	2380      	movs	r3, #128	; 0x80
    225c:	00db      	lsls	r3, r3, #3
    225e:	6193      	str	r3, [r2, #24]
    2260:	7a93      	ldrb	r3, [r2, #10]
    2262:	09db      	lsrs	r3, r3, #7
    2264:	d1fc      	bne.n	2260 <_timer_init+0x3c>
    2266:	3301      	adds	r3, #1
    2268:	68e2      	ldr	r2, [r4, #12]
    226a:	71d3      	strb	r3, [r2, #7]
    226c:	4b03      	ldr	r3, [pc, #12]	; (227c <_timer_init+0x58>)
    226e:	601c      	str	r4, [r3, #0]
    2270:	2000      	movs	r0, #0
    2272:	bd70      	pop	{r4, r5, r6, pc}
    2274:	000031c8 	.word	0x000031c8
    2278:	000019c9 	.word	0x000019c9
    227c:	20000090 	.word	0x20000090

00002280 <_timer_start>:
    2280:	b510      	push	{r4, lr}
    2282:	1e04      	subs	r4, r0, #0
    2284:	d01d      	beq.n	22c2 <_timer_start+0x42>
    2286:	68c0      	ldr	r0, [r0, #12]
    2288:	1e43      	subs	r3, r0, #1
    228a:	4198      	sbcs	r0, r3
    228c:	b2c0      	uxtb	r0, r0
    228e:	226a      	movs	r2, #106	; 0x6a
    2290:	490d      	ldr	r1, [pc, #52]	; (22c8 <_timer_start+0x48>)
    2292:	4b0e      	ldr	r3, [pc, #56]	; (22cc <_timer_start+0x4c>)
    2294:	4798      	blx	r3
    2296:	2208      	movs	r2, #8
    2298:	4b0d      	ldr	r3, [pc, #52]	; (22d0 <_timer_start+0x50>)
    229a:	601a      	str	r2, [r3, #0]
    229c:	68e2      	ldr	r2, [r4, #12]
    229e:	6913      	ldr	r3, [r2, #16]
    22a0:	2300      	movs	r3, #0
    22a2:	6113      	str	r3, [r2, #16]
    22a4:	7a93      	ldrb	r3, [r2, #10]
    22a6:	09db      	lsrs	r3, r3, #7
    22a8:	d1fc      	bne.n	22a4 <_timer_start+0x24>
    22aa:	68e2      	ldr	r2, [r4, #12]
    22ac:	7a93      	ldrb	r3, [r2, #10]
    22ae:	09db      	lsrs	r3, r3, #7
    22b0:	d1fc      	bne.n	22ac <_timer_start+0x2c>
    22b2:	8813      	ldrh	r3, [r2, #0]
    22b4:	2102      	movs	r1, #2
    22b6:	430b      	orrs	r3, r1
    22b8:	8013      	strh	r3, [r2, #0]
    22ba:	7a93      	ldrb	r3, [r2, #10]
    22bc:	09db      	lsrs	r3, r3, #7
    22be:	d1fc      	bne.n	22ba <_timer_start+0x3a>
    22c0:	bd10      	pop	{r4, pc}
    22c2:	2000      	movs	r0, #0
    22c4:	e7e3      	b.n	228e <_timer_start+0xe>
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	000031c8 	.word	0x000031c8
    22cc:	000019c9 	.word	0x000019c9
    22d0:	e000e100 	.word	0xe000e100

000022d4 <_timer_stop>:
    22d4:	b510      	push	{r4, lr}
    22d6:	1e04      	subs	r4, r0, #0
    22d8:	d010      	beq.n	22fc <_timer_stop+0x28>
    22da:	68c0      	ldr	r0, [r0, #12]
    22dc:	1e43      	subs	r3, r0, #1
    22de:	4198      	sbcs	r0, r3
    22e0:	b2c0      	uxtb	r0, r0
    22e2:	2277      	movs	r2, #119	; 0x77
    22e4:	4906      	ldr	r1, [pc, #24]	; (2300 <_timer_stop+0x2c>)
    22e6:	4b07      	ldr	r3, [pc, #28]	; (2304 <_timer_stop+0x30>)
    22e8:	4798      	blx	r3
    22ea:	68e2      	ldr	r2, [r4, #12]
    22ec:	8813      	ldrh	r3, [r2, #0]
    22ee:	2102      	movs	r1, #2
    22f0:	438b      	bics	r3, r1
    22f2:	8013      	strh	r3, [r2, #0]
    22f4:	7a93      	ldrb	r3, [r2, #10]
    22f6:	09db      	lsrs	r3, r3, #7
    22f8:	d1fc      	bne.n	22f4 <_timer_stop+0x20>
    22fa:	bd10      	pop	{r4, pc}
    22fc:	2000      	movs	r0, #0
    22fe:	e7f0      	b.n	22e2 <_timer_stop+0xe>
    2300:	000031c8 	.word	0x000031c8
    2304:	000019c9 	.word	0x000019c9

00002308 <_timer_is_started>:
    2308:	68c2      	ldr	r2, [r0, #12]
    230a:	7a93      	ldrb	r3, [r2, #10]
    230c:	09db      	lsrs	r3, r3, #7
    230e:	d1fc      	bne.n	230a <_timer_is_started+0x2>
    2310:	8810      	ldrh	r0, [r2, #0]
    2312:	0780      	lsls	r0, r0, #30
    2314:	0fc0      	lsrs	r0, r0, #31
    2316:	4770      	bx	lr

00002318 <_timer_set_irq>:
    2318:	4770      	bx	lr

0000231a <_rtc_get_timer>:
    231a:	2000      	movs	r0, #0
    231c:	4770      	bx	lr
	...

00002320 <RTC_Handler>:
    2320:	b510      	push	{r4, lr}
    2322:	4b07      	ldr	r3, [pc, #28]	; (2340 <RTC_Handler+0x20>)
    2324:	681c      	ldr	r4, [r3, #0]
    2326:	68e3      	ldr	r3, [r4, #12]
    2328:	7a1b      	ldrb	r3, [r3, #8]
    232a:	07db      	lsls	r3, r3, #31
    232c:	d507      	bpl.n	233e <RTC_Handler+0x1e>
    232e:	6823      	ldr	r3, [r4, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d001      	beq.n	2338 <RTC_Handler+0x18>
    2334:	0020      	movs	r0, r4
    2336:	4798      	blx	r3
    2338:	68e3      	ldr	r3, [r4, #12]
    233a:	2201      	movs	r2, #1
    233c:	721a      	strb	r2, [r3, #8]
    233e:	bd10      	pop	{r4, pc}
    2340:	20000090 	.word	0x20000090

00002344 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2344:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2346:	07db      	lsls	r3, r3, #31
    2348:	d409      	bmi.n	235e <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    234a:	6803      	ldr	r3, [r0, #0]
    234c:	2202      	movs	r2, #2
    234e:	4313      	orrs	r3, r2
    2350:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2352:	3201      	adds	r2, #1
    2354:	69c3      	ldr	r3, [r0, #28]
    2356:	421a      	tst	r2, r3
    2358:	d1fc      	bne.n	2354 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    235a:	2000      	movs	r0, #0
}
    235c:	4770      	bx	lr
		return ERR_BUSY;
    235e:	2004      	movs	r0, #4
    2360:	4240      	negs	r0, r0
    2362:	e7fb      	b.n	235c <_spi_sync_enable+0x18>

00002364 <_spi_set_char_size>:
 * \param[out] size Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
    2364:	b510      	push	{r4, lr}
	/* Only 8-bit or 9-bit accepted */
	if (!(char_size == SPI_CHAR_SIZE_8 || char_size == SPI_CHAR_SIZE_9)) {
    2366:	2901      	cmp	r1, #1
    2368:	d815      	bhi.n	2396 <_spi_set_char_size+0x32>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    236a:	69c3      	ldr	r3, [r0, #28]
    236c:	2405      	movs	r4, #5
		return ERR_INVALID_ARG;
	}

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_CTRLB)) {
    236e:	421c      	tst	r4, r3
    2370:	d114      	bne.n	239c <_spi_set_char_size+0x38>

static inline void hri_sercomspi_write_CTRLB_CHSIZE_bf(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLB.reg;
    2372:	6843      	ldr	r3, [r0, #4]
	tmp &= ~SERCOM_SPI_CTRLB_CHSIZE_Msk;
    2374:	3402      	adds	r4, #2
    2376:	43a3      	bics	r3, r4
    2378:	001c      	movs	r4, r3
	tmp |= SERCOM_SPI_CTRLB_CHSIZE(data);
    237a:	2307      	movs	r3, #7
    237c:	400b      	ands	r3, r1
    237e:	4323      	orrs	r3, r4
	((Sercom *)hw)->SPI.CTRLB.reg = tmp;
    2380:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2382:	2407      	movs	r4, #7
    2384:	69c3      	ldr	r3, [r0, #28]
    2386:	421c      	tst	r4, r3
    2388:	d1fc      	bne.n	2384 <_spi_set_char_size+0x20>
		return ERR_BUSY;
	}

	hri_sercomspi_write_CTRLB_CHSIZE_bf(hw, char_size);
	*size = (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
    238a:	1e4b      	subs	r3, r1, #1
    238c:	4199      	sbcs	r1, r3
    238e:	3101      	adds	r1, #1
    2390:	7011      	strb	r1, [r2, #0]

	return ERR_NONE;
    2392:	2000      	movs	r0, #0
}
    2394:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
    2396:	200d      	movs	r0, #13
    2398:	4240      	negs	r0, r0
    239a:	e7fb      	b.n	2394 <_spi_set_char_size+0x30>
		return ERR_BUSY;
    239c:	2004      	movs	r0, #4
    239e:	4240      	negs	r0, r0
    23a0:	e7f8      	b.n	2394 <_spi_set_char_size+0x30>
	...

000023a4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	0006      	movs	r6, r0
    23a8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    23aa:	4b71      	ldr	r3, [pc, #452]	; (2570 <_spi_m_sync_init+0x1cc>)
    23ac:	18cb      	adds	r3, r1, r3
    23ae:	0a9b      	lsrs	r3, r3, #10
    23b0:	b2db      	uxtb	r3, r3
		if (sercomspi_regs[i].n == n) {
    23b2:	2b00      	cmp	r3, #0
    23b4:	d100      	bne.n	23b8 <_spi_m_sync_init+0x14>
    23b6:	e087      	b.n	24c8 <_spi_m_sync_init+0x124>
    23b8:	2b03      	cmp	r3, #3
    23ba:	d008      	beq.n	23ce <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    23bc:	2800      	cmp	r0, #0
    23be:	d100      	bne.n	23c2 <_spi_m_sync_init+0x1e>
    23c0:	e0c6      	b.n	2550 <_spi_m_sync_init+0x1ac>
    23c2:	2900      	cmp	r1, #0
    23c4:	d000      	beq.n	23c8 <_spi_m_sync_init+0x24>
    23c6:	e0cb      	b.n	2560 <_spi_m_sync_init+0x1bc>
	return NULL;
    23c8:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    23ca:	2000      	movs	r0, #0
    23cc:	e00a      	b.n	23e4 <_spi_m_sync_init+0x40>
		if (sercomspi_regs[i].n == n) {
    23ce:	3b02      	subs	r3, #2
			return &sercomspi_regs[i];
    23d0:	011d      	lsls	r5, r3, #4
    23d2:	18eb      	adds	r3, r5, r3
    23d4:	4d67      	ldr	r5, [pc, #412]	; (2574 <_spi_m_sync_init+0x1d0>)
    23d6:	3518      	adds	r5, #24
    23d8:	18ed      	adds	r5, r5, r3
	ASSERT(dev && hw);
    23da:	2e00      	cmp	r6, #0
    23dc:	d0f5      	beq.n	23ca <_spi_m_sync_init+0x26>
    23de:	2001      	movs	r0, #1
    23e0:	2c00      	cmp	r4, #0
    23e2:	d0f2      	beq.n	23ca <_spi_m_sync_init+0x26>
    23e4:	4a64      	ldr	r2, [pc, #400]	; (2578 <_spi_m_sync_init+0x1d4>)
    23e6:	4965      	ldr	r1, [pc, #404]	; (257c <_spi_m_sync_init+0x1d8>)
    23e8:	4b65      	ldr	r3, [pc, #404]	; (2580 <_spi_m_sync_init+0x1dc>)
    23ea:	4798      	blx	r3

	if (regs == NULL) {
    23ec:	2d00      	cmp	r5, #0
    23ee:	d100      	bne.n	23f2 <_spi_m_sync_init+0x4e>
    23f0:	e0ab      	b.n	254a <_spi_m_sync_init+0x1a6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    23f2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    23f4:	07db      	lsls	r3, r3, #31
    23f6:	d41c      	bmi.n	2432 <_spi_m_sync_init+0x8e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    23f8:	7829      	ldrb	r1, [r5, #0]
    23fa:	231c      	movs	r3, #28
    23fc:	4019      	ands	r1, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23fe:	2203      	movs	r2, #3
    2400:	69e3      	ldr	r3, [r4, #28]
    2402:	421a      	tst	r2, r3
    2404:	d1fc      	bne.n	2400 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2406:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2408:	079b      	lsls	r3, r3, #30
    240a:	d50b      	bpl.n	2424 <_spi_m_sync_init+0x80>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    240c:	6823      	ldr	r3, [r4, #0]
    240e:	2202      	movs	r2, #2
    2410:	4393      	bics	r3, r2
    2412:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2414:	3201      	adds	r2, #1
    2416:	69e3      	ldr	r3, [r4, #28]
    2418:	421a      	tst	r2, r3
    241a:	d1fc      	bne.n	2416 <_spi_m_sync_init+0x72>
    241c:	2202      	movs	r2, #2
    241e:	69e3      	ldr	r3, [r4, #28]
    2420:	421a      	tst	r2, r3
    2422:	d1fc      	bne.n	241e <_spi_m_sync_init+0x7a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2424:	2301      	movs	r3, #1
    2426:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2428:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    242a:	2203      	movs	r2, #3
    242c:	69e3      	ldr	r3, [r4, #28]
    242e:	421a      	tst	r2, r3
    2430:	d1fc      	bne.n	242c <_spi_m_sync_init+0x88>
    2432:	2201      	movs	r2, #1
    2434:	69e3      	ldr	r3, [r4, #28]
    2436:	421a      	tst	r2, r3
    2438:	d1fc      	bne.n	2434 <_spi_m_sync_init+0x90>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    243a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    243c:	782b      	ldrb	r3, [r5, #0]
    243e:	221c      	movs	r2, #28
    2440:	4013      	ands	r3, r2
    2442:	2b08      	cmp	r3, #8
    2444:	d042      	beq.n	24cc <_spi_m_sync_init+0x128>
	ASSERT(hw && regs);
    2446:	0020      	movs	r0, r4
    2448:	1e43      	subs	r3, r0, #1
    244a:	4198      	sbcs	r0, r3
    244c:	b2c0      	uxtb	r0, r0
    244e:	4a4d      	ldr	r2, [pc, #308]	; (2584 <_spi_m_sync_init+0x1e0>)
    2450:	494a      	ldr	r1, [pc, #296]	; (257c <_spi_m_sync_init+0x1d8>)
    2452:	4b4b      	ldr	r3, [pc, #300]	; (2580 <_spi_m_sync_init+0x1dc>)
    2454:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2456:	782b      	ldrb	r3, [r5, #0]
    2458:	786a      	ldrb	r2, [r5, #1]
    245a:	0212      	lsls	r2, r2, #8
    245c:	431a      	orrs	r2, r3
    245e:	78ab      	ldrb	r3, [r5, #2]
    2460:	041b      	lsls	r3, r3, #16
    2462:	431a      	orrs	r2, r3
    2464:	78eb      	ldrb	r3, [r5, #3]
    2466:	061b      	lsls	r3, r3, #24
    2468:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    246a:	4a47      	ldr	r2, [pc, #284]	; (2588 <_spi_m_sync_init+0x1e4>)
    246c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    246e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2470:	3208      	adds	r2, #8
    2472:	32ff      	adds	r2, #255	; 0xff
    2474:	69e3      	ldr	r3, [r4, #28]
    2476:	421a      	tst	r2, r3
    2478:	d1fc      	bne.n	2474 <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
    247a:	792b      	ldrb	r3, [r5, #4]
    247c:	796a      	ldrb	r2, [r5, #5]
    247e:	0212      	lsls	r2, r2, #8
    2480:	431a      	orrs	r2, r3
    2482:	79ab      	ldrb	r3, [r5, #6]
    2484:	041b      	lsls	r3, r3, #16
    2486:	431a      	orrs	r2, r3
    2488:	79eb      	ldrb	r3, [r5, #7]
    248a:	061b      	lsls	r3, r3, #24
    248c:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    248e:	4a3f      	ldr	r2, [pc, #252]	; (258c <_spi_m_sync_init+0x1e8>)
    2490:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    2492:	2280      	movs	r2, #128	; 0x80
    2494:	0292      	lsls	r2, r2, #10
    2496:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2498:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    249a:	2207      	movs	r2, #7
    249c:	69e3      	ldr	r3, [r4, #28]
    249e:	421a      	tst	r2, r3
    24a0:	d1fc      	bne.n	249c <_spi_m_sync_init+0xf8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    24a2:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    24a4:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    24a6:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    24a8:	2330      	movs	r3, #48	; 0x30
    24aa:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    24ac:	792b      	ldrb	r3, [r5, #4]
    24ae:	2207      	movs	r2, #7
    24b0:	4013      	ands	r3, r2
    24b2:	1e5a      	subs	r2, r3, #1
    24b4:	4193      	sbcs	r3, r2
    24b6:	3301      	adds	r3, #1
    24b8:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    24ba:	7baa      	ldrb	r2, [r5, #14]
    24bc:	7beb      	ldrb	r3, [r5, #15]
    24be:	021b      	lsls	r3, r3, #8
    24c0:	4313      	orrs	r3, r2
    24c2:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    24c4:	2000      	movs	r0, #0
}
    24c6:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    24c8:	2300      	movs	r3, #0
    24ca:	e781      	b.n	23d0 <_spi_m_sync_init+0x2c>
	ASSERT(hw && regs);
    24cc:	0020      	movs	r0, r4
    24ce:	1e43      	subs	r3, r0, #1
    24d0:	4198      	sbcs	r0, r3
    24d2:	b2c0      	uxtb	r0, r0
    24d4:	4a2e      	ldr	r2, [pc, #184]	; (2590 <_spi_m_sync_init+0x1ec>)
    24d6:	4929      	ldr	r1, [pc, #164]	; (257c <_spi_m_sync_init+0x1d8>)
    24d8:	4b29      	ldr	r3, [pc, #164]	; (2580 <_spi_m_sync_init+0x1dc>)
    24da:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    24dc:	782b      	ldrb	r3, [r5, #0]
    24de:	786a      	ldrb	r2, [r5, #1]
    24e0:	0212      	lsls	r2, r2, #8
    24e2:	431a      	orrs	r2, r3
    24e4:	78ab      	ldrb	r3, [r5, #2]
    24e6:	041b      	lsls	r3, r3, #16
    24e8:	431a      	orrs	r2, r3
    24ea:	78eb      	ldrb	r3, [r5, #3]
    24ec:	061b      	lsls	r3, r3, #24
    24ee:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    24f0:	4a25      	ldr	r2, [pc, #148]	; (2588 <_spi_m_sync_init+0x1e4>)
    24f2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    24f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24f6:	3208      	adds	r2, #8
    24f8:	32ff      	adds	r2, #255	; 0xff
    24fa:	69e3      	ldr	r3, [r4, #28]
    24fc:	421a      	tst	r2, r3
    24fe:	d1fc      	bne.n	24fa <_spi_m_sync_init+0x156>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2500:	792b      	ldrb	r3, [r5, #4]
    2502:	796a      	ldrb	r2, [r5, #5]
    2504:	0212      	lsls	r2, r2, #8
    2506:	431a      	orrs	r2, r3
    2508:	79ab      	ldrb	r3, [r5, #6]
    250a:	041b      	lsls	r3, r3, #16
    250c:	431a      	orrs	r2, r3
    250e:	79eb      	ldrb	r3, [r5, #7]
    2510:	061b      	lsls	r3, r3, #24
    2512:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2514:	4a1f      	ldr	r2, [pc, #124]	; (2594 <_spi_m_sync_init+0x1f0>)
    2516:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    2518:	4a1f      	ldr	r2, [pc, #124]	; (2598 <_spi_m_sync_init+0x1f4>)
    251a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    251c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    251e:	2207      	movs	r2, #7
    2520:	69e3      	ldr	r3, [r4, #28]
    2522:	421a      	tst	r2, r3
    2524:	d1fc      	bne.n	2520 <_spi_m_sync_init+0x17c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2526:	7a2b      	ldrb	r3, [r5, #8]
    2528:	7a6a      	ldrb	r2, [r5, #9]
    252a:	0212      	lsls	r2, r2, #8
    252c:	431a      	orrs	r2, r3
    252e:	7aab      	ldrb	r3, [r5, #10]
    2530:	041b      	lsls	r3, r3, #16
    2532:	431a      	orrs	r2, r3
    2534:	7aeb      	ldrb	r3, [r5, #11]
    2536:	061b      	lsls	r3, r3, #24
    2538:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    253a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    253c:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    253e:	2330      	movs	r3, #48	; 0x30
    2540:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2542:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2544:	2b00      	cmp	r3, #0
    2546:	d1fc      	bne.n	2542 <_spi_m_sync_init+0x19e>
    2548:	e7b0      	b.n	24ac <_spi_m_sync_init+0x108>
		return ERR_INVALID_ARG;
    254a:	200d      	movs	r0, #13
    254c:	4240      	negs	r0, r0
    254e:	e7ba      	b.n	24c6 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    2550:	4a09      	ldr	r2, [pc, #36]	; (2578 <_spi_m_sync_init+0x1d4>)
    2552:	490a      	ldr	r1, [pc, #40]	; (257c <_spi_m_sync_init+0x1d8>)
    2554:	2000      	movs	r0, #0
    2556:	4b0a      	ldr	r3, [pc, #40]	; (2580 <_spi_m_sync_init+0x1dc>)
    2558:	4798      	blx	r3
		return ERR_INVALID_ARG;
    255a:	200d      	movs	r0, #13
    255c:	4240      	negs	r0, r0
    255e:	e7b2      	b.n	24c6 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    2560:	4a05      	ldr	r2, [pc, #20]	; (2578 <_spi_m_sync_init+0x1d4>)
    2562:	4906      	ldr	r1, [pc, #24]	; (257c <_spi_m_sync_init+0x1d8>)
    2564:	2001      	movs	r0, #1
    2566:	4b06      	ldr	r3, [pc, #24]	; (2580 <_spi_m_sync_init+0x1dc>)
    2568:	4798      	blx	r3
		return ERR_INVALID_ARG;
    256a:	200d      	movs	r0, #13
    256c:	4240      	negs	r0, r0
    256e:	e7aa      	b.n	24c6 <_spi_m_sync_init+0x122>
    2570:	bdfff800 	.word	0xbdfff800
    2574:	000031e0 	.word	0x000031e0
    2578:	00000925 	.word	0x00000925
    257c:	0000321c 	.word	0x0000321c
    2580:	000019c9 	.word	0x000019c9
    2584:	000008ef 	.word	0x000008ef
    2588:	fffffefc 	.word	0xfffffefc
    258c:	fffd1dbf 	.word	0xfffd1dbf
    2590:	00000903 	.word	0x00000903
    2594:	fffdddbf 	.word	0xfffdddbf
    2598:	00020240 	.word	0x00020240

0000259c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    259c:	b510      	push	{r4, lr}
    259e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    25a0:	d00c      	beq.n	25bc <_spi_m_sync_enable+0x20>
    25a2:	6800      	ldr	r0, [r0, #0]
    25a4:	1e43      	subs	r3, r0, #1
    25a6:	4198      	sbcs	r0, r3
    25a8:	b2c0      	uxtb	r0, r0
    25aa:	2298      	movs	r2, #152	; 0x98
    25ac:	0112      	lsls	r2, r2, #4
    25ae:	4904      	ldr	r1, [pc, #16]	; (25c0 <_spi_m_sync_enable+0x24>)
    25b0:	4b04      	ldr	r3, [pc, #16]	; (25c4 <_spi_m_sync_enable+0x28>)
    25b2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    25b4:	6820      	ldr	r0, [r4, #0]
    25b6:	4b04      	ldr	r3, [pc, #16]	; (25c8 <_spi_m_sync_enable+0x2c>)
    25b8:	4798      	blx	r3
}
    25ba:	bd10      	pop	{r4, pc}
    25bc:	2000      	movs	r0, #0
    25be:	e7f4      	b.n	25aa <_spi_m_sync_enable+0xe>
    25c0:	0000321c 	.word	0x0000321c
    25c4:	000019c9 	.word	0x000019c9
    25c8:	00002345 	.word	0x00002345

000025cc <_spi_m_sync_set_baudrate>:
	rc = ((clk >> 1) / baud) - 1;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
    25cc:	b570      	push	{r4, r5, r6, lr}
    25ce:	0005      	movs	r5, r0
    25d0:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    25d2:	2800      	cmp	r0, #0
    25d4:	d00f      	beq.n	25f6 <_spi_m_sync_set_baudrate+0x2a>
    25d6:	6800      	ldr	r0, [r0, #0]
    25d8:	1e43      	subs	r3, r0, #1
    25da:	4198      	sbcs	r0, r3
    25dc:	b2c0      	uxtb	r0, r0
    25de:	4a08      	ldr	r2, [pc, #32]	; (2600 <_spi_m_sync_set_baudrate+0x34>)
    25e0:	4908      	ldr	r1, [pc, #32]	; (2604 <_spi_m_sync_set_baudrate+0x38>)
    25e2:	4b09      	ldr	r3, [pc, #36]	; (2608 <_spi_m_sync_set_baudrate+0x3c>)
    25e4:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
    25e6:	682b      	ldr	r3, [r5, #0]
    25e8:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    25ea:	07d2      	lsls	r2, r2, #31
    25ec:	d405      	bmi.n	25fa <_spi_m_sync_set_baudrate+0x2e>
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    25ee:	b2e4      	uxtb	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    25f0:	731c      	strb	r4, [r3, #12]
	return ERR_NONE;
    25f2:	2000      	movs	r0, #0
}
    25f4:	bd70      	pop	{r4, r5, r6, pc}
    25f6:	2000      	movs	r0, #0
    25f8:	e7f1      	b.n	25de <_spi_m_sync_set_baudrate+0x12>
		return ERR_BUSY;
    25fa:	2004      	movs	r0, #4
    25fc:	4240      	negs	r0, r0
	return _spi_set_baudrate(dev->prvt, baud_val);
    25fe:	e7f9      	b.n	25f4 <_spi_m_sync_set_baudrate+0x28>
    2600:	000009e7 	.word	0x000009e7
    2604:	0000321c 	.word	0x0000321c
    2608:	000019c9 	.word	0x000019c9

0000260c <_spi_m_sync_set_char_size>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
    260c:	b570      	push	{r4, r5, r6, lr}
    260e:	0005      	movs	r5, r0
    2610:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    2612:	2800      	cmp	r0, #0
    2614:	d00d      	beq.n	2632 <_spi_m_sync_set_char_size+0x26>
    2616:	6800      	ldr	r0, [r0, #0]
    2618:	1e43      	subs	r3, r0, #1
    261a:	4198      	sbcs	r0, r3
    261c:	b2c0      	uxtb	r0, r0
    261e:	4a06      	ldr	r2, [pc, #24]	; (2638 <_spi_m_sync_set_char_size+0x2c>)
    2620:	4906      	ldr	r1, [pc, #24]	; (263c <_spi_m_sync_set_char_size+0x30>)
    2622:	4b07      	ldr	r3, [pc, #28]	; (2640 <_spi_m_sync_set_char_size+0x34>)
    2624:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
    2626:	1d2a      	adds	r2, r5, #4
    2628:	6828      	ldr	r0, [r5, #0]
    262a:	0021      	movs	r1, r4
    262c:	4b05      	ldr	r3, [pc, #20]	; (2644 <_spi_m_sync_set_char_size+0x38>)
    262e:	4798      	blx	r3
}
    2630:	bd70      	pop	{r4, r5, r6, pc}
    2632:	2000      	movs	r0, #0
    2634:	e7f3      	b.n	261e <_spi_m_sync_set_char_size+0x12>
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	000009f5 	.word	0x000009f5
    263c:	0000321c 	.word	0x0000321c
    2640:	000019c9 	.word	0x000019c9
    2644:	00002365 	.word	0x00002365

00002648 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	46de      	mov	lr, fp
    264c:	4657      	mov	r7, sl
    264e:	464e      	mov	r6, r9
    2650:	4645      	mov	r5, r8
    2652:	b5e0      	push	{r5, r6, r7, lr}
    2654:	b083      	sub	sp, #12
    2656:	4681      	mov	r9, r0
    2658:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    265a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    265c:	680b      	ldr	r3, [r1, #0]
    265e:	4698      	mov	r8, r3
    2660:	684d      	ldr	r5, [r1, #4]
    2662:	7903      	ldrb	r3, [r0, #4]
    2664:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2666:	2800      	cmp	r0, #0
    2668:	d015      	beq.n	2696 <_spi_m_sync_trans+0x4e>
    266a:	0020      	movs	r0, r4
    266c:	1e43      	subs	r3, r0, #1
    266e:	4198      	sbcs	r0, r3
    2670:	b2c0      	uxtb	r0, r0
    2672:	4a36      	ldr	r2, [pc, #216]	; (274c <_spi_m_sync_trans+0x104>)
    2674:	4936      	ldr	r1, [pc, #216]	; (2750 <_spi_m_sync_trans+0x108>)
    2676:	4b37      	ldr	r3, [pc, #220]	; (2754 <_spi_m_sync_trans+0x10c>)
    2678:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    267a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    267c:	075b      	lsls	r3, r3, #29
    267e:	d13f      	bne.n	2700 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2680:	2303      	movs	r3, #3
    2682:	69e0      	ldr	r0, [r4, #28]
    2684:	4018      	ands	r0, r3
    2686:	d1fc      	bne.n	2682 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2688:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    268a:	079b      	lsls	r3, r3, #30
    268c:	d53b      	bpl.n	2706 <_spi_m_sync_trans+0xbe>
    268e:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2690:	2301      	movs	r3, #1
    2692:	469c      	mov	ip, r3
    2694:	e009      	b.n	26aa <_spi_m_sync_trans+0x62>
    2696:	2000      	movs	r0, #0
    2698:	e7eb      	b.n	2672 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    269a:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    269c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    269e:	b25b      	sxtb	r3, r3
    26a0:	2b00      	cmp	r3, #0
    26a2:	db16      	blt.n	26d2 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    26a4:	68b3      	ldr	r3, [r6, #8]
    26a6:	4283      	cmp	r3, r0
    26a8:	d927      	bls.n	26fa <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    26aa:	7e23      	ldrb	r3, [r4, #24]
    26ac:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    26ae:	2104      	movs	r1, #4
    26b0:	4219      	tst	r1, r3
    26b2:	d02b      	beq.n	270c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    26b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    26b6:	2d00      	cmp	r5, #0
    26b8:	d0f0      	beq.n	269c <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    26ba:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    26bc:	9901      	ldr	r1, [sp, #4]
    26be:	2901      	cmp	r1, #1
    26c0:	d9eb      	bls.n	269a <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    26c2:	0a3f      	lsrs	r7, r7, #8
    26c4:	706f      	strb	r7, [r5, #1]
    26c6:	3502      	adds	r5, #2
    26c8:	e7e8      	b.n	269c <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    26ca:	2101      	movs	r1, #1
    26cc:	468b      	mov	fp, r1
    26ce:	44d8      	add	r8, fp
    26d0:	e037      	b.n	2742 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    26d2:	2301      	movs	r3, #1
    26d4:	425b      	negs	r3, r3
    26d6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    26d8:	3381      	adds	r3, #129	; 0x81
    26da:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    26dc:	2013      	movs	r0, #19
    26de:	4240      	negs	r0, r0
	tmp &= mask;
    26e0:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    26e2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    26e4:	4213      	tst	r3, r2
    26e6:	d0fc      	beq.n	26e2 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    26e8:	2303      	movs	r3, #3
    26ea:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    26ec:	b003      	add	sp, #12
    26ee:	bc3c      	pop	{r2, r3, r4, r5}
    26f0:	4690      	mov	r8, r2
    26f2:	4699      	mov	r9, r3
    26f4:	46a2      	mov	sl, r4
    26f6:	46ab      	mov	fp, r5
    26f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    26fa:	4293      	cmp	r3, r2
    26fc:	d8d5      	bhi.n	26aa <_spi_m_sync_trans+0x62>
    26fe:	e7ef      	b.n	26e0 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    2700:	2004      	movs	r0, #4
    2702:	4240      	negs	r0, r0
    2704:	e7f2      	b.n	26ec <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    2706:	2014      	movs	r0, #20
    2708:	4240      	negs	r0, r0
    270a:	e7ef      	b.n	26ec <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    270c:	4290      	cmp	r0, r2
    270e:	d8c6      	bhi.n	269e <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2710:	4667      	mov	r7, ip
    2712:	421f      	tst	r7, r3
    2714:	d0c3      	beq.n	269e <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2716:	464f      	mov	r7, r9
    2718:	88ff      	ldrh	r7, [r7, #6]
    271a:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    271c:	4647      	mov	r7, r8
    271e:	2f00      	cmp	r7, #0
    2720:	d00f      	beq.n	2742 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    2722:	783f      	ldrb	r7, [r7, #0]
    2724:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    2726:	9901      	ldr	r1, [sp, #4]
    2728:	2901      	cmp	r1, #1
    272a:	d9ce      	bls.n	26ca <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    272c:	4647      	mov	r7, r8
    272e:	787f      	ldrb	r7, [r7, #1]
    2730:	023f      	lsls	r7, r7, #8
    2732:	46bb      	mov	fp, r7
    2734:	4657      	mov	r7, sl
    2736:	4659      	mov	r1, fp
    2738:	430f      	orrs	r7, r1
    273a:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    273c:	2102      	movs	r1, #2
    273e:	468b      	mov	fp, r1
    2740:	44d8      	add	r8, fp
	ctrl->txcnt++;
    2742:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2744:	4657      	mov	r7, sl
    2746:	62a7      	str	r7, [r4, #40]	; 0x28
    2748:	e7a9      	b.n	269e <_spi_m_sync_trans+0x56>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	00000a85 	.word	0x00000a85
    2750:	0000321c 	.word	0x0000321c
    2754:	000019c9 	.word	0x000019c9

00002758 <_sysctrl_init_sources>:
    2758:	4b0e      	ldr	r3, [pc, #56]	; (2794 <_sysctrl_init_sources+0x3c>)
    275a:	6a1a      	ldr	r2, [r3, #32]
    275c:	6a19      	ldr	r1, [r3, #32]
    275e:	480e      	ldr	r0, [pc, #56]	; (2798 <_sysctrl_init_sources+0x40>)
    2760:	4002      	ands	r2, r0
    2762:	0f89      	lsrs	r1, r1, #30
    2764:	0789      	lsls	r1, r1, #30
    2766:	480d      	ldr	r0, [pc, #52]	; (279c <_sysctrl_init_sources+0x44>)
    2768:	4301      	orrs	r1, r0
    276a:	430a      	orrs	r2, r1
    276c:	621a      	str	r2, [r3, #32]
    276e:	699a      	ldr	r2, [r3, #24]
    2770:	2102      	movs	r1, #2
    2772:	430a      	orrs	r2, r1
    2774:	619a      	str	r2, [r3, #24]
    2776:	7f1a      	ldrb	r2, [r3, #28]
    2778:	311d      	adds	r1, #29
    277a:	400a      	ands	r2, r1
    277c:	771a      	strb	r2, [r3, #28]
    277e:	0019      	movs	r1, r3
    2780:	2208      	movs	r2, #8
    2782:	68cb      	ldr	r3, [r1, #12]
    2784:	421a      	tst	r2, r3
    2786:	d0fc      	beq.n	2782 <_sysctrl_init_sources+0x2a>
    2788:	4a02      	ldr	r2, [pc, #8]	; (2794 <_sysctrl_init_sources+0x3c>)
    278a:	6a13      	ldr	r3, [r2, #32]
    278c:	2180      	movs	r1, #128	; 0x80
    278e:	430b      	orrs	r3, r1
    2790:	6213      	str	r3, [r2, #32]
    2792:	4770      	bx	lr
    2794:	40000800 	.word	0x40000800
    2798:	0fff0000 	.word	0x0fff0000
    279c:	00000302 	.word	0x00000302

000027a0 <_sysctrl_init_referenced_generators>:
    27a0:	4a02      	ldr	r2, [pc, #8]	; (27ac <_sysctrl_init_referenced_generators+0xc>)
    27a2:	6993      	ldr	r3, [r2, #24]
    27a4:	2102      	movs	r1, #2
    27a6:	438b      	bics	r3, r1
    27a8:	6193      	str	r3, [r2, #24]
    27aa:	4770      	bx	lr
    27ac:	40000800 	.word	0x40000800

000027b0 <_delay_init>:
    27b0:	4b02      	ldr	r3, [pc, #8]	; (27bc <_delay_init+0xc>)
    27b2:	4a03      	ldr	r2, [pc, #12]	; (27c0 <_delay_init+0x10>)
    27b4:	605a      	str	r2, [r3, #4]
    27b6:	2205      	movs	r2, #5
    27b8:	601a      	str	r2, [r3, #0]
    27ba:	4770      	bx	lr
    27bc:	e000e010 	.word	0xe000e010
    27c0:	00ffffff 	.word	0x00ffffff

000027c4 <_delay_cycles>:
    27c4:	b570      	push	{r4, r5, r6, lr}
    27c6:	0e0b      	lsrs	r3, r1, #24
    27c8:	1e5e      	subs	r6, r3, #1
    27ca:	b2f6      	uxtb	r6, r6
    27cc:	2b00      	cmp	r3, #0
    27ce:	d013      	beq.n	27f8 <_delay_cycles+0x34>
    27d0:	0034      	movs	r4, r6
    27d2:	4a0e      	ldr	r2, [pc, #56]	; (280c <_delay_cycles+0x48>)
    27d4:	4d0e      	ldr	r5, [pc, #56]	; (2810 <_delay_cycles+0x4c>)
    27d6:	2080      	movs	r0, #128	; 0x80
    27d8:	0240      	lsls	r0, r0, #9
    27da:	6055      	str	r5, [r2, #4]
    27dc:	6095      	str	r5, [r2, #8]
    27de:	6813      	ldr	r3, [r2, #0]
    27e0:	4203      	tst	r3, r0
    27e2:	d0fc      	beq.n	27de <_delay_cycles+0x1a>
    27e4:	3c01      	subs	r4, #1
    27e6:	b2e4      	uxtb	r4, r4
    27e8:	2cff      	cmp	r4, #255	; 0xff
    27ea:	d1f6      	bne.n	27da <_delay_cycles+0x16>
    27ec:	0633      	lsls	r3, r6, #24
    27ee:	1af6      	subs	r6, r6, r3
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <_delay_cycles+0x50>)
    27f2:	469c      	mov	ip, r3
    27f4:	4461      	add	r1, ip
    27f6:	1871      	adds	r1, r6, r1
    27f8:	4b04      	ldr	r3, [pc, #16]	; (280c <_delay_cycles+0x48>)
    27fa:	6059      	str	r1, [r3, #4]
    27fc:	6099      	str	r1, [r3, #8]
    27fe:	0019      	movs	r1, r3
    2800:	2280      	movs	r2, #128	; 0x80
    2802:	0252      	lsls	r2, r2, #9
    2804:	680b      	ldr	r3, [r1, #0]
    2806:	4213      	tst	r3, r2
    2808:	d0fc      	beq.n	2804 <_delay_cycles+0x40>
    280a:	bd70      	pop	{r4, r5, r6, pc}
    280c:	e000e010 	.word	0xe000e010
    2810:	00ffffff 	.word	0x00ffffff
    2814:	ff000001 	.word	0xff000001

00002818 <get_tc_index>:
    2818:	b510      	push	{r4, lr}
    281a:	4b0a      	ldr	r3, [pc, #40]	; (2844 <get_tc_index+0x2c>)
    281c:	469c      	mov	ip, r3
    281e:	4460      	add	r0, ip
    2820:	0a80      	lsrs	r0, r0, #10
    2822:	3003      	adds	r0, #3
    2824:	4b08      	ldr	r3, [pc, #32]	; (2848 <get_tc_index+0x30>)
    2826:	781b      	ldrb	r3, [r3, #0]
    2828:	b2c0      	uxtb	r0, r0
    282a:	4283      	cmp	r3, r0
    282c:	d008      	beq.n	2840 <get_tc_index+0x28>
    282e:	225a      	movs	r2, #90	; 0x5a
    2830:	32ff      	adds	r2, #255	; 0xff
    2832:	4906      	ldr	r1, [pc, #24]	; (284c <get_tc_index+0x34>)
    2834:	2000      	movs	r0, #0
    2836:	4b06      	ldr	r3, [pc, #24]	; (2850 <get_tc_index+0x38>)
    2838:	4798      	blx	r3
    283a:	2001      	movs	r0, #1
    283c:	4240      	negs	r0, r0
    283e:	bd10      	pop	{r4, pc}
    2840:	2000      	movs	r0, #0
    2842:	e7fc      	b.n	283e <get_tc_index+0x26>
    2844:	bdffd400 	.word	0xbdffd400
    2848:	20000004 	.word	0x20000004
    284c:	00003238 	.word	0x00003238
    2850:	000019c9 	.word	0x000019c9

00002854 <_pwm_init>:
    2854:	b570      	push	{r4, r5, r6, lr}
    2856:	0005      	movs	r5, r0
    2858:	000c      	movs	r4, r1
    285a:	0008      	movs	r0, r1
    285c:	4b30      	ldr	r3, [pc, #192]	; (2920 <_pwm_init+0xcc>)
    285e:	4798      	blx	r3
    2860:	612c      	str	r4, [r5, #16]
    2862:	7be3      	ldrb	r3, [r4, #15]
    2864:	09db      	lsrs	r3, r3, #7
    2866:	d1fc      	bne.n	2862 <_pwm_init+0xe>
    2868:	8823      	ldrh	r3, [r4, #0]
    286a:	079b      	lsls	r3, r3, #30
    286c:	d504      	bpl.n	2878 <_pwm_init+0x24>
    286e:	2300      	movs	r3, #0
    2870:	8023      	strh	r3, [r4, #0]
    2872:	7be3      	ldrb	r3, [r4, #15]
    2874:	09db      	lsrs	r3, r3, #7
    2876:	d1fc      	bne.n	2872 <_pwm_init+0x1e>
    2878:	2301      	movs	r3, #1
    287a:	8023      	strh	r3, [r4, #0]
    287c:	7be3      	ldrb	r3, [r4, #15]
    287e:	09db      	lsrs	r3, r3, #7
    2880:	d1fc      	bne.n	287c <_pwm_init+0x28>
    2882:	0083      	lsls	r3, r0, #2
    2884:	181b      	adds	r3, r3, r0
    2886:	009a      	lsls	r2, r3, #2
    2888:	4b26      	ldr	r3, [pc, #152]	; (2924 <_pwm_init+0xd0>)
    288a:	189b      	adds	r3, r3, r2
    288c:	885a      	ldrh	r2, [r3, #2]
    288e:	8022      	strh	r2, [r4, #0]
    2890:	7919      	ldrb	r1, [r3, #4]
    2892:	7221      	strb	r1, [r4, #8]
    2894:	88db      	ldrh	r3, [r3, #6]
    2896:	8163      	strh	r3, [r4, #10]
    2898:	230c      	movs	r3, #12
    289a:	4013      	ands	r3, r2
    289c:	2b08      	cmp	r3, #8
    289e:	d029      	beq.n	28f4 <_pwm_init+0xa0>
    28a0:	2b00      	cmp	r3, #0
    28a2:	d138      	bne.n	2916 <_pwm_init+0xc2>
    28a4:	491f      	ldr	r1, [pc, #124]	; (2924 <_pwm_init+0xd0>)
    28a6:	0083      	lsls	r3, r0, #2
    28a8:	181a      	adds	r2, r3, r0
    28aa:	0092      	lsls	r2, r2, #2
    28ac:	188a      	adds	r2, r1, r2
    28ae:	8992      	ldrh	r2, [r2, #12]
    28b0:	8322      	strh	r2, [r4, #24]
    28b2:	1818      	adds	r0, r3, r0
    28b4:	0080      	lsls	r0, r0, #2
    28b6:	1808      	adds	r0, r1, r0
    28b8:	8a03      	ldrh	r3, [r0, #16]
    28ba:	8363      	strh	r3, [r4, #26]
    28bc:	4b1a      	ldr	r3, [pc, #104]	; (2928 <_pwm_init+0xd4>)
    28be:	429c      	cmp	r4, r3
    28c0:	d025      	beq.n	290e <_pwm_init+0xba>
    28c2:	4b1a      	ldr	r3, [pc, #104]	; (292c <_pwm_init+0xd8>)
    28c4:	469c      	mov	ip, r3
    28c6:	4464      	add	r4, ip
    28c8:	0aa4      	lsrs	r4, r4, #10
    28ca:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    28cc:	b2e3      	uxtb	r3, r4
    28ce:	0622      	lsls	r2, r4, #24
    28d0:	d424      	bmi.n	291c <_pwm_init+0xc8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28d2:	221f      	movs	r2, #31
    28d4:	401a      	ands	r2, r3
    28d6:	2301      	movs	r3, #1
    28d8:	4093      	lsls	r3, r2
    28da:	4a15      	ldr	r2, [pc, #84]	; (2930 <_pwm_init+0xdc>)
    28dc:	2180      	movs	r1, #128	; 0x80
    28de:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    28e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e8:	3101      	adds	r1, #1
    28ea:	31ff      	adds	r1, #255	; 0xff
    28ec:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ee:	6013      	str	r3, [r2, #0]
    28f0:	2000      	movs	r0, #0
    28f2:	bd70      	pop	{r4, r5, r6, pc}
    28f4:	490b      	ldr	r1, [pc, #44]	; (2924 <_pwm_init+0xd0>)
    28f6:	0083      	lsls	r3, r0, #2
    28f8:	181a      	adds	r2, r3, r0
    28fa:	0092      	lsls	r2, r2, #2
    28fc:	188a      	adds	r2, r1, r2
    28fe:	68d2      	ldr	r2, [r2, #12]
    2900:	61a2      	str	r2, [r4, #24]
    2902:	1818      	adds	r0, r3, r0
    2904:	0080      	lsls	r0, r0, #2
    2906:	1808      	adds	r0, r1, r0
    2908:	6903      	ldr	r3, [r0, #16]
    290a:	61e3      	str	r3, [r4, #28]
    290c:	e7d6      	b.n	28bc <_pwm_init+0x68>
    290e:	4b09      	ldr	r3, [pc, #36]	; (2934 <_pwm_init+0xe0>)
    2910:	601d      	str	r5, [r3, #0]
    2912:	2312      	movs	r3, #18
    2914:	e7dd      	b.n	28d2 <_pwm_init+0x7e>
    2916:	2001      	movs	r0, #1
    2918:	4240      	negs	r0, r0
    291a:	e7ea      	b.n	28f2 <_pwm_init+0x9e>
    291c:	2000      	movs	r0, #0
    291e:	e7e8      	b.n	28f2 <_pwm_init+0x9e>
    2920:	00002819 	.word	0x00002819
    2924:	20000004 	.word	0x20000004
    2928:	42002c00 	.word	0x42002c00
    292c:	bdffd400 	.word	0xbdffd400
    2930:	e000e100 	.word	0xe000e100
    2934:	20000094 	.word	0x20000094

00002938 <_tc_get_pwm>:
    2938:	2000      	movs	r0, #0
    293a:	4770      	bx	lr

0000293c <TC3_Handler>:
    293c:	b570      	push	{r4, r5, r6, lr}
    293e:	4b0c      	ldr	r3, [pc, #48]	; (2970 <TC3_Handler+0x34>)
    2940:	681d      	ldr	r5, [r3, #0]
    2942:	692c      	ldr	r4, [r5, #16]
    2944:	7ba3      	ldrb	r3, [r4, #14]
    2946:	07db      	lsls	r3, r3, #31
    2948:	d506      	bpl.n	2958 <TC3_Handler+0x1c>
    294a:	2301      	movs	r3, #1
    294c:	73a3      	strb	r3, [r4, #14]
    294e:	682b      	ldr	r3, [r5, #0]
    2950:	2b00      	cmp	r3, #0
    2952:	d001      	beq.n	2958 <TC3_Handler+0x1c>
    2954:	0028      	movs	r0, r5
    2956:	4798      	blx	r3
    2958:	7b63      	ldrb	r3, [r4, #13]
    295a:	079b      	lsls	r3, r3, #30
    295c:	d506      	bpl.n	296c <TC3_Handler+0x30>
    295e:	2302      	movs	r3, #2
    2960:	73a3      	strb	r3, [r4, #14]
    2962:	686b      	ldr	r3, [r5, #4]
    2964:	2b00      	cmp	r3, #0
    2966:	d001      	beq.n	296c <TC3_Handler+0x30>
    2968:	0028      	movs	r0, r5
    296a:	4798      	blx	r3
    296c:	bd70      	pop	{r4, r5, r6, pc}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	20000094 	.word	0x20000094

00002974 <_wdt_init>:
    2974:	b510      	push	{r4, lr}
    2976:	1e04      	subs	r4, r0, #0
    2978:	d025      	beq.n	29c6 <_wdt_init+0x52>
    297a:	6800      	ldr	r0, [r0, #0]
    297c:	1e43      	subs	r3, r0, #1
    297e:	4198      	sbcs	r0, r3
    2980:	b2c0      	uxtb	r0, r0
    2982:	224f      	movs	r2, #79	; 0x4f
    2984:	4914      	ldr	r1, [pc, #80]	; (29d8 <_wdt_init+0x64>)
    2986:	4b15      	ldr	r3, [pc, #84]	; (29dc <_wdt_init+0x68>)
    2988:	4798      	blx	r3
    298a:	6822      	ldr	r2, [r4, #0]
    298c:	79d3      	ldrb	r3, [r2, #7]
    298e:	09db      	lsrs	r3, r3, #7
    2990:	d1fc      	bne.n	298c <_wdt_init+0x18>
    2992:	7813      	ldrb	r3, [r2, #0]
    2994:	09db      	lsrs	r3, r3, #7
    2996:	d118      	bne.n	29ca <_wdt_init+0x56>
    2998:	79d3      	ldrb	r3, [r2, #7]
    299a:	09db      	lsrs	r3, r3, #7
    299c:	d1fc      	bne.n	2998 <_wdt_init+0x24>
    299e:	7813      	ldrb	r3, [r2, #0]
    29a0:	079b      	lsls	r3, r3, #30
    29a2:	d415      	bmi.n	29d0 <_wdt_init+0x5c>
    29a4:	7813      	ldrb	r3, [r2, #0]
    29a6:	2104      	movs	r1, #4
    29a8:	438b      	bics	r3, r1
    29aa:	7013      	strb	r3, [r2, #0]
    29ac:	79d3      	ldrb	r3, [r2, #7]
    29ae:	09db      	lsrs	r3, r3, #7
    29b0:	d1fc      	bne.n	29ac <_wdt_init+0x38>
    29b2:	6822      	ldr	r2, [r4, #0]
    29b4:	7853      	ldrb	r3, [r2, #1]
    29b6:	210f      	movs	r1, #15
    29b8:	438b      	bics	r3, r1
    29ba:	7053      	strb	r3, [r2, #1]
    29bc:	79d3      	ldrb	r3, [r2, #7]
    29be:	09db      	lsrs	r3, r3, #7
    29c0:	d1fc      	bne.n	29bc <_wdt_init+0x48>
    29c2:	2000      	movs	r0, #0
    29c4:	bd10      	pop	{r4, pc}
    29c6:	2000      	movs	r0, #0
    29c8:	e7db      	b.n	2982 <_wdt_init+0xe>
    29ca:	2011      	movs	r0, #17
    29cc:	4240      	negs	r0, r0
    29ce:	e7f9      	b.n	29c4 <_wdt_init+0x50>
    29d0:	2011      	movs	r0, #17
    29d2:	4240      	negs	r0, r0
    29d4:	e7f6      	b.n	29c4 <_wdt_init+0x50>
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	0000324c 	.word	0x0000324c
    29dc:	000019c9 	.word	0x000019c9

000029e0 <main>:
/**********************************************************************************************
 * Begin main function
**********************************************************************************************/

int main(void)
{
    29e0:	b570      	push	{r4, r5, r6, lr}
    29e2:	b082      	sub	sp, #8
	basal_insulin_delivered = false;
    29e4:	2300      	movs	r3, #0
    29e6:	4a35      	ldr	r2, [pc, #212]	; (2abc <main+0xdc>)
    29e8:	7013      	strb	r3, [r2, #0]
	bolus_insulin_delivered = false;
    29ea:	4a35      	ldr	r2, [pc, #212]	; (2ac0 <main+0xe0>)
    29ec:	7013      	strb	r3, [r2, #0]
	cycle_complete = false;
    29ee:	4a35      	ldr	r2, [pc, #212]	; (2ac4 <main+0xe4>)
    29f0:	7013      	strb	r3, [r2, #0]
	
	
	atmel_start_init(); // Initializes MCU, drivers and middleware.
    29f2:	4b35      	ldr	r3, [pc, #212]	; (2ac8 <main+0xe8>)
    29f4:	4798      	blx	r3
	
	SPI_Begin(); // Start SPI Peripheral.
    29f6:	4b35      	ldr	r3, [pc, #212]	; (2acc <main+0xec>)
    29f8:	4798      	blx	r3
	
	TIMER_0_setup(); // Setup TIMER_0 Peripheral used for debouncing
    29fa:	4b35      	ldr	r3, [pc, #212]	; (2ad0 <main+0xf0>)
    29fc:	4798      	blx	r3
	
	init_interrupts(); // Register interrupts and tie them to a callback function.
    29fe:	4b35      	ldr	r3, [pc, #212]	; (2ad4 <main+0xf4>)
    2a00:	4798      	blx	r3
	
	// Check a general purpose bit in the RTC to find out if the
	// time was set previously. Set it if not.
	if(!check_rtc_initialised()) 
    2a02:	4b35      	ldr	r3, [pc, #212]	; (2ad8 <main+0xf8>)
    2a04:	4798      	blx	r3
    2a06:	2800      	cmp	r0, #0
    2a08:	d123      	bne.n	2a52 <main+0x72>
	{
		initialise_rtc();
    2a0a:	4b34      	ldr	r3, [pc, #208]	; (2adc <main+0xfc>)
    2a0c:	4798      	blx	r3
		rtc_set_current_time(20, 8, 21, 16, 28, 00); // Enter date and time values here
    2a0e:	2300      	movs	r3, #0
    2a10:	9301      	str	r3, [sp, #4]
    2a12:	331c      	adds	r3, #28
    2a14:	9300      	str	r3, [sp, #0]
    2a16:	3b0c      	subs	r3, #12
    2a18:	2215      	movs	r2, #21
    2a1a:	2108      	movs	r1, #8
    2a1c:	2014      	movs	r0, #20
    2a1e:	4c30      	ldr	r4, [pc, #192]	; (2ae0 <main+0x100>)
    2a20:	47a0      	blx	r4
		basal_insulin_delivered = true; // Set true so insulin isn't delivered on first start up
    2a22:	2201      	movs	r2, #1
    2a24:	4b25      	ldr	r3, [pc, #148]	; (2abc <main+0xdc>)
    2a26:	701a      	strb	r2, [r3, #0]
		flash_initialise();
    2a28:	4b2e      	ldr	r3, [pc, #184]	; (2ae4 <main+0x104>)
    2a2a:	4798      	blx	r3
		get_delivery_data();
    2a2c:	4b2e      	ldr	r3, [pc, #184]	; (2ae8 <main+0x108>)
    2a2e:	4798      	blx	r3
		check_writes();
    2a30:	4b2e      	ldr	r3, [pc, #184]	; (2aec <main+0x10c>)
    2a32:	4798      	blx	r3
	//while(1)
	//{
		//turn_x_steps(false, ONE_UNIT);
	//}
	
	while(!cycle_complete)
    2a34:	4b23      	ldr	r3, [pc, #140]	; (2ac4 <main+0xe4>)
    2a36:	781b      	ldrb	r3, [r3, #0]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d12c      	bne.n	2a96 <main+0xb6>
	
	{
		set_leds(button_array[0]);
    2a3c:	4c2c      	ldr	r4, [pc, #176]	; (2af0 <main+0x110>)
    2a3e:	7820      	ldrb	r0, [r4, #0]
    2a40:	4b2c      	ldr	r3, [pc, #176]	; (2af4 <main+0x114>)
    2a42:	4798      	blx	r3
			button_array[0]--;
		}
		*/
		
		//	This point is reached when button 3 is pressed after buttons 0 and 1 have been used to set the insulinDeliveryAmount
		while(insulinDeliveryAmount > 0) {
    2a44:	78e3      	ldrb	r3, [r4, #3]
    2a46:	2b00      	cmp	r3, #0
    2a48:	d01c      	beq.n	2a84 <main+0xa4>
			//	our secondary device (Arduino Nano 33 IoT) sends a signal to the insulin pump every 5 minutes.
			//	assuming a generous margin of error of 30%, the maximum dosage delivery amount we should see is
			//	130 units * 10 1/10th units / 24 hours / 12 minutes ~= 4.51 1/10th units per 5 minutes
			//	therefore we cap the maximum amount at 5
			if(insulinDeliveryAmount > 5)	
				insulinDeliveryAmount = 5;
    2a4a:	4e29      	ldr	r6, [pc, #164]	; (2af0 <main+0x110>)
			turn_x_steps(true, ONE_TENTH_UNIT);
    2a4c:	4d2a      	ldr	r5, [pc, #168]	; (2af8 <main+0x118>)
			insulinDeliveryAmount--;
    2a4e:	0034      	movs	r4, r6
    2a50:	e013      	b.n	2a7a <main+0x9a>
		rtc_clear_interrupts();
    2a52:	4b2a      	ldr	r3, [pc, #168]	; (2afc <main+0x11c>)
    2a54:	4798      	blx	r3
		get_delivery_data();
    2a56:	4b24      	ldr	r3, [pc, #144]	; (2ae8 <main+0x108>)
    2a58:	4798      	blx	r3
		check_writes();
    2a5a:	4b24      	ldr	r3, [pc, #144]	; (2aec <main+0x10c>)
    2a5c:	4798      	blx	r3
		set_leds(button_array[0]);
    2a5e:	4b24      	ldr	r3, [pc, #144]	; (2af0 <main+0x110>)
    2a60:	7818      	ldrb	r0, [r3, #0]
    2a62:	4b24      	ldr	r3, [pc, #144]	; (2af4 <main+0x114>)
    2a64:	4798      	blx	r3
    2a66:	e7e5      	b.n	2a34 <main+0x54>
			turn_x_steps(true, ONE_TENTH_UNIT);
    2a68:	2147      	movs	r1, #71	; 0x47
    2a6a:	2001      	movs	r0, #1
    2a6c:	47a8      	blx	r5
			insulinDeliveryAmount--;
    2a6e:	78e3      	ldrb	r3, [r4, #3]
    2a70:	3b01      	subs	r3, #1
    2a72:	b2db      	uxtb	r3, r3
    2a74:	70e3      	strb	r3, [r4, #3]
		while(insulinDeliveryAmount > 0) {
    2a76:	2b00      	cmp	r3, #0
    2a78:	d004      	beq.n	2a84 <main+0xa4>
			if(insulinDeliveryAmount > 5)	
    2a7a:	2b05      	cmp	r3, #5
    2a7c:	d9f4      	bls.n	2a68 <main+0x88>
				insulinDeliveryAmount = 5;
    2a7e:	2305      	movs	r3, #5
    2a80:	70f3      	strb	r3, [r6, #3]
    2a82:	e7f1      	b.n	2a68 <main+0x88>
		}
		insulinDeliveryIndex = -1;
    2a84:	22ff      	movs	r2, #255	; 0xff
    2a86:	4b1e      	ldr	r3, [pc, #120]	; (2b00 <main+0x120>)
    2a88:	701a      	strb	r2, [r3, #0]
		insulinDeliveryAmount = 0;
    2a8a:	2200      	movs	r2, #0
    2a8c:	4b18      	ldr	r3, [pc, #96]	; (2af0 <main+0x110>)
    2a8e:	70da      	strb	r2, [r3, #3]
		cycle_complete = true;
    2a90:	3201      	adds	r2, #1
    2a92:	4b0c      	ldr	r3, [pc, #48]	; (2ac4 <main+0xe4>)
    2a94:	701a      	strb	r2, [r3, #0]
	}
	
	flash_erase(&FLASH_0, flash_address, 1);
    2a96:	4b1b      	ldr	r3, [pc, #108]	; (2b04 <main+0x124>)
    2a98:	8819      	ldrh	r1, [r3, #0]
    2a9a:	2201      	movs	r2, #1
    2a9c:	481a      	ldr	r0, [pc, #104]	; (2b08 <main+0x128>)
    2a9e:	4b1b      	ldr	r3, [pc, #108]	; (2b0c <main+0x12c>)
    2aa0:	4798      	blx	r3
	store_delivery_data();
    2aa2:	4b1b      	ldr	r3, [pc, #108]	; (2b10 <main+0x130>)
    2aa4:	4798      	blx	r3
	delay_ms(5000);
    2aa6:	481b      	ldr	r0, [pc, #108]	; (2b14 <main+0x134>)
    2aa8:	4b1b      	ldr	r3, [pc, #108]	; (2b18 <main+0x138>)
    2aaa:	4798      	blx	r3
	leds_off();
    2aac:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <main+0x13c>)
    2aae:	4798      	blx	r3
	sleep(2);
    2ab0:	2002      	movs	r0, #2
    2ab2:	4b1b      	ldr	r3, [pc, #108]	; (2b20 <main+0x140>)
    2ab4:	4798      	blx	r3
}
    2ab6:	2000      	movs	r0, #0
    2ab8:	b002      	add	sp, #8
    2aba:	bd70      	pop	{r4, r5, r6, pc}
    2abc:	20000177 	.word	0x20000177
    2ac0:	20000144 	.word	0x20000144
    2ac4:	20000176 	.word	0x20000176
    2ac8:	00000115 	.word	0x00000115
    2acc:	00002e25 	.word	0x00002e25
    2ad0:	00000175 	.word	0x00000175
    2ad4:	000001a1 	.word	0x000001a1
    2ad8:	00002e09 	.word	0x00002e09
    2adc:	00002d45 	.word	0x00002d45
    2ae0:	00002d81 	.word	0x00002d81
    2ae4:	00000e11 	.word	0x00000e11
    2ae8:	00000e69 	.word	0x00000e69
    2aec:	00000ee9 	.word	0x00000ee9
    2af0:	20000098 	.word	0x20000098
    2af4:	00000219 	.word	0x00000219
    2af8:	00002b79 	.word	0x00002b79
    2afc:	00002df1 	.word	0x00002df1
    2b00:	20000000 	.word	0x20000000
    2b04:	20000018 	.word	0x20000018
    2b08:	200000c4 	.word	0x200000c4
    2b0c:	000013e1 	.word	0x000013e1
    2b10:	00000d8d 	.word	0x00000d8d
    2b14:	00001388 	.word	0x00001388
    2b18:	00001041 	.word	0x00001041
    2b1c:	000003b5 	.word	0x000003b5
    2b20:	00001581 	.word	0x00001581

00002b24 <set_motor_direction>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2b24:	2800      	cmp	r0, #0
    2b26:	d105      	bne.n	2b34 <set_motor_direction+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b28:	2280      	movs	r2, #128	; 0x80
    2b2a:	0212      	lsls	r2, r2, #8
    2b2c:	23c0      	movs	r3, #192	; 0xc0
    2b2e:	05db      	lsls	r3, r3, #23
    2b30:	615a      	str	r2, [r3, #20]

void set_motor_direction(bool direction)
// call this function to change the value of the DIR pin on the IC which controls the direction the motor turns
{
	gpio_set_pin_level(DIR, direction);
}
    2b32:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b34:	2280      	movs	r2, #128	; 0x80
    2b36:	0212      	lsls	r2, r2, #8
    2b38:	23c0      	movs	r3, #192	; 0xc0
    2b3a:	05db      	lsls	r3, r3, #23
    2b3c:	619a      	str	r2, [r3, #24]
    2b3e:	e7f8      	b.n	2b32 <set_motor_direction+0xe>

00002b40 <step_motor>:

void step_motor(bool direction)
/* this function will call set_motor_direction() to set the motor function to turn one step in the direction of the passed variable. If there is a falult with the motor nothing will happen.
   One step will then be recorded in the steps_turned variable to keep track of how much the motor has turned */
{
    2b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
		set_motor_direction(direction);
    2b42:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <step_motor+0x2c>)
    2b44:	4798      	blx	r3
    2b46:	26c0      	movs	r6, #192	; 0xc0
    2b48:	05f6      	lsls	r6, r6, #23
    2b4a:	2780      	movs	r7, #128	; 0x80
    2b4c:	01ff      	lsls	r7, r7, #7
    2b4e:	61b7      	str	r7, [r6, #24]
		gpio_set_pin_level(STEP, 1);
		delay_us(DELAY_TIME);
    2b50:	25fa      	movs	r5, #250	; 0xfa
    2b52:	006d      	lsls	r5, r5, #1
    2b54:	0028      	movs	r0, r5
    2b56:	4c06      	ldr	r4, [pc, #24]	; (2b70 <step_motor+0x30>)
    2b58:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b5a:	6177      	str	r7, [r6, #20]
		gpio_set_pin_level(STEP, 0);
		delay_us(DELAY_TIME);
    2b5c:	0028      	movs	r0, r5
    2b5e:	47a0      	blx	r4
		steps_turned += 1;
    2b60:	4a04      	ldr	r2, [pc, #16]	; (2b74 <step_motor+0x34>)
    2b62:	6813      	ldr	r3, [r2, #0]
    2b64:	3301      	adds	r3, #1
    2b66:	6013      	str	r3, [r2, #0]
	
	
}
    2b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	00002b25 	.word	0x00002b25
    2b70:	00001021 	.word	0x00001021
    2b74:	200000a4 	.word	0x200000a4

00002b78 <turn_x_steps>:

void turn_x_steps(bool direction, uint16_t steps_to_turn)
/* this function will turn the motor a x number of steps in the specified direction. x will have to be worked out from the basal rate, bolus rate, and motor testing to determine
   how much insulin is actually required */ 
{
    2b78:	b570      	push	{r4, r5, r6, lr}
    2b7a:	0005      	movs	r5, r0
    2b7c:	000c      	movs	r4, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b7e:	2208      	movs	r2, #8
    2b80:	23c0      	movs	r3, #192	; 0xc0
    2b82:	05db      	lsls	r3, r3, #23
    2b84:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(BOOST_EN, true);
	delay_ms(20);
    2b86:	2014      	movs	r0, #20
    2b88:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <turn_x_steps+0x30>)
    2b8a:	4798      	blx	r3
	while(steps_to_turn > 0)
    2b8c:	2c00      	cmp	r4, #0
    2b8e:	d006      	beq.n	2b9e <turn_x_steps+0x26>
	{
		step_motor(direction);
    2b90:	4e06      	ldr	r6, [pc, #24]	; (2bac <turn_x_steps+0x34>)
    2b92:	0028      	movs	r0, r5
    2b94:	47b0      	blx	r6
		steps_to_turn -=1;
    2b96:	3c01      	subs	r4, #1
    2b98:	b2a4      	uxth	r4, r4
	while(steps_to_turn > 0)
    2b9a:	2c00      	cmp	r4, #0
    2b9c:	d1f9      	bne.n	2b92 <turn_x_steps+0x1a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b9e:	2208      	movs	r2, #8
    2ba0:	23c0      	movs	r3, #192	; 0xc0
    2ba2:	05db      	lsls	r3, r3, #23
    2ba4:	615a      	str	r2, [r3, #20]
	}
	gpio_set_pin_level(BOOST_EN, false);
}
    2ba6:	bd70      	pop	{r4, r5, r6, pc}
    2ba8:	00001041 	.word	0x00001041
    2bac:	00002b41 	.word	0x00002b41

00002bb0 <bin2bcd>:
// bcd2bin and bin2bcd written by max
uint8_t bcd2bin(uint8_t value){
	return (value & 0x0F) + ((value >> 4) * 10);
}

uint8_t bin2bcd(uint8_t value){
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	0005      	movs	r5, r0
	return ((value / 10) << 4) + value % 10;
    2bb4:	210a      	movs	r1, #10
    2bb6:	4b05      	ldr	r3, [pc, #20]	; (2bcc <bin2bcd+0x1c>)
    2bb8:	4798      	blx	r3
    2bba:	0104      	lsls	r4, r0, #4
    2bbc:	210a      	movs	r1, #10
    2bbe:	0028      	movs	r0, r5
    2bc0:	4b03      	ldr	r3, [pc, #12]	; (2bd0 <bin2bcd+0x20>)
    2bc2:	4798      	blx	r3
    2bc4:	1864      	adds	r4, r4, r1
    2bc6:	b2e0      	uxtb	r0, r4
}
    2bc8:	bd70      	pop	{r4, r5, r6, pc}
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	00002e65 	.word	0x00002e65
    2bd0:	00002f71 	.word	0x00002f71

00002bd4 <rtc_write_operation>:

// generic function to write address and any data to the rtc, complies the data and address into a
// single array and writes in one go, can be used to write multiple subsequent registers.
void rtc_write_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bd6:	af00      	add	r7, sp, #0
    2bd8:	000e      	movs	r6, r1
	uint8_t address_and_data[(data_length + 1)]; // create an array one element larger to hold 8bit address and data
    2bda:	1c55      	adds	r5, r2, #1
    2bdc:	0013      	movs	r3, r2
    2bde:	3308      	adds	r3, #8
    2be0:	08db      	lsrs	r3, r3, #3
    2be2:	00db      	lsls	r3, r3, #3
    2be4:	4669      	mov	r1, sp
    2be6:	1acb      	subs	r3, r1, r3
    2be8:	469d      	mov	sp, r3
    2bea:	4669      	mov	r1, sp
	uint8_t i;
	address_and_data[0] = address; // set first element as address
    2bec:	7008      	strb	r0, [r1, #0]
	for(i = 1; i < (data_length + 1); i++)
    2bee:	2d01      	cmp	r5, #1
    2bf0:	dd0a      	ble.n	2c08 <rtc_write_operation+0x34>
    2bf2:	2401      	movs	r4, #1
    2bf4:	2301      	movs	r3, #1
	{
		address_and_data[i] = data[(i-1)];
    2bf6:	18f0      	adds	r0, r6, r3
    2bf8:	3801      	subs	r0, #1
    2bfa:	7800      	ldrb	r0, [r0, #0]
    2bfc:	5508      	strb	r0, [r1, r4]
	for(i = 1; i < (data_length + 1); i++)
    2bfe:	3301      	adds	r3, #1
    2c00:	b2db      	uxtb	r3, r3
    2c02:	001c      	movs	r4, r3
    2c04:	429d      	cmp	r5, r3
    2c06:	dcf6      	bgt.n	2bf6 <rtc_write_operation+0x22>
    2c08:	24c0      	movs	r4, #192	; 0xc0
    2c0a:	05e4      	lsls	r4, r4, #23
    2c0c:	2501      	movs	r5, #1
    2c0e:	6165      	str	r5, [r4, #20]
	}
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address_and_data[0], (data_length + 1 ));
    2c10:	3201      	adds	r2, #1
    2c12:	4b03      	ldr	r3, [pc, #12]	; (2c20 <rtc_write_operation+0x4c>)
    2c14:	6818      	ldr	r0, [r3, #0]
    2c16:	4b03      	ldr	r3, [pc, #12]	; (2c24 <rtc_write_operation+0x50>)
    2c18:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c1a:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2c1c:	46bd      	mov	sp, r7
    2c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c20:	20000140 	.word	0x20000140
    2c24:	000014b9 	.word	0x000014b9

00002c28 <rtc_read_operation>:

// generic function to read data from the rtc, as above can read subsequent registers in one go.
void rtc_read_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	b083      	sub	sp, #12
    2c2c:	000e      	movs	r6, r1
    2c2e:	9200      	str	r2, [sp, #0]
    2c30:	466b      	mov	r3, sp
    2c32:	1dd9      	adds	r1, r3, #7
    2c34:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c36:	25c0      	movs	r5, #192	; 0xc0
    2c38:	05ed      	lsls	r5, r5, #23
    2c3a:	2701      	movs	r7, #1
    2c3c:	616f      	str	r7, [r5, #20]
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address, 1);
    2c3e:	4c07      	ldr	r4, [pc, #28]	; (2c5c <rtc_read_operation+0x34>)
    2c40:	2201      	movs	r2, #1
    2c42:	6820      	ldr	r0, [r4, #0]
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <rtc_read_operation+0x38>)
    2c46:	4798      	blx	r3
	io_read(spi_io, &data[0], data_length);
    2c48:	466b      	mov	r3, sp
    2c4a:	881a      	ldrh	r2, [r3, #0]
    2c4c:	6820      	ldr	r0, [r4, #0]
    2c4e:	0031      	movs	r1, r6
    2c50:	4b04      	ldr	r3, [pc, #16]	; (2c64 <rtc_read_operation+0x3c>)
    2c52:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c54:	61af      	str	r7, [r5, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2c56:	b003      	add	sp, #12
    2c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	20000140 	.word	0x20000140
    2c60:	000014b9 	.word	0x000014b9
    2c64:	000014ed 	.word	0x000014ed

00002c68 <set_control_1_register>:

// following functions set registers on the rtc


void set_control_1_register()
{
    2c68:	b500      	push	{lr}
    2c6a:	b083      	sub	sp, #12
	uint8_t address = 0x90; // 0x10 with a 1 bit shifted to bit 7 to denote a write = 0x90 = 10010000
	uint8_t data[1] = {0b00010101};
    2c6c:	a901      	add	r1, sp, #4
    2c6e:	2315      	movs	r3, #21
    2c70:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c72:	2201      	movs	r2, #1
    2c74:	2090      	movs	r0, #144	; 0x90
    2c76:	4b02      	ldr	r3, [pc, #8]	; (2c80 <set_control_1_register+0x18>)
    2c78:	4798      	blx	r3
}
    2c7a:	b003      	add	sp, #12
    2c7c:	bd00      	pop	{pc}
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	00002bd5 	.word	0x00002bd5

00002c84 <set_control_2_register>:

void set_control_2_register()
{
    2c84:	b500      	push	{lr}
    2c86:	b083      	sub	sp, #12
	uint8_t address = 0x91; // 0x11 with a 1 bit shifted to bit 7 to allow write = 0x91 = 10010001
	uint8_t data[1] = {0b00011011};
    2c88:	a901      	add	r1, sp, #4
    2c8a:	231b      	movs	r3, #27
    2c8c:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c8e:	2201      	movs	r2, #1
    2c90:	2091      	movs	r0, #145	; 0x91
    2c92:	4b02      	ldr	r3, [pc, #8]	; (2c9c <set_control_2_register+0x18>)
    2c94:	4798      	blx	r3
}
    2c96:	b003      	add	sp, #12
    2c98:	bd00      	pop	{pc}
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	00002bd5 	.word	0x00002bd5

00002ca0 <set_status_register>:

void set_status_register()
{
    2ca0:	b500      	push	{lr}
    2ca2:	b083      	sub	sp, #12
	uint8_t address = 0x9D; // 0x1D |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2ca4:	a901      	add	r1, sp, #4
    2ca6:	2300      	movs	r3, #0
    2ca8:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2caa:	2201      	movs	r2, #1
    2cac:	209d      	movs	r0, #157	; 0x9d
    2cae:	4b02      	ldr	r3, [pc, #8]	; (2cb8 <set_status_register+0x18>)
    2cb0:	4798      	blx	r3
}
    2cb2:	b003      	add	sp, #12
    2cb4:	bd00      	pop	{pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	00002bd5 	.word	0x00002bd5

00002cbc <set_interrupt_mask_register>:

void set_interrupt_mask_register()
{
    2cbc:	b500      	push	{lr}
    2cbe:	b083      	sub	sp, #12
	uint8_t address = 0x92;// 0x12 |= (1 << 7)
	uint8_t data[1] = {0b01101100}; //0b01101100
    2cc0:	a901      	add	r1, sp, #4
    2cc2:	236c      	movs	r3, #108	; 0x6c
    2cc4:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2cc6:	2201      	movs	r2, #1
    2cc8:	2092      	movs	r0, #146	; 0x92
    2cca:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <set_interrupt_mask_register+0x18>)
    2ccc:	4798      	blx	r3
}
    2cce:	b003      	add	sp, #12
    2cd0:	bd00      	pop	{pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	00002bd5 	.word	0x00002bd5

00002cd8 <set_squarewave_register>:

void set_squarewave_register()
{
    2cd8:	b500      	push	{lr}
    2cda:	b083      	sub	sp, #12
	uint8_t address = 0x93; // 0x13 |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2cdc:	a901      	add	r1, sp, #4
    2cde:	2300      	movs	r3, #0
    2ce0:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);	
    2ce2:	2201      	movs	r2, #1
    2ce4:	2093      	movs	r0, #147	; 0x93
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <set_squarewave_register+0x18>)
    2ce8:	4798      	blx	r3
}
    2cea:	b003      	add	sp, #12
    2cec:	bd00      	pop	{pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	00002bd5 	.word	0x00002bd5

00002cf4 <set_osc_control>:

void set_osc_control()
{
    2cf4:	b530      	push	{r4, r5, lr}
    2cf6:	b083      	sub	sp, #12
	// need to write config key with value 0xA1 to change osc control
	uint8_t address = 0x9F; // 0x1F |= (1 << 7)
	uint8_t data[1] = {0xA1};
    2cf8:	ac01      	add	r4, sp, #4
    2cfa:	23a1      	movs	r3, #161	; 0xa1
    2cfc:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2cfe:	2201      	movs	r2, #1
    2d00:	0021      	movs	r1, r4
    2d02:	209f      	movs	r0, #159	; 0x9f
    2d04:	4d04      	ldr	r5, [pc, #16]	; (2d18 <set_osc_control+0x24>)
    2d06:	47a8      	blx	r5
	address = 0x9C; // 0x1C |= (1 << 7)
	data[1] = 0b01001000;
    2d08:	2348      	movs	r3, #72	; 0x48
    2d0a:	7063      	strb	r3, [r4, #1]
	rtc_write_operation(address, data, 1);
    2d0c:	2201      	movs	r2, #1
    2d0e:	0021      	movs	r1, r4
    2d10:	209c      	movs	r0, #156	; 0x9c
    2d12:	47a8      	blx	r5
}
    2d14:	b003      	add	sp, #12
    2d16:	bd30      	pop	{r4, r5, pc}
    2d18:	00002bd5 	.word	0x00002bd5

00002d1c <set_alarm_register>:

void set_alarm_register()
{
    2d1c:	b530      	push	{r4, r5, lr}
    2d1e:	b083      	sub	sp, #12
	uint8_t address = 0x98; // 0x18 |= (1 << 7)
	//	NJIT: We are using a secondary device to send instructions on when to deliver insulin dosages.
	//	As such, we don't want the device to reset by itself. See documentation for details on register values:
	//	https://abracon.com/Support/AppsManuals/Precisiontiming/AB18XX-Application-Manual.pdf
	//	uint8_t data[1] = {0b00010100};
	uint8_t data[1] = {0b00000000};
    2d20:	ac01      	add	r4, sp, #4
    2d22:	2300      	movs	r3, #0
    2d24:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2d26:	2201      	movs	r2, #1
    2d28:	0021      	movs	r1, r4
    2d2a:	2098      	movs	r0, #152	; 0x98
    2d2c:	4d04      	ldr	r5, [pc, #16]	; (2d40 <set_alarm_register+0x24>)
    2d2e:	47a8      	blx	r5
	address = 0x8A; //0x0A |= (1 << 7)
	data[0] = 0b00110000;
    2d30:	2330      	movs	r3, #48	; 0x30
    2d32:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2d34:	2201      	movs	r2, #1
    2d36:	0021      	movs	r1, r4
    2d38:	208a      	movs	r0, #138	; 0x8a
    2d3a:	47a8      	blx	r5
}
    2d3c:	b003      	add	sp, #12
    2d3e:	bd30      	pop	{r4, r5, pc}
    2d40:	00002bd5 	.word	0x00002bd5

00002d44 <initialise_rtc>:

// combine all initialisation functions and send at once
void initialise_rtc()
{
    2d44:	b510      	push	{r4, lr}
	set_control_1_register();
    2d46:	4b07      	ldr	r3, [pc, #28]	; (2d64 <initialise_rtc+0x20>)
    2d48:	4798      	blx	r3
	set_control_2_register();
    2d4a:	4b07      	ldr	r3, [pc, #28]	; (2d68 <initialise_rtc+0x24>)
    2d4c:	4798      	blx	r3
	set_status_register();
    2d4e:	4b07      	ldr	r3, [pc, #28]	; (2d6c <initialise_rtc+0x28>)
    2d50:	4798      	blx	r3
	set_interrupt_mask_register();
    2d52:	4b07      	ldr	r3, [pc, #28]	; (2d70 <initialise_rtc+0x2c>)
    2d54:	4798      	blx	r3
	set_squarewave_register();
    2d56:	4b07      	ldr	r3, [pc, #28]	; (2d74 <initialise_rtc+0x30>)
    2d58:	4798      	blx	r3
	set_osc_control();
    2d5a:	4b07      	ldr	r3, [pc, #28]	; (2d78 <initialise_rtc+0x34>)
    2d5c:	4798      	blx	r3
	set_alarm_register();
    2d5e:	4b07      	ldr	r3, [pc, #28]	; (2d7c <initialise_rtc+0x38>)
    2d60:	4798      	blx	r3
	//rtc_clear_interrupts();
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	00002c69 	.word	0x00002c69
    2d68:	00002c85 	.word	0x00002c85
    2d6c:	00002ca1 	.word	0x00002ca1
    2d70:	00002cbd 	.word	0x00002cbd
    2d74:	00002cd9 	.word	0x00002cd9
    2d78:	00002cf5 	.word	0x00002cf5
    2d7c:	00002d1d 	.word	0x00002d1d

00002d80 <rtc_set_current_time>:

// converts the input time to bcd format and sends to the rtc
void rtc_set_current_time(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d82:	b085      	sub	sp, #20
    2d84:	0004      	movs	r4, r0
    2d86:	000f      	movs	r7, r1
    2d88:	9200      	str	r2, [sp, #0]
    2d8a:	9301      	str	r3, [sp, #4]
    2d8c:	ab0a      	add	r3, sp, #40	; 0x28
    2d8e:	781e      	ldrb	r6, [r3, #0]
    2d90:	ab0b      	add	r3, sp, #44	; 0x2c
    2d92:	781d      	ldrb	r5, [r3, #0]
	uint8_t date_and_time[5] = {0};  // year values must range from 0 to 99
    2d94:	2205      	movs	r2, #5
    2d96:	2100      	movs	r1, #0
    2d98:	a802      	add	r0, sp, #8
    2d9a:	4b12      	ldr	r3, [pc, #72]	; (2de4 <rtc_set_current_time+0x64>)
    2d9c:	4798      	blx	r3
	date_and_time[5] = bin2bcd(year);
    2d9e:	0020      	movs	r0, r4
    2da0:	4c11      	ldr	r4, [pc, #68]	; (2de8 <rtc_set_current_time+0x68>)
    2da2:	47a0      	blx	r4
    2da4:	a902      	add	r1, sp, #8
    2da6:	7148      	strb	r0, [r1, #5]
	date_and_time[4] = bin2bcd(month);
    2da8:	0038      	movs	r0, r7
    2daa:	47a0      	blx	r4
    2dac:	a902      	add	r1, sp, #8
    2dae:	7108      	strb	r0, [r1, #4]
	date_and_time[3] = bin2bcd(day);
    2db0:	9800      	ldr	r0, [sp, #0]
    2db2:	47a0      	blx	r4
    2db4:	aa02      	add	r2, sp, #8
    2db6:	70d0      	strb	r0, [r2, #3]
	date_and_time[2] = bin2bcd(hour);
    2db8:	9801      	ldr	r0, [sp, #4]
    2dba:	47a0      	blx	r4
    2dbc:	ab02      	add	r3, sp, #8
    2dbe:	7098      	strb	r0, [r3, #2]
	date_and_time[1] = bin2bcd(minute);
    2dc0:	0030      	movs	r0, r6
    2dc2:	47a0      	blx	r4
    2dc4:	ab02      	add	r3, sp, #8
    2dc6:	7058      	strb	r0, [r3, #1]
	date_and_time[0] = bin2bcd(second);
    2dc8:	0028      	movs	r0, r5
    2dca:	47a0      	blx	r4
	// writes the GP0 bit of the seconds register so this can be checked later to see if the rtc has been initialised
	// and the time has been set. 
	date_and_time[0] |= (1 << 7); 
    2dcc:	2380      	movs	r3, #128	; 0x80
    2dce:	425b      	negs	r3, r3
    2dd0:	4318      	orrs	r0, r3
    2dd2:	ab02      	add	r3, sp, #8
    2dd4:	7018      	strb	r0, [r3, #0]
	rtc_write_operation(0x81, date_and_time, 6);
    2dd6:	2206      	movs	r2, #6
    2dd8:	0019      	movs	r1, r3
    2dda:	2081      	movs	r0, #129	; 0x81
    2ddc:	4b03      	ldr	r3, [pc, #12]	; (2dec <rtc_set_current_time+0x6c>)
    2dde:	4798      	blx	r3
}
    2de0:	b005      	add	sp, #20
    2de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de4:	00003019 	.word	0x00003019
    2de8:	00002bb1 	.word	0x00002bb1
    2dec:	00002bd5 	.word	0x00002bd5

00002df0 <rtc_clear_interrupts>:
	ascii[1] = (byte & 0x0F) + 48;
}

// reads the status register in the rtc to clear all interrupts
void rtc_clear_interrupts()
{
    2df0:	b500      	push	{lr}
    2df2:	b083      	sub	sp, #12
	uint8_t data[1];
	rtc_read_operation(0x0F, data, 1);
    2df4:	2201      	movs	r2, #1
    2df6:	a901      	add	r1, sp, #4
    2df8:	200f      	movs	r0, #15
    2dfa:	4b02      	ldr	r3, [pc, #8]	; (2e04 <rtc_clear_interrupts+0x14>)
    2dfc:	4798      	blx	r3
}
    2dfe:	b003      	add	sp, #12
    2e00:	bd00      	pop	{pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	00002c29 	.word	0x00002c29

00002e08 <check_rtc_initialised>:
	gpio_set_pin_level(SS_RTC, true);
}

// reads the seconds register to check if GP0 has been set. does an & comparison and if it is set will output true.
bool check_rtc_initialised()
{
    2e08:	b510      	push	{r4, lr}
    2e0a:	b082      	sub	sp, #8
	uint8_t data[1];
	bool result;
	rtc_read_operation(0x01, data, 1);
    2e0c:	ac01      	add	r4, sp, #4
    2e0e:	2201      	movs	r2, #1
    2e10:	0021      	movs	r1, r4
    2e12:	2001      	movs	r0, #1
    2e14:	4b02      	ldr	r3, [pc, #8]	; (2e20 <check_rtc_initialised+0x18>)
    2e16:	4798      	blx	r3
	uint8_t GP0 = data[0] & 0b10000000;
	if (GP0 == 0b10000000)
    2e18:	7820      	ldrb	r0, [r4, #0]
    2e1a:	09c0      	lsrs	r0, r0, #7
		result = true;
	} else {
		result = false;
	}
	return result;
}
    2e1c:	b002      	add	sp, #8
    2e1e:	bd10      	pop	{r4, pc}
    2e20:	00002c29 	.word	0x00002c29

00002e24 <SPI_Begin>:
#include <driver_init.h>


extern struct io_descriptor *spi_io;

void SPI_Begin(void){
    2e24:	b510      	push	{r4, lr}
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_io);
    2e26:	4c08      	ldr	r4, [pc, #32]	; (2e48 <SPI_Begin+0x24>)
    2e28:	4908      	ldr	r1, [pc, #32]	; (2e4c <SPI_Begin+0x28>)
    2e2a:	0020      	movs	r0, r4
    2e2c:	4b08      	ldr	r3, [pc, #32]	; (2e50 <SPI_Begin+0x2c>)
    2e2e:	4798      	blx	r3
	spi_m_sync_set_baudrate(&SPI_0, 100000);
    2e30:	4908      	ldr	r1, [pc, #32]	; (2e54 <SPI_Begin+0x30>)
    2e32:	0020      	movs	r0, r4
    2e34:	4b08      	ldr	r3, [pc, #32]	; (2e58 <SPI_Begin+0x34>)
    2e36:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
    2e38:	2100      	movs	r1, #0
    2e3a:	0020      	movs	r0, r4
    2e3c:	4b07      	ldr	r3, [pc, #28]	; (2e5c <SPI_Begin+0x38>)
    2e3e:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2e40:	0020      	movs	r0, r4
    2e42:	4b07      	ldr	r3, [pc, #28]	; (2e60 <SPI_Begin+0x3c>)
    2e44:	4798      	blx	r3
}
    2e46:	bd10      	pop	{r4, pc}
    2e48:	2000010c 	.word	0x2000010c
    2e4c:	20000140 	.word	0x20000140
    2e50:	00001735 	.word	0x00001735
    2e54:	000186a0 	.word	0x000186a0
    2e58:	0000161d 	.word	0x0000161d
    2e5c:	00001649 	.word	0x00001649
    2e60:	000015f5 	.word	0x000015f5

00002e64 <__udivsi3>:
    2e64:	2200      	movs	r2, #0
    2e66:	0843      	lsrs	r3, r0, #1
    2e68:	428b      	cmp	r3, r1
    2e6a:	d374      	bcc.n	2f56 <__udivsi3+0xf2>
    2e6c:	0903      	lsrs	r3, r0, #4
    2e6e:	428b      	cmp	r3, r1
    2e70:	d35f      	bcc.n	2f32 <__udivsi3+0xce>
    2e72:	0a03      	lsrs	r3, r0, #8
    2e74:	428b      	cmp	r3, r1
    2e76:	d344      	bcc.n	2f02 <__udivsi3+0x9e>
    2e78:	0b03      	lsrs	r3, r0, #12
    2e7a:	428b      	cmp	r3, r1
    2e7c:	d328      	bcc.n	2ed0 <__udivsi3+0x6c>
    2e7e:	0c03      	lsrs	r3, r0, #16
    2e80:	428b      	cmp	r3, r1
    2e82:	d30d      	bcc.n	2ea0 <__udivsi3+0x3c>
    2e84:	22ff      	movs	r2, #255	; 0xff
    2e86:	0209      	lsls	r1, r1, #8
    2e88:	ba12      	rev	r2, r2
    2e8a:	0c03      	lsrs	r3, r0, #16
    2e8c:	428b      	cmp	r3, r1
    2e8e:	d302      	bcc.n	2e96 <__udivsi3+0x32>
    2e90:	1212      	asrs	r2, r2, #8
    2e92:	0209      	lsls	r1, r1, #8
    2e94:	d065      	beq.n	2f62 <__udivsi3+0xfe>
    2e96:	0b03      	lsrs	r3, r0, #12
    2e98:	428b      	cmp	r3, r1
    2e9a:	d319      	bcc.n	2ed0 <__udivsi3+0x6c>
    2e9c:	e000      	b.n	2ea0 <__udivsi3+0x3c>
    2e9e:	0a09      	lsrs	r1, r1, #8
    2ea0:	0bc3      	lsrs	r3, r0, #15
    2ea2:	428b      	cmp	r3, r1
    2ea4:	d301      	bcc.n	2eaa <__udivsi3+0x46>
    2ea6:	03cb      	lsls	r3, r1, #15
    2ea8:	1ac0      	subs	r0, r0, r3
    2eaa:	4152      	adcs	r2, r2
    2eac:	0b83      	lsrs	r3, r0, #14
    2eae:	428b      	cmp	r3, r1
    2eb0:	d301      	bcc.n	2eb6 <__udivsi3+0x52>
    2eb2:	038b      	lsls	r3, r1, #14
    2eb4:	1ac0      	subs	r0, r0, r3
    2eb6:	4152      	adcs	r2, r2
    2eb8:	0b43      	lsrs	r3, r0, #13
    2eba:	428b      	cmp	r3, r1
    2ebc:	d301      	bcc.n	2ec2 <__udivsi3+0x5e>
    2ebe:	034b      	lsls	r3, r1, #13
    2ec0:	1ac0      	subs	r0, r0, r3
    2ec2:	4152      	adcs	r2, r2
    2ec4:	0b03      	lsrs	r3, r0, #12
    2ec6:	428b      	cmp	r3, r1
    2ec8:	d301      	bcc.n	2ece <__udivsi3+0x6a>
    2eca:	030b      	lsls	r3, r1, #12
    2ecc:	1ac0      	subs	r0, r0, r3
    2ece:	4152      	adcs	r2, r2
    2ed0:	0ac3      	lsrs	r3, r0, #11
    2ed2:	428b      	cmp	r3, r1
    2ed4:	d301      	bcc.n	2eda <__udivsi3+0x76>
    2ed6:	02cb      	lsls	r3, r1, #11
    2ed8:	1ac0      	subs	r0, r0, r3
    2eda:	4152      	adcs	r2, r2
    2edc:	0a83      	lsrs	r3, r0, #10
    2ede:	428b      	cmp	r3, r1
    2ee0:	d301      	bcc.n	2ee6 <__udivsi3+0x82>
    2ee2:	028b      	lsls	r3, r1, #10
    2ee4:	1ac0      	subs	r0, r0, r3
    2ee6:	4152      	adcs	r2, r2
    2ee8:	0a43      	lsrs	r3, r0, #9
    2eea:	428b      	cmp	r3, r1
    2eec:	d301      	bcc.n	2ef2 <__udivsi3+0x8e>
    2eee:	024b      	lsls	r3, r1, #9
    2ef0:	1ac0      	subs	r0, r0, r3
    2ef2:	4152      	adcs	r2, r2
    2ef4:	0a03      	lsrs	r3, r0, #8
    2ef6:	428b      	cmp	r3, r1
    2ef8:	d301      	bcc.n	2efe <__udivsi3+0x9a>
    2efa:	020b      	lsls	r3, r1, #8
    2efc:	1ac0      	subs	r0, r0, r3
    2efe:	4152      	adcs	r2, r2
    2f00:	d2cd      	bcs.n	2e9e <__udivsi3+0x3a>
    2f02:	09c3      	lsrs	r3, r0, #7
    2f04:	428b      	cmp	r3, r1
    2f06:	d301      	bcc.n	2f0c <__udivsi3+0xa8>
    2f08:	01cb      	lsls	r3, r1, #7
    2f0a:	1ac0      	subs	r0, r0, r3
    2f0c:	4152      	adcs	r2, r2
    2f0e:	0983      	lsrs	r3, r0, #6
    2f10:	428b      	cmp	r3, r1
    2f12:	d301      	bcc.n	2f18 <__udivsi3+0xb4>
    2f14:	018b      	lsls	r3, r1, #6
    2f16:	1ac0      	subs	r0, r0, r3
    2f18:	4152      	adcs	r2, r2
    2f1a:	0943      	lsrs	r3, r0, #5
    2f1c:	428b      	cmp	r3, r1
    2f1e:	d301      	bcc.n	2f24 <__udivsi3+0xc0>
    2f20:	014b      	lsls	r3, r1, #5
    2f22:	1ac0      	subs	r0, r0, r3
    2f24:	4152      	adcs	r2, r2
    2f26:	0903      	lsrs	r3, r0, #4
    2f28:	428b      	cmp	r3, r1
    2f2a:	d301      	bcc.n	2f30 <__udivsi3+0xcc>
    2f2c:	010b      	lsls	r3, r1, #4
    2f2e:	1ac0      	subs	r0, r0, r3
    2f30:	4152      	adcs	r2, r2
    2f32:	08c3      	lsrs	r3, r0, #3
    2f34:	428b      	cmp	r3, r1
    2f36:	d301      	bcc.n	2f3c <__udivsi3+0xd8>
    2f38:	00cb      	lsls	r3, r1, #3
    2f3a:	1ac0      	subs	r0, r0, r3
    2f3c:	4152      	adcs	r2, r2
    2f3e:	0883      	lsrs	r3, r0, #2
    2f40:	428b      	cmp	r3, r1
    2f42:	d301      	bcc.n	2f48 <__udivsi3+0xe4>
    2f44:	008b      	lsls	r3, r1, #2
    2f46:	1ac0      	subs	r0, r0, r3
    2f48:	4152      	adcs	r2, r2
    2f4a:	0843      	lsrs	r3, r0, #1
    2f4c:	428b      	cmp	r3, r1
    2f4e:	d301      	bcc.n	2f54 <__udivsi3+0xf0>
    2f50:	004b      	lsls	r3, r1, #1
    2f52:	1ac0      	subs	r0, r0, r3
    2f54:	4152      	adcs	r2, r2
    2f56:	1a41      	subs	r1, r0, r1
    2f58:	d200      	bcs.n	2f5c <__udivsi3+0xf8>
    2f5a:	4601      	mov	r1, r0
    2f5c:	4152      	adcs	r2, r2
    2f5e:	4610      	mov	r0, r2
    2f60:	4770      	bx	lr
    2f62:	e7ff      	b.n	2f64 <__udivsi3+0x100>
    2f64:	b501      	push	{r0, lr}
    2f66:	2000      	movs	r0, #0
    2f68:	f000 f806 	bl	2f78 <__aeabi_idiv0>
    2f6c:	bd02      	pop	{r1, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)

00002f70 <__aeabi_uidivmod>:
    2f70:	2900      	cmp	r1, #0
    2f72:	d0f7      	beq.n	2f64 <__udivsi3+0x100>
    2f74:	e776      	b.n	2e64 <__udivsi3>
    2f76:	4770      	bx	lr

00002f78 <__aeabi_idiv0>:
    2f78:	4770      	bx	lr
    2f7a:	46c0      	nop			; (mov r8, r8)

00002f7c <__ffssi2>:
    2f7c:	b510      	push	{r4, lr}
    2f7e:	2300      	movs	r3, #0
    2f80:	2800      	cmp	r0, #0
    2f82:	d002      	beq.n	2f8a <__ffssi2+0xe>
    2f84:	f000 f804 	bl	2f90 <__ctzsi2>
    2f88:	1c43      	adds	r3, r0, #1
    2f8a:	0018      	movs	r0, r3
    2f8c:	bd10      	pop	{r4, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)

00002f90 <__ctzsi2>:
    2f90:	4241      	negs	r1, r0
    2f92:	4008      	ands	r0, r1
    2f94:	211c      	movs	r1, #28
    2f96:	2301      	movs	r3, #1
    2f98:	041b      	lsls	r3, r3, #16
    2f9a:	4298      	cmp	r0, r3
    2f9c:	d301      	bcc.n	2fa2 <__ctzsi2+0x12>
    2f9e:	0c00      	lsrs	r0, r0, #16
    2fa0:	3910      	subs	r1, #16
    2fa2:	0a1b      	lsrs	r3, r3, #8
    2fa4:	4298      	cmp	r0, r3
    2fa6:	d301      	bcc.n	2fac <__ctzsi2+0x1c>
    2fa8:	0a00      	lsrs	r0, r0, #8
    2faa:	3908      	subs	r1, #8
    2fac:	091b      	lsrs	r3, r3, #4
    2fae:	4298      	cmp	r0, r3
    2fb0:	d301      	bcc.n	2fb6 <__ctzsi2+0x26>
    2fb2:	0900      	lsrs	r0, r0, #4
    2fb4:	3904      	subs	r1, #4
    2fb6:	a202      	add	r2, pc, #8	; (adr r2, 2fc0 <__ctzsi2+0x30>)
    2fb8:	5c10      	ldrb	r0, [r2, r0]
    2fba:	1a40      	subs	r0, r0, r1
    2fbc:	4770      	bx	lr
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	1d1d1c1b 	.word	0x1d1d1c1b
    2fc4:	1e1e1e1e 	.word	0x1e1e1e1e
    2fc8:	1f1f1f1f 	.word	0x1f1f1f1f
    2fcc:	1f1f1f1f 	.word	0x1f1f1f1f

00002fd0 <__libc_init_array>:
    2fd0:	b570      	push	{r4, r5, r6, lr}
    2fd2:	2600      	movs	r6, #0
    2fd4:	4d0c      	ldr	r5, [pc, #48]	; (3008 <__libc_init_array+0x38>)
    2fd6:	4c0d      	ldr	r4, [pc, #52]	; (300c <__libc_init_array+0x3c>)
    2fd8:	1b64      	subs	r4, r4, r5
    2fda:	10a4      	asrs	r4, r4, #2
    2fdc:	42a6      	cmp	r6, r4
    2fde:	d109      	bne.n	2ff4 <__libc_init_array+0x24>
    2fe0:	2600      	movs	r6, #0
    2fe2:	f000 f93f 	bl	3264 <_init>
    2fe6:	4d0a      	ldr	r5, [pc, #40]	; (3010 <__libc_init_array+0x40>)
    2fe8:	4c0a      	ldr	r4, [pc, #40]	; (3014 <__libc_init_array+0x44>)
    2fea:	1b64      	subs	r4, r4, r5
    2fec:	10a4      	asrs	r4, r4, #2
    2fee:	42a6      	cmp	r6, r4
    2ff0:	d105      	bne.n	2ffe <__libc_init_array+0x2e>
    2ff2:	bd70      	pop	{r4, r5, r6, pc}
    2ff4:	00b3      	lsls	r3, r6, #2
    2ff6:	58eb      	ldr	r3, [r5, r3]
    2ff8:	4798      	blx	r3
    2ffa:	3601      	adds	r6, #1
    2ffc:	e7ee      	b.n	2fdc <__libc_init_array+0xc>
    2ffe:	00b3      	lsls	r3, r6, #2
    3000:	58eb      	ldr	r3, [r5, r3]
    3002:	4798      	blx	r3
    3004:	3601      	adds	r6, #1
    3006:	e7f2      	b.n	2fee <__libc_init_array+0x1e>
    3008:	00003270 	.word	0x00003270
    300c:	00003270 	.word	0x00003270
    3010:	00003270 	.word	0x00003270
    3014:	00003274 	.word	0x00003274

00003018 <memset>:
    3018:	0003      	movs	r3, r0
    301a:	1882      	adds	r2, r0, r2
    301c:	4293      	cmp	r3, r2
    301e:	d100      	bne.n	3022 <memset+0xa>
    3020:	4770      	bx	lr
    3022:	7019      	strb	r1, [r3, #0]
    3024:	3301      	adds	r3, #1
    3026:	e7f9      	b.n	301c <memset+0x4>
    3028:	682f2e2e 	.word	0x682f2e2e
    302c:	692f6c61 	.word	0x692f6c61
    3030:	756c636e 	.word	0x756c636e
    3034:	682f6564 	.word	0x682f6564
    3038:	775f6c61 	.word	0x775f6c61
    303c:	682e7464 	.word	0x682e7464
    3040:	00000000 	.word	0x00000000
    3044:	682f2e2e 	.word	0x682f2e2e
    3048:	732f6c61 	.word	0x732f6c61
    304c:	682f6372 	.word	0x682f6372
    3050:	615f6c61 	.word	0x615f6c61
    3054:	735f6364 	.word	0x735f6364
    3058:	2e636e79 	.word	0x2e636e79
    305c:	00000063 	.word	0x00000063
    3060:	682f2e2e 	.word	0x682f2e2e
    3064:	732f6c61 	.word	0x732f6c61
    3068:	682f6372 	.word	0x682f6372
    306c:	645f6c61 	.word	0x645f6c61
    3070:	735f6361 	.word	0x735f6361
    3074:	2e636e79 	.word	0x2e636e79
    3078:	00000063 	.word	0x00000063
    307c:	682f2e2e 	.word	0x682f2e2e
    3080:	732f6c61 	.word	0x732f6c61
    3084:	682f6372 	.word	0x682f6372
    3088:	665f6c61 	.word	0x665f6c61
    308c:	6873616c 	.word	0x6873616c
    3090:	0000632e 	.word	0x0000632e
    3094:	682f2e2e 	.word	0x682f2e2e
    3098:	732f6c61 	.word	0x732f6c61
    309c:	682f6372 	.word	0x682f6372
    30a0:	695f6c61 	.word	0x695f6c61
    30a4:	00632e6f 	.word	0x00632e6f
    30a8:	682f2e2e 	.word	0x682f2e2e
    30ac:	732f6c61 	.word	0x732f6c61
    30b0:	682f6372 	.word	0x682f6372
    30b4:	705f6c61 	.word	0x705f6c61
    30b8:	632e6d77 	.word	0x632e6d77
    30bc:	00000000 	.word	0x00000000
    30c0:	682f2e2e 	.word	0x682f2e2e
    30c4:	732f6c61 	.word	0x732f6c61
    30c8:	682f6372 	.word	0x682f6372
    30cc:	735f6c61 	.word	0x735f6c61
    30d0:	6d5f6970 	.word	0x6d5f6970
    30d4:	6e79735f 	.word	0x6e79735f
    30d8:	00632e63 	.word	0x00632e63
    30dc:	682f2e2e 	.word	0x682f2e2e
    30e0:	732f6c61 	.word	0x732f6c61
    30e4:	682f6372 	.word	0x682f6372
    30e8:	745f6c61 	.word	0x745f6c61
    30ec:	72656d69 	.word	0x72656d69
    30f0:	0000632e 	.word	0x0000632e
    30f4:	682f2e2e 	.word	0x682f2e2e
    30f8:	752f6c61 	.word	0x752f6c61
    30fc:	736c6974 	.word	0x736c6974
    3100:	6372732f 	.word	0x6372732f
    3104:	6974752f 	.word	0x6974752f
    3108:	6c5f736c 	.word	0x6c5f736c
    310c:	2e747369 	.word	0x2e747369
    3110:	00000063 	.word	0x00000063

00003114 <_adcs>:
    3114:	00000200 00000000 00000000 00000000     ................
	...
    3130:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3140:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3150:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003160 <_map>:
    3160:	00000005 00000005 00000006 00000006     ................
    3170:	00000008 0000001c 00000009 00000009     ................
    3180:	0000000d 00000019 0000000f 0000001b     ................
    3190:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    31a0:	632e6369 00000000 682f2e2e 6e2f6c70     ic.c....../hpl/n
    31b0:	74636d76 682f6c72 6e5f6c70 74636d76     vmctrl/hpl_nvmct
    31c0:	632e6c72 00000000 682f2e2e 722f6c70     rl.c....../hpl/r
    31d0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....

000031e0 <_i2cms>:
	...

000031f8 <sercomspi_regs>:
    31f8:	0001000c 00020000 00000000 01ff0009     ................
    3208:	01000c00 02000000 00000000 ff000900     ................
    3218:	00000301 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    3228:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    3238:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    3248:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    3258:	775f6c70 632e7464 00000000              pl_wdt.c....

00003264 <_init>:
    3264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	bcf8      	pop	{r3, r4, r5, r6, r7}
    326a:	bc08      	pop	{r3}
    326c:	469e      	mov	lr, r3
    326e:	4770      	bx	lr

00003270 <__init_array_start>:
    3270:	000000dd 	.word	0x000000dd

00003274 <_fini>:
    3274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	bcf8      	pop	{r3, r4, r5, r6, r7}
    327a:	bc08      	pop	{r3}
    327c:	469e      	mov	lr, r3
    327e:	4770      	bx	lr

00003280 <__fini_array_start>:
    3280:	000000b5 	.word	0x000000b5
