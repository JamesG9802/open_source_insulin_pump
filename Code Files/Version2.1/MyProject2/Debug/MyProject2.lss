
MyProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003244  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  2000001c  00003260  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000170  000033b4  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b964  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005601  00000000  00000000  0005ba01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016e16  00000000  00000000  00061002  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011e8  00000000  00000000  00077e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016d0  00000000  00000000  00079000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e58f  00000000  00000000  0007a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001afc4  00000000  00000000  00098c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009049a  00000000  00000000  000b3c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d0c  00000000  00000000  001440c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 21 00 20 91 03 00 00 8f 03 00 00 8f 03 00 00     p!. ............
	...
      2c:	8f 03 00 00 00 00 00 00 00 00 00 00 8f 03 00 00     ................
      3c:	8f 03 00 00 8f 03 00 00 8f 03 00 00 8f 03 00 00     ................
      4c:	dd 22 00 00 05 1d 00 00 59 21 00 00 8f 03 00 00     ."......Y!......
      5c:	8f 03 00 00 8f 03 00 00 8f 03 00 00 8f 03 00 00     ................
      6c:	8f 03 00 00 8f 03 00 00 8f 03 00 00 8f 03 00 00     ................
      7c:	8f 03 00 00 8f 03 00 00 8f 03 00 00 f9 28 00 00     .............(..
      8c:	8f 03 00 00 8f 03 00 00 00 00 00 00 00 00 00 00     ................
      9c:	8f 03 00 00 8f 03 00 00 8f 03 00 00 8f 03 00 00     ................
      ac:	8f 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00003244 	.word	0x00003244

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00003244 	.word	0x00003244
     10c:	00003244 	.word	0x00003244
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000985 	.word	0x00000985

00000120 <button_3_cb>:
	timer_start(&TIMER_0);
}

// cb function which starts TIMER_0 when button 3 pressed
static void button_3_cb(void)
{
     120:	b510      	push	{r4, lr}
	button_3 = true;
     122:	2201      	movs	r2, #1
     124:	4b02      	ldr	r3, [pc, #8]	; (130 <button_3_cb+0x10>)
     126:	701a      	strb	r2, [r3, #0]
	timer_start(&TIMER_0);
     128:	4802      	ldr	r0, [pc, #8]	; (134 <button_3_cb+0x14>)
     12a:	4b03      	ldr	r3, [pc, #12]	; (138 <button_3_cb+0x18>)
     12c:	4798      	blx	r3
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000038 	.word	0x20000038
     134:	2000011c 	.word	0x2000011c
     138:	00001861 	.word	0x00001861

0000013c <button_1_cb>:
{
     13c:	b510      	push	{r4, lr}
	button_1 = true;
     13e:	2201      	movs	r2, #1
     140:	4b02      	ldr	r3, [pc, #8]	; (14c <button_1_cb+0x10>)
     142:	705a      	strb	r2, [r3, #1]
	timer_start(&TIMER_0);
     144:	4802      	ldr	r0, [pc, #8]	; (150 <button_1_cb+0x14>)
     146:	4b03      	ldr	r3, [pc, #12]	; (154 <button_1_cb+0x18>)
     148:	4798      	blx	r3
}
     14a:	bd10      	pop	{r4, pc}
     14c:	20000038 	.word	0x20000038
     150:	2000011c 	.word	0x2000011c
     154:	00001861 	.word	0x00001861

00000158 <button_2_cb>:
{
     158:	b510      	push	{r4, lr}
	button_2 = true;
     15a:	2201      	movs	r2, #1
     15c:	4b02      	ldr	r3, [pc, #8]	; (168 <button_2_cb+0x10>)
     15e:	709a      	strb	r2, [r3, #2]
	timer_start(&TIMER_0);
     160:	4802      	ldr	r0, [pc, #8]	; (16c <button_2_cb+0x14>)
     162:	4b03      	ldr	r3, [pc, #12]	; (170 <button_2_cb+0x18>)
     164:	4798      	blx	r3
}
     166:	bd10      	pop	{r4, pc}
     168:	20000038 	.word	0x20000038
     16c:	2000011c 	.word	0x2000011c
     170:	00001861 	.word	0x00001861

00000174 <TIMER_0_setup>:
{
     174:	b510      	push	{r4, lr}
	TIMER_0_task1.interval = 10;
     176:	4906      	ldr	r1, [pc, #24]	; (190 <TIMER_0_setup+0x1c>)
     178:	230a      	movs	r3, #10
     17a:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <TIMER_0_setup+0x20>)
     17e:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
     180:	2301      	movs	r3, #1
     182:	750b      	strb	r3, [r1, #20]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
     184:	3104      	adds	r1, #4
     186:	4804      	ldr	r0, [pc, #16]	; (198 <TIMER_0_setup+0x24>)
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <TIMER_0_setup+0x28>)
     18a:	4798      	blx	r3
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	20000038 	.word	0x20000038
     194:	000002c1 	.word	0x000002c1
     198:	2000011c 	.word	0x2000011c
     19c:	000018d9 	.word	0x000018d9

000001a0 <init_interrupts>:

// Initialise external interrupts, and tie them to callback functions.
// Interrupts are disabled and then enabled, otherwise they are triggered
// on startup.
void init_interrupts(void)
{
     1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ext_irq_disable(BUTTON1);
     1a2:	2006      	movs	r0, #6
     1a4:	4e16      	ldr	r6, [pc, #88]	; (200 <init_interrupts+0x60>)
     1a6:	47b0      	blx	r6
	ext_irq_disable(BUTTON2);
     1a8:	2005      	movs	r0, #5
     1aa:	47b0      	blx	r6
	ext_irq_disable(BUTTON3);
     1ac:	2009      	movs	r0, #9
     1ae:	47b0      	blx	r6
	ext_irq_register(BUTTON2, button_2_cb);
     1b0:	4f14      	ldr	r7, [pc, #80]	; (204 <init_interrupts+0x64>)
     1b2:	0039      	movs	r1, r7
     1b4:	2005      	movs	r0, #5
     1b6:	4d14      	ldr	r5, [pc, #80]	; (208 <init_interrupts+0x68>)
     1b8:	47a8      	blx	r5
	ext_irq_register(BUTTON1, button_1_cb);
     1ba:	4914      	ldr	r1, [pc, #80]	; (20c <init_interrupts+0x6c>)
     1bc:	2006      	movs	r0, #6
     1be:	47a8      	blx	r5
	ext_irq_register(BUTTON3, button_3_cb);
     1c0:	4913      	ldr	r1, [pc, #76]	; (210 <init_interrupts+0x70>)
     1c2:	2009      	movs	r0, #9
     1c4:	47a8      	blx	r5
	ext_irq_enable(BUTTON1);
     1c6:	2006      	movs	r0, #6
     1c8:	4c12      	ldr	r4, [pc, #72]	; (214 <init_interrupts+0x74>)
     1ca:	47a0      	blx	r4
	ext_irq_enable(BUTTON2);
     1cc:	2005      	movs	r0, #5
     1ce:	47a0      	blx	r4
	ext_irq_enable(BUTTON3);
     1d0:	2009      	movs	r0, #9
     1d2:	47a0      	blx	r4
	
	/*	CS 490 James	*/
	ext_irq_disable(APS_BUTTON1);
     1d4:	2019      	movs	r0, #25
     1d6:	47b0      	blx	r6
	ext_irq_disable(APS_BUTTON2);
     1d8:	201b      	movs	r0, #27
     1da:	47b0      	blx	r6
	ext_irq_disable(APS_BUTTON3);
     1dc:	201c      	movs	r0, #28
     1de:	47b0      	blx	r6
	ext_irq_register(APS_BUTTON2, button_2_cb);
     1e0:	0039      	movs	r1, r7
     1e2:	201b      	movs	r0, #27
     1e4:	47a8      	blx	r5
	ext_irq_register(APS_BUTTON1, button_1_cb);
     1e6:	4909      	ldr	r1, [pc, #36]	; (20c <init_interrupts+0x6c>)
     1e8:	2019      	movs	r0, #25
     1ea:	47a8      	blx	r5
	ext_irq_register(APS_BUTTON3, button_3_cb);
     1ec:	4908      	ldr	r1, [pc, #32]	; (210 <init_interrupts+0x70>)
     1ee:	201c      	movs	r0, #28
     1f0:	47a8      	blx	r5
	ext_irq_enable(APS_BUTTON1);
     1f2:	2019      	movs	r0, #25
     1f4:	47a0      	blx	r4
	ext_irq_enable(APS_BUTTON2);
     1f6:	201b      	movs	r0, #27
     1f8:	47a0      	blx	r4
	ext_irq_enable(APS_BUTTON3);
     1fa:	201c      	movs	r0, #28
     1fc:	47a0      	blx	r4
}
     1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     200:	0000118d 	.word	0x0000118d
     204:	00000159 	.word	0x00000159
     208:	0000109d 	.word	0x0000109d
     20c:	0000013d 	.word	0x0000013d
     210:	00000121 	.word	0x00000121
     214:	0000117d 	.word	0x0000117d

00000218 <set_leds>:

void set_leds(uint8_t button_count)
{
	if(button_count < 1) 
     218:	2800      	cmp	r0, #0
     21a:	d11e      	bne.n	25a <set_leds+0x42>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     21c:	23c0      	movs	r3, #192	; 0xc0
     21e:	05db      	lsls	r3, r3, #23
     220:	2280      	movs	r2, #128	; 0x80
     222:	0412      	lsls	r2, r2, #16
     224:	615a      	str	r2, [r3, #20]
     226:	2280      	movs	r2, #128	; 0x80
     228:	0112      	lsls	r2, r2, #4
     22a:	615a      	str	r2, [r3, #20]
     22c:	2280      	movs	r2, #128	; 0x80
     22e:	0352      	lsls	r2, r2, #13
     230:	615a      	str	r2, [r3, #20]
     232:	2280      	movs	r2, #128	; 0x80
     234:	0292      	lsls	r2, r2, #10
     236:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, false);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 3 )
     238:	2803      	cmp	r0, #3
     23a:	d11e      	bne.n	27a <set_leds+0x62>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     23c:	23c0      	movs	r3, #192	; 0xc0
     23e:	05db      	lsls	r3, r3, #23
     240:	2280      	movs	r2, #128	; 0x80
     242:	0412      	lsls	r2, r2, #16
     244:	619a      	str	r2, [r3, #24]
     246:	2280      	movs	r2, #128	; 0x80
     248:	0112      	lsls	r2, r2, #4
     24a:	619a      	str	r2, [r3, #24]
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	0352      	lsls	r2, r2, #13
     250:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     252:	2280      	movs	r2, #128	; 0x80
     254:	0292      	lsls	r2, r2, #10
     256:	615a      	str	r2, [r3, #20]
     258:	e01f      	b.n	29a <set_leds+0x82>
	if (button_count == 1 )
     25a:	2801      	cmp	r0, #1
     25c:	d11e      	bne.n	29c <set_leds+0x84>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     25e:	23c0      	movs	r3, #192	; 0xc0
     260:	05db      	lsls	r3, r3, #23
     262:	2280      	movs	r2, #128	; 0x80
     264:	0412      	lsls	r2, r2, #16
     266:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     268:	2280      	movs	r2, #128	; 0x80
     26a:	0112      	lsls	r2, r2, #4
     26c:	615a      	str	r2, [r3, #20]
     26e:	2280      	movs	r2, #128	; 0x80
     270:	0352      	lsls	r2, r2, #13
     272:	615a      	str	r2, [r3, #20]
     274:	2280      	movs	r2, #128	; 0x80
     276:	0292      	lsls	r2, r2, #10
     278:	615a      	str	r2, [r3, #20]
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, false);
		
	}
	if (button_count == 4 )
     27a:	2804      	cmp	r0, #4
     27c:	d10d      	bne.n	29a <set_leds+0x82>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     27e:	23c0      	movs	r3, #192	; 0xc0
     280:	05db      	lsls	r3, r3, #23
     282:	2280      	movs	r2, #128	; 0x80
     284:	0412      	lsls	r2, r2, #16
     286:	619a      	str	r2, [r3, #24]
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0112      	lsls	r2, r2, #4
     28c:	619a      	str	r2, [r3, #24]
     28e:	2280      	movs	r2, #128	; 0x80
     290:	0352      	lsls	r2, r2, #13
     292:	619a      	str	r2, [r3, #24]
     294:	2280      	movs	r2, #128	; 0x80
     296:	0292      	lsls	r2, r2, #10
     298:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(OUT7, true);
		gpio_set_pin_level(OUT1, true);
		gpio_set_pin_level(OUT6, true);
		gpio_set_pin_level(OUT4, true);
	}
}
     29a:	4770      	bx	lr
	if (button_count == 2 )
     29c:	2802      	cmp	r0, #2
     29e:	d1cb      	bne.n	238 <set_leds+0x20>
     2a0:	23c0      	movs	r3, #192	; 0xc0
     2a2:	05db      	lsls	r3, r3, #23
     2a4:	2280      	movs	r2, #128	; 0x80
     2a6:	0412      	lsls	r2, r2, #16
     2a8:	619a      	str	r2, [r3, #24]
     2aa:	2280      	movs	r2, #128	; 0x80
     2ac:	0112      	lsls	r2, r2, #4
     2ae:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2b0:	2280      	movs	r2, #128	; 0x80
     2b2:	0352      	lsls	r2, r2, #13
     2b4:	615a      	str	r2, [r3, #20]
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	0292      	lsls	r2, r2, #10
     2ba:	615a      	str	r2, [r3, #20]
     2bc:	e7ed      	b.n	29a <set_leds+0x82>
	...

000002c0 <TIMER_0_task1_cb>:
	{
     2c0:	b510      	push	{r4, lr}
	if (button_1)
     2c2:	4b21      	ldr	r3, [pc, #132]	; (348 <TIMER_0_task1_cb+0x88>)
     2c4:	785b      	ldrb	r3, [r3, #1]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d108      	bne.n	2dc <TIMER_0_task1_cb+0x1c>
	else if (button_2)
     2ca:	4b1f      	ldr	r3, [pc, #124]	; (348 <TIMER_0_task1_cb+0x88>)
     2cc:	789b      	ldrb	r3, [r3, #2]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d11a      	bne.n	308 <TIMER_0_task1_cb+0x48>
	else if  (button_3)
     2d2:	4b1d      	ldr	r3, [pc, #116]	; (348 <TIMER_0_task1_cb+0x88>)
     2d4:	781b      	ldrb	r3, [r3, #0]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d12c      	bne.n	334 <TIMER_0_task1_cb+0x74>
}
     2da:	bd10      	pop	{r4, pc}
		button_array[0]++;
     2dc:	4c1b      	ldr	r4, [pc, #108]	; (34c <TIMER_0_task1_cb+0x8c>)
     2de:	7823      	ldrb	r3, [r4, #0]
     2e0:	3301      	adds	r3, #1
     2e2:	7023      	strb	r3, [r4, #0]
		button_1 = false;
     2e4:	2200      	movs	r2, #0
     2e6:	4b18      	ldr	r3, [pc, #96]	; (348 <TIMER_0_task1_cb+0x88>)
     2e8:	705a      	strb	r2, [r3, #1]
		timer_stop(&TIMER_0);
     2ea:	4819      	ldr	r0, [pc, #100]	; (350 <TIMER_0_task1_cb+0x90>)
     2ec:	4b19      	ldr	r3, [pc, #100]	; (354 <TIMER_0_task1_cb+0x94>)
     2ee:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     2f0:	4b19      	ldr	r3, [pc, #100]	; (358 <TIMER_0_task1_cb+0x98>)
     2f2:	8819      	ldrh	r1, [r3, #0]
     2f4:	2201      	movs	r2, #1
     2f6:	4819      	ldr	r0, [pc, #100]	; (35c <TIMER_0_task1_cb+0x9c>)
     2f8:	4b19      	ldr	r3, [pc, #100]	; (360 <TIMER_0_task1_cb+0xa0>)
     2fa:	4798      	blx	r3
		store_delivery_data();
     2fc:	4b19      	ldr	r3, [pc, #100]	; (364 <TIMER_0_task1_cb+0xa4>)
     2fe:	4798      	blx	r3
		set_leds(button_array[0]);
     300:	7820      	ldrb	r0, [r4, #0]
     302:	4b19      	ldr	r3, [pc, #100]	; (368 <TIMER_0_task1_cb+0xa8>)
     304:	4798      	blx	r3
     306:	e7e8      	b.n	2da <TIMER_0_task1_cb+0x1a>
		button_array[0]--;
     308:	4c10      	ldr	r4, [pc, #64]	; (34c <TIMER_0_task1_cb+0x8c>)
     30a:	7823      	ldrb	r3, [r4, #0]
     30c:	3b01      	subs	r3, #1
     30e:	7023      	strb	r3, [r4, #0]
		button_2 = false;
     310:	2200      	movs	r2, #0
     312:	4b0d      	ldr	r3, [pc, #52]	; (348 <TIMER_0_task1_cb+0x88>)
     314:	709a      	strb	r2, [r3, #2]
		timer_stop(&TIMER_0);
     316:	480e      	ldr	r0, [pc, #56]	; (350 <TIMER_0_task1_cb+0x90>)
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <TIMER_0_task1_cb+0x94>)
     31a:	4798      	blx	r3
		flash_erase(&FLASH_0, flash_address, 1);
     31c:	4b0e      	ldr	r3, [pc, #56]	; (358 <TIMER_0_task1_cb+0x98>)
     31e:	8819      	ldrh	r1, [r3, #0]
     320:	2201      	movs	r2, #1
     322:	480e      	ldr	r0, [pc, #56]	; (35c <TIMER_0_task1_cb+0x9c>)
     324:	4b0e      	ldr	r3, [pc, #56]	; (360 <TIMER_0_task1_cb+0xa0>)
     326:	4798      	blx	r3
		store_delivery_data();
     328:	4b0e      	ldr	r3, [pc, #56]	; (364 <TIMER_0_task1_cb+0xa4>)
     32a:	4798      	blx	r3
		set_leds(button_array[0]);
     32c:	7820      	ldrb	r0, [r4, #0]
     32e:	4b0e      	ldr	r3, [pc, #56]	; (368 <TIMER_0_task1_cb+0xa8>)
     330:	4798      	blx	r3
     332:	e7d2      	b.n	2da <TIMER_0_task1_cb+0x1a>
		button_array[2]++;
     334:	4a05      	ldr	r2, [pc, #20]	; (34c <TIMER_0_task1_cb+0x8c>)
     336:	7893      	ldrb	r3, [r2, #2]
     338:	3301      	adds	r3, #1
     33a:	7093      	strb	r3, [r2, #2]
		button_3 = false;
     33c:	2200      	movs	r2, #0
     33e:	4b02      	ldr	r3, [pc, #8]	; (348 <TIMER_0_task1_cb+0x88>)
     340:	701a      	strb	r2, [r3, #0]
		main();
     342:	4b0a      	ldr	r3, [pc, #40]	; (36c <TIMER_0_task1_cb+0xac>)
     344:	4798      	blx	r3
}
     346:	e7c8      	b.n	2da <TIMER_0_task1_cb+0x1a>
     348:	20000038 	.word	0x20000038
     34c:	20000094 	.word	0x20000094
     350:	2000011c 	.word	0x2000011c
     354:	0000189d 	.word	0x0000189d
     358:	20000014 	.word	0x20000014
     35c:	200000bc 	.word	0x200000bc
     360:	0000139d 	.word	0x0000139d
     364:	00000d49 	.word	0x00000d49
     368:	00000219 	.word	0x00000219
     36c:	0000299d 	.word	0x0000299d

00000370 <leds_off>:
     370:	23c0      	movs	r3, #192	; 0xc0
     372:	05db      	lsls	r3, r3, #23
     374:	2280      	movs	r2, #128	; 0x80
     376:	0112      	lsls	r2, r2, #4
     378:	615a      	str	r2, [r3, #20]
     37a:	2280      	movs	r2, #128	; 0x80
     37c:	0352      	lsls	r2, r2, #13
     37e:	615a      	str	r2, [r3, #20]
     380:	2280      	movs	r2, #128	; 0x80
     382:	0412      	lsls	r2, r2, #16
     384:	615a      	str	r2, [r3, #20]
     386:	2280      	movs	r2, #128	; 0x80
     388:	0292      	lsls	r2, r2, #10
     38a:	615a      	str	r2, [r3, #20]
{
	gpio_set_pin_level(OUT1, false);
	gpio_set_pin_level(OUT6, false);
	gpio_set_pin_level(OUT7, false);
	gpio_set_pin_level(OUT4, false);
}
     38c:	4770      	bx	lr

0000038e <Dummy_Handler>:
     38e:	e7fe      	b.n	38e <Dummy_Handler>

00000390 <Reset_Handler>:
     390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     392:	4a2a      	ldr	r2, [pc, #168]	; (43c <Reset_Handler+0xac>)
     394:	4b2a      	ldr	r3, [pc, #168]	; (440 <Reset_Handler+0xb0>)
     396:	429a      	cmp	r2, r3
     398:	d011      	beq.n	3be <Reset_Handler+0x2e>
     39a:	001a      	movs	r2, r3
     39c:	4b29      	ldr	r3, [pc, #164]	; (444 <Reset_Handler+0xb4>)
     39e:	429a      	cmp	r2, r3
     3a0:	d20d      	bcs.n	3be <Reset_Handler+0x2e>
     3a2:	4a29      	ldr	r2, [pc, #164]	; (448 <Reset_Handler+0xb8>)
     3a4:	3303      	adds	r3, #3
     3a6:	1a9b      	subs	r3, r3, r2
     3a8:	089b      	lsrs	r3, r3, #2
     3aa:	3301      	adds	r3, #1
     3ac:	009b      	lsls	r3, r3, #2
     3ae:	2200      	movs	r2, #0
     3b0:	4823      	ldr	r0, [pc, #140]	; (440 <Reset_Handler+0xb0>)
     3b2:	4922      	ldr	r1, [pc, #136]	; (43c <Reset_Handler+0xac>)
     3b4:	588c      	ldr	r4, [r1, r2]
     3b6:	5084      	str	r4, [r0, r2]
     3b8:	3204      	adds	r2, #4
     3ba:	429a      	cmp	r2, r3
     3bc:	d1fa      	bne.n	3b4 <Reset_Handler+0x24>
     3be:	4a23      	ldr	r2, [pc, #140]	; (44c <Reset_Handler+0xbc>)
     3c0:	4b23      	ldr	r3, [pc, #140]	; (450 <Reset_Handler+0xc0>)
     3c2:	429a      	cmp	r2, r3
     3c4:	d20a      	bcs.n	3dc <Reset_Handler+0x4c>
     3c6:	43d3      	mvns	r3, r2
     3c8:	4921      	ldr	r1, [pc, #132]	; (450 <Reset_Handler+0xc0>)
     3ca:	185b      	adds	r3, r3, r1
     3cc:	2103      	movs	r1, #3
     3ce:	438b      	bics	r3, r1
     3d0:	3304      	adds	r3, #4
     3d2:	189b      	adds	r3, r3, r2
     3d4:	2100      	movs	r1, #0
     3d6:	c202      	stmia	r2!, {r1}
     3d8:	4293      	cmp	r3, r2
     3da:	d1fc      	bne.n	3d6 <Reset_Handler+0x46>
     3dc:	4a1d      	ldr	r2, [pc, #116]	; (454 <Reset_Handler+0xc4>)
     3de:	21ff      	movs	r1, #255	; 0xff
     3e0:	4b1d      	ldr	r3, [pc, #116]	; (458 <Reset_Handler+0xc8>)
     3e2:	438b      	bics	r3, r1
     3e4:	6093      	str	r3, [r2, #8]
     3e6:	39fd      	subs	r1, #253	; 0xfd
     3e8:	2390      	movs	r3, #144	; 0x90
     3ea:	005b      	lsls	r3, r3, #1
     3ec:	4a1b      	ldr	r2, [pc, #108]	; (45c <Reset_Handler+0xcc>)
     3ee:	50d1      	str	r1, [r2, r3]
     3f0:	4a1b      	ldr	r2, [pc, #108]	; (460 <Reset_Handler+0xd0>)
     3f2:	78d3      	ldrb	r3, [r2, #3]
     3f4:	2503      	movs	r5, #3
     3f6:	43ab      	bics	r3, r5
     3f8:	2402      	movs	r4, #2
     3fa:	4323      	orrs	r3, r4
     3fc:	70d3      	strb	r3, [r2, #3]
     3fe:	78d3      	ldrb	r3, [r2, #3]
     400:	270c      	movs	r7, #12
     402:	43bb      	bics	r3, r7
     404:	2608      	movs	r6, #8
     406:	4333      	orrs	r3, r6
     408:	70d3      	strb	r3, [r2, #3]
     40a:	4b16      	ldr	r3, [pc, #88]	; (464 <Reset_Handler+0xd4>)
     40c:	7b98      	ldrb	r0, [r3, #14]
     40e:	2230      	movs	r2, #48	; 0x30
     410:	4390      	bics	r0, r2
     412:	2220      	movs	r2, #32
     414:	4310      	orrs	r0, r2
     416:	7398      	strb	r0, [r3, #14]
     418:	7b99      	ldrb	r1, [r3, #14]
     41a:	43b9      	bics	r1, r7
     41c:	4331      	orrs	r1, r6
     41e:	7399      	strb	r1, [r3, #14]
     420:	7b9a      	ldrb	r2, [r3, #14]
     422:	43aa      	bics	r2, r5
     424:	4322      	orrs	r2, r4
     426:	739a      	strb	r2, [r3, #14]
     428:	4a0f      	ldr	r2, [pc, #60]	; (468 <Reset_Handler+0xd8>)
     42a:	6853      	ldr	r3, [r2, #4]
     42c:	2180      	movs	r1, #128	; 0x80
     42e:	430b      	orrs	r3, r1
     430:	6053      	str	r3, [r2, #4]
     432:	4b0e      	ldr	r3, [pc, #56]	; (46c <Reset_Handler+0xdc>)
     434:	4798      	blx	r3
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <Reset_Handler+0xe0>)
     438:	4798      	blx	r3
     43a:	e7fe      	b.n	43a <Reset_Handler+0xaa>
     43c:	00003244 	.word	0x00003244
     440:	20000000 	.word	0x20000000
     444:	2000001c 	.word	0x2000001c
     448:	20000004 	.word	0x20000004
     44c:	2000001c 	.word	0x2000001c
     450:	20000170 	.word	0x20000170
     454:	e000ed00 	.word	0xe000ed00
     458:	00000000 	.word	0x00000000
     45c:	41007000 	.word	0x41007000
     460:	41005000 	.word	0x41005000
     464:	41004800 	.word	0x41004800
     468:	41004000 	.word	0x41004000
     46c:	00002f91 	.word	0x00002f91
     470:	0000299d 	.word	0x0000299d

00000474 <ADC_0_PORT_init>:
struct dac_sync_descriptor DAC_0;

struct wdt_descriptor WDT_0;

void ADC_0_PORT_init(void)
{
     474:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     476:	2204      	movs	r2, #4
     478:	23c0      	movs	r3, #192	; 0xc0
     47a:	05db      	lsls	r3, r3, #23
     47c:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47e:	490a      	ldr	r1, [pc, #40]	; (4a8 <ADC_0_PORT_init+0x34>)
     480:	4b0a      	ldr	r3, [pc, #40]	; (4ac <ADC_0_PORT_init+0x38>)
     482:	628b      	str	r3, [r1, #40]	; 0x28
     484:	23c0      	movs	r3, #192	; 0xc0
     486:	061b      	lsls	r3, r3, #24
     488:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     48a:	2342      	movs	r3, #66	; 0x42
     48c:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     48e:	2001      	movs	r0, #1
     490:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     492:	4302      	orrs	r2, r0
     494:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     496:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     498:	2231      	movs	r2, #49	; 0x31
     49a:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     49c:	240f      	movs	r4, #15
     49e:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     4a0:	4303      	orrs	r3, r0
     4a2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a4:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(ADC_BATT_TEST, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(ADC_BATT_TEST, PINMUX_PA02B_ADC_AIN0);
}
     4a6:	bd10      	pop	{r4, pc}
     4a8:	41004400 	.word	0x41004400
     4ac:	40000004 	.word	0x40000004

000004b0 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     4b0:	4a04      	ldr	r2, [pc, #16]	; (4c4 <ADC_0_CLOCK_init+0x14>)
     4b2:	6a11      	ldr	r1, [r2, #32]
     4b4:	2380      	movs	r3, #128	; 0x80
     4b6:	025b      	lsls	r3, r3, #9
     4b8:	430b      	orrs	r3, r1
     4ba:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     4bc:	4a02      	ldr	r2, [pc, #8]	; (4c8 <ADC_0_CLOCK_init+0x18>)
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <ADC_0_CLOCK_init+0x1c>)
     4c0:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     4c2:	4770      	bx	lr
     4c4:	40000400 	.word	0x40000400
     4c8:	0000401e 	.word	0x0000401e
     4cc:	40000c00 	.word	0x40000c00

000004d0 <ADC_0_init>:

void ADC_0_init(void)
{
     4d0:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     4d2:	4b05      	ldr	r3, [pc, #20]	; (4e8 <ADC_0_init+0x18>)
     4d4:	4798      	blx	r3
	ADC_0_PORT_init();
     4d6:	4b05      	ldr	r3, [pc, #20]	; (4ec <ADC_0_init+0x1c>)
     4d8:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     4da:	2200      	movs	r2, #0
     4dc:	4904      	ldr	r1, [pc, #16]	; (4f0 <ADC_0_init+0x20>)
     4de:	4805      	ldr	r0, [pc, #20]	; (4f4 <ADC_0_init+0x24>)
     4e0:	4b05      	ldr	r3, [pc, #20]	; (4f8 <ADC_0_init+0x28>)
     4e2:	4798      	blx	r3
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	000004b1 	.word	0x000004b1
     4ec:	00000475 	.word	0x00000475
     4f0:	42004000 	.word	0x42004000
     4f4:	200000f0 	.word	0x200000f0
     4f8:	00000f39 	.word	0x00000f39

000004fc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	46d6      	mov	lr, sl
     500:	464f      	mov	r7, r9
     502:	4646      	mov	r6, r8
     504:	b5c0      	push	{r6, r7, lr}
     506:	4a4b      	ldr	r2, [pc, #300]	; (634 <EXTERNAL_IRQ_0_init+0x138>)
     508:	4b4b      	ldr	r3, [pc, #300]	; (638 <EXTERNAL_IRQ_0_init+0x13c>)
     50a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     50c:	26c0      	movs	r6, #192	; 0xc0
     50e:	05f6      	lsls	r6, r6, #23
     510:	2320      	movs	r3, #32
     512:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     514:	4b49      	ldr	r3, [pc, #292]	; (63c <EXTERNAL_IRQ_0_init+0x140>)
     516:	4a4a      	ldr	r2, [pc, #296]	; (640 <EXTERNAL_IRQ_0_init+0x144>)
     518:	629a      	str	r2, [r3, #40]	; 0x28
     51a:	4a4a      	ldr	r2, [pc, #296]	; (644 <EXTERNAL_IRQ_0_init+0x148>)
     51c:	4690      	mov	r8, r2
     51e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     520:	2445      	movs	r4, #69	; 0x45
     522:	5d19      	ldrb	r1, [r3, r4]
     524:	2204      	movs	r2, #4
     526:	4391      	bics	r1, r2
     528:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     52c:	2501      	movs	r5, #1
     52e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     530:	2001      	movs	r0, #1
     532:	4301      	orrs	r1, r0
     534:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     538:	2732      	movs	r7, #50	; 0x32
     53a:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53c:	3c36      	subs	r4, #54	; 0x36
     53e:	46a1      	mov	r9, r4
     540:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     542:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     544:	2140      	movs	r1, #64	; 0x40
     546:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     548:	493f      	ldr	r1, [pc, #252]	; (648 <EXTERNAL_IRQ_0_init+0x14c>)
     54a:	6299      	str	r1, [r3, #40]	; 0x28
     54c:	4641      	mov	r1, r8
     54e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     550:	3714      	adds	r7, #20
     552:	5dd9      	ldrb	r1, [r3, r7]
     554:	4391      	bics	r1, r2
     556:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     558:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55c:	4301      	orrs	r1, r0
     55e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     560:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	3f13      	subs	r7, #19
     564:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     566:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     568:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     56a:	2180      	movs	r1, #128	; 0x80
     56c:	0549      	lsls	r1, r1, #21
     56e:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     570:	4f36      	ldr	r7, [pc, #216]	; (64c <EXTERNAL_IRQ_0_init+0x150>)
     572:	629f      	str	r7, [r3, #40]	; 0x28
     574:	4936      	ldr	r1, [pc, #216]	; (650 <EXTERNAL_IRQ_0_init+0x154>)
     576:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     578:	215c      	movs	r1, #92	; 0x5c
     57a:	468c      	mov	ip, r1
     57c:	5c59      	ldrb	r1, [r3, r1]
     57e:	4391      	bics	r1, r2
     580:	4664      	mov	r4, ip
     582:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     584:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     586:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     588:	4301      	orrs	r1, r0
     58a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     58c:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58e:	213e      	movs	r1, #62	; 0x3e
     590:	468c      	mov	ip, r1
     592:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     594:	464c      	mov	r4, r9
     596:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     598:	4664      	mov	r4, ip
     59a:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     59c:	2180      	movs	r1, #128	; 0x80
     59e:	0089      	lsls	r1, r1, #2
     5a0:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a2:	492c      	ldr	r1, [pc, #176]	; (654 <EXTERNAL_IRQ_0_init+0x158>)
     5a4:	6299      	str	r1, [r3, #40]	; 0x28
     5a6:	4641      	mov	r1, r8
     5a8:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5aa:	2149      	movs	r1, #73	; 0x49
     5ac:	468c      	mov	ip, r1
     5ae:	5c59      	ldrb	r1, [r3, r1]
     5b0:	4391      	bics	r1, r2
     5b2:	4664      	mov	r4, ip
     5b4:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b6:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	4301      	orrs	r1, r0
     5bc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c0:	2134      	movs	r1, #52	; 0x34
     5c2:	468c      	mov	ip, r1
     5c4:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c6:	464c      	mov	r4, r9
     5c8:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	4664      	mov	r4, ip
     5cc:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ce:	2180      	movs	r1, #128	; 0x80
     5d0:	0489      	lsls	r1, r1, #18
     5d2:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d4:	629f      	str	r7, [r3, #40]	; 0x28
     5d6:	4920      	ldr	r1, [pc, #128]	; (658 <EXTERNAL_IRQ_0_init+0x15c>)
     5d8:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5da:	2159      	movs	r1, #89	; 0x59
     5dc:	468c      	mov	ip, r1
     5de:	5c59      	ldrb	r1, [r3, r1]
     5e0:	4391      	bics	r1, r2
     5e2:	4664      	mov	r4, ip
     5e4:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e6:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ea:	4301      	orrs	r1, r0
     5ec:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ee:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f0:	213c      	movs	r1, #60	; 0x3c
     5f2:	468c      	mov	ip, r1
     5f4:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f6:	464c      	mov	r4, r9
     5f8:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fa:	4664      	mov	r4, ip
     5fc:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fe:	2180      	movs	r1, #128	; 0x80
     600:	0509      	lsls	r1, r1, #20
     602:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     604:	629f      	str	r7, [r3, #40]	; 0x28
     606:	4915      	ldr	r1, [pc, #84]	; (65c <EXTERNAL_IRQ_0_init+0x160>)
     608:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     60a:	215b      	movs	r1, #91	; 0x5b
     60c:	5c5e      	ldrb	r6, [r3, r1]
     60e:	4396      	bics	r6, r2
     610:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     612:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     614:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	4302      	orrs	r2, r0
     618:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61c:	391e      	subs	r1, #30
     61e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     620:	464c      	mov	r4, r9
     622:	4014      	ands	r4, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     624:	545c      	strb	r4, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(APS_BUTTON2, PINMUX_PA27A_EIC_EXTINT15);

	ext_irq_init();
     626:	4b0e      	ldr	r3, [pc, #56]	; (660 <EXTERNAL_IRQ_0_init+0x164>)
     628:	4798      	blx	r3
}
     62a:	bc1c      	pop	{r2, r3, r4}
     62c:	4690      	mov	r8, r2
     62e:	4699      	mov	r9, r3
     630:	46a2      	mov	sl, r4
     632:	bdf0      	pop	{r4, r5, r6, r7, pc}
     634:	00004005 	.word	0x00004005
     638:	40000c00 	.word	0x40000c00
     63c:	41004400 	.word	0x41004400
     640:	40020020 	.word	0x40020020
     644:	c0020000 	.word	0xc0020000
     648:	40020040 	.word	0x40020040
     64c:	40020000 	.word	0x40020000
     650:	c0021000 	.word	0xc0021000
     654:	40020200 	.word	0x40020200
     658:	c0020200 	.word	0xc0020200
     65c:	c0020800 	.word	0xc0020800
     660:	00001071 	.word	0x00001071

00000664 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     664:	4a02      	ldr	r2, [pc, #8]	; (670 <FLASH_0_CLOCK_init+0xc>)
     666:	69d3      	ldr	r3, [r2, #28]
     668:	2104      	movs	r1, #4
     66a:	430b      	orrs	r3, r1
     66c:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     66e:	4770      	bx	lr
     670:	40000400 	.word	0x40000400

00000674 <FLASH_0_init>:

void FLASH_0_init(void)
{
     674:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     676:	4b03      	ldr	r3, [pc, #12]	; (684 <FLASH_0_init+0x10>)
     678:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     67a:	4903      	ldr	r1, [pc, #12]	; (688 <FLASH_0_init+0x14>)
     67c:	4803      	ldr	r0, [pc, #12]	; (68c <FLASH_0_init+0x18>)
     67e:	4b04      	ldr	r3, [pc, #16]	; (690 <FLASH_0_init+0x1c>)
     680:	4798      	blx	r3
}
     682:	bd10      	pop	{r4, pc}
     684:	00000665 	.word	0x00000665
     688:	41004000 	.word	0x41004000
     68c:	200000bc 	.word	0x200000bc
     690:	000011ed 	.word	0x000011ed

00000694 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
     696:	46c6      	mov	lr, r8
     698:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     69a:	22c0      	movs	r2, #192	; 0xc0
     69c:	05d2      	lsls	r2, r2, #23
     69e:	2380      	movs	r3, #128	; 0x80
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a4:	4b23      	ldr	r3, [pc, #140]	; (734 <SPI_0_PORT_init+0xa0>)
     6a6:	4924      	ldr	r1, [pc, #144]	; (738 <SPI_0_PORT_init+0xa4>)
     6a8:	6299      	str	r1, [r3, #40]	; 0x28
     6aa:	4924      	ldr	r1, [pc, #144]	; (73c <SPI_0_PORT_init+0xa8>)
     6ac:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6ae:	2048      	movs	r0, #72	; 0x48
     6b0:	5c19      	ldrb	r1, [r3, r0]
     6b2:	2404      	movs	r4, #4
     6b4:	43a1      	bics	r1, r4
     6b6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	2501      	movs	r5, #1
     6bc:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	2401      	movs	r4, #1
     6c0:	4321      	orrs	r1, r4
     6c2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	2134      	movs	r1, #52	; 0x34
     6c8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ca:	260f      	movs	r6, #15
     6cc:	46b4      	mov	ip, r6
     6ce:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     6d0:	2702      	movs	r7, #2
     6d2:	4338      	orrs	r0, r7
     6d4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d6:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6d8:	2180      	movs	r1, #128	; 0x80
     6da:	00c9      	lsls	r1, r1, #3
     6dc:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6de:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e0:	4917      	ldr	r1, [pc, #92]	; (740 <SPI_0_PORT_init+0xac>)
     6e2:	6299      	str	r1, [r3, #40]	; 0x28
     6e4:	26c0      	movs	r6, #192	; 0xc0
     6e6:	0636      	lsls	r6, r6, #24
     6e8:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ea:	214a      	movs	r1, #74	; 0x4a
     6ec:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ee:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f0:	4320      	orrs	r0, r4
     6f2:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f4:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6f6:	3915      	subs	r1, #21
     6f8:	4688      	mov	r8, r1
     6fa:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6fc:	4660      	mov	r0, ip
     6fe:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     700:	4339      	orrs	r1, r7
     702:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     704:	4640      	mov	r0, r8
     706:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     708:	2180      	movs	r1, #128	; 0x80
     70a:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     70c:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70e:	4a0d      	ldr	r2, [pc, #52]	; (744 <SPI_0_PORT_init+0xb0>)
     710:	629a      	str	r2, [r3, #40]	; 0x28
     712:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     714:	3939      	subs	r1, #57	; 0x39
     716:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     718:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	4322      	orrs	r2, r4
     71c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     720:	3914      	subs	r1, #20
     722:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     724:	3826      	subs	r0, #38	; 0x26
     726:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     728:	3021      	adds	r0, #33	; 0x21
     72a:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72c:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK, PINMUX_PA07D_SERCOM0_PAD3);
}
     72e:	bc04      	pop	{r2}
     730:	4690      	mov	r8, r2
     732:	bdf0      	pop	{r4, r5, r6, r7, pc}
     734:	41004400 	.word	0x41004400
     738:	40020100 	.word	0x40020100
     73c:	c0020000 	.word	0xc0020000
     740:	40000400 	.word	0x40000400
     744:	40000080 	.word	0x40000080

00000748 <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     748:	4a04      	ldr	r2, [pc, #16]	; (75c <SPI_0_CLOCK_init+0x14>)
     74a:	6a13      	ldr	r3, [r2, #32]
     74c:	2104      	movs	r1, #4
     74e:	430b      	orrs	r3, r1
     750:	6213      	str	r3, [r2, #32]
     752:	4a03      	ldr	r2, [pc, #12]	; (760 <SPI_0_CLOCK_init+0x18>)
     754:	4b03      	ldr	r3, [pc, #12]	; (764 <SPI_0_CLOCK_init+0x1c>)
     756:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     758:	4770      	bx	lr
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	40000400 	.word	0x40000400
     760:	00004014 	.word	0x00004014
     764:	40000c00 	.word	0x40000c00

00000768 <SPI_0_init>:

void SPI_0_init(void)
{
     768:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     76a:	4b04      	ldr	r3, [pc, #16]	; (77c <SPI_0_init+0x14>)
     76c:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     76e:	4904      	ldr	r1, [pc, #16]	; (780 <SPI_0_init+0x18>)
     770:	4804      	ldr	r0, [pc, #16]	; (784 <SPI_0_init+0x1c>)
     772:	4b05      	ldr	r3, [pc, #20]	; (788 <SPI_0_init+0x20>)
     774:	4798      	blx	r3
	SPI_0_PORT_init();
     776:	4b05      	ldr	r3, [pc, #20]	; (78c <SPI_0_init+0x24>)
     778:	4798      	blx	r3
}
     77a:	bd10      	pop	{r4, pc}
     77c:	00000749 	.word	0x00000749
     780:	42000800 	.word	0x42000800
     784:	20000104 	.word	0x20000104
     788:	0000155d 	.word	0x0000155d
     78c:	00000695 	.word	0x00000695

00000790 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     790:	b5f0      	push	{r4, r5, r6, r7, lr}
     792:	46c6      	mov	lr, r8
     794:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     796:	22c0      	movs	r2, #192	; 0xc0
     798:	05d2      	lsls	r2, r2, #23
     79a:	2380      	movs	r3, #128	; 0x80
     79c:	03db      	lsls	r3, r3, #15
     79e:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a0:	4b24      	ldr	r3, [pc, #144]	; (834 <SPI_1_PORT_init+0xa4>)
     7a2:	4925      	ldr	r1, [pc, #148]	; (838 <SPI_1_PORT_init+0xa8>)
     7a4:	6299      	str	r1, [r3, #40]	; 0x28
     7a6:	4925      	ldr	r1, [pc, #148]	; (83c <SPI_1_PORT_init+0xac>)
     7a8:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7aa:	2056      	movs	r0, #86	; 0x56
     7ac:	5c19      	ldrb	r1, [r3, r0]
     7ae:	2404      	movs	r4, #4
     7b0:	43a1      	bics	r1, r4
     7b2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b6:	2501      	movs	r5, #1
     7b8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ba:	2401      	movs	r4, #1
     7bc:	4321      	orrs	r1, r4
     7be:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c2:	213b      	movs	r1, #59	; 0x3b
     7c4:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7c6:	260f      	movs	r6, #15
     7c8:	46b4      	mov	ip, r6
     7ca:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     7cc:	2702      	movs	r7, #2
     7ce:	4338      	orrs	r0, r7
     7d0:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d2:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7d4:	2180      	movs	r1, #128	; 0x80
     7d6:	0449      	lsls	r1, r1, #17
     7d8:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7dc:	2680      	movs	r6, #128	; 0x80
     7de:	05f6      	lsls	r6, r6, #23
     7e0:	629e      	str	r6, [r3, #40]	; 0x28
     7e2:	4917      	ldr	r1, [pc, #92]	; (840 <SPI_1_PORT_init+0xb0>)
     7e4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e6:	2158      	movs	r1, #88	; 0x58
     7e8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ea:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ec:	4320      	orrs	r0, r4
     7ee:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f0:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7f2:	391c      	subs	r1, #28
     7f4:	4688      	mov	r8, r1
     7f6:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f8:	4660      	mov	r0, ip
     7fa:	4381      	bics	r1, r0
	tmp |= PORT_PMUX_PMUXE(data);
     7fc:	4339      	orrs	r1, r7
     7fe:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     800:	4640      	mov	r0, r8
     802:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     804:	2180      	movs	r1, #128	; 0x80
     806:	0309      	lsls	r1, r1, #12
     808:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     80a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     80c:	629e      	str	r6, [r3, #40]	; 0x28
     80e:	4a0d      	ldr	r2, [pc, #52]	; (844 <SPI_1_PORT_init+0xb4>)
     810:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     812:	2153      	movs	r1, #83	; 0x53
     814:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     816:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     818:	4322      	orrs	r2, r4
     81a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     81c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81e:	391a      	subs	r1, #26
     820:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     822:	382d      	subs	r0, #45	; 0x2d
     824:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     826:	3021      	adds	r0, #33	; 0x21
     828:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     82a:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SCK_EXT, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SCK_EXT, PINMUX_PA19D_SERCOM3_PAD3);
}
     82c:	bc04      	pop	{r2}
     82e:	4690      	mov	r8, r2
     830:	bdf0      	pop	{r4, r5, r6, r7, pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	41004400 	.word	0x41004400
     838:	40020000 	.word	0x40020000
     83c:	c0020040 	.word	0xc0020040
     840:	c0000100 	.word	0xc0000100
     844:	c0000008 	.word	0xc0000008

00000848 <SPI_1_CLOCK_init>:
     848:	4a04      	ldr	r2, [pc, #16]	; (85c <SPI_1_CLOCK_init+0x14>)
     84a:	6a13      	ldr	r3, [r2, #32]
     84c:	2120      	movs	r1, #32
     84e:	430b      	orrs	r3, r1
     850:	6213      	str	r3, [r2, #32]
     852:	4a03      	ldr	r2, [pc, #12]	; (860 <SPI_1_CLOCK_init+0x18>)
     854:	4b03      	ldr	r3, [pc, #12]	; (864 <SPI_1_CLOCK_init+0x1c>)
     856:	805a      	strh	r2, [r3, #2]

void SPI_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     858:	4770      	bx	lr
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	40000400 	.word	0x40000400
     860:	00004017 	.word	0x00004017
     864:	40000c00 	.word	0x40000c00

00000868 <SPI_1_init>:

void SPI_1_init(void)
{
     868:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
     86a:	4b04      	ldr	r3, [pc, #16]	; (87c <SPI_1_init+0x14>)
     86c:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM3);
     86e:	4904      	ldr	r1, [pc, #16]	; (880 <SPI_1_init+0x18>)
     870:	4804      	ldr	r0, [pc, #16]	; (884 <SPI_1_init+0x1c>)
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <SPI_1_init+0x20>)
     874:	4798      	blx	r3
	SPI_1_PORT_init();
     876:	4b05      	ldr	r3, [pc, #20]	; (88c <SPI_1_init+0x24>)
     878:	4798      	blx	r3
}
     87a:	bd10      	pop	{r4, pc}
     87c:	00000849 	.word	0x00000849
     880:	42001400 	.word	0x42001400
     884:	200000d8 	.word	0x200000d8
     888:	0000155d 	.word	0x0000155d
     88c:	00000791 	.word	0x00000791

00000890 <delay_driver_init>:

void delay_driver_init(void)
{
     890:	b510      	push	{r4, lr}
	delay_init(SysTick);
     892:	4802      	ldr	r0, [pc, #8]	; (89c <delay_driver_init+0xc>)
     894:	4b02      	ldr	r3, [pc, #8]	; (8a0 <delay_driver_init+0x10>)
     896:	4798      	blx	r3
}
     898:	bd10      	pop	{r4, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	e000e010 	.word	0xe000e010
     8a0:	00000fc9 	.word	0x00000fc9

000008a4 <PWM_0_CLOCK_init>:
     8a4:	4a04      	ldr	r2, [pc, #16]	; (8b8 <PWM_0_CLOCK_init+0x14>)
     8a6:	6a11      	ldr	r1, [r2, #32]
     8a8:	2380      	movs	r3, #128	; 0x80
     8aa:	011b      	lsls	r3, r3, #4
     8ac:	430b      	orrs	r3, r1
     8ae:	6213      	str	r3, [r2, #32]
     8b0:	4a02      	ldr	r2, [pc, #8]	; (8bc <PWM_0_CLOCK_init+0x18>)
     8b2:	4b03      	ldr	r3, [pc, #12]	; (8c0 <PWM_0_CLOCK_init+0x1c>)
     8b4:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     8b6:	4770      	bx	lr
     8b8:	40000400 	.word	0x40000400
     8bc:	0000401b 	.word	0x0000401b
     8c0:	40000c00 	.word	0x40000c00

000008c4 <PWM_0_init>:

void PWM_0_init(void)
{
     8c4:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     8c6:	4b05      	ldr	r3, [pc, #20]	; (8dc <PWM_0_init+0x18>)
     8c8:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     8ca:	4b05      	ldr	r3, [pc, #20]	; (8e0 <PWM_0_init+0x1c>)
     8cc:	4798      	blx	r3
     8ce:	0002      	movs	r2, r0
     8d0:	4904      	ldr	r1, [pc, #16]	; (8e4 <PWM_0_init+0x20>)
     8d2:	4805      	ldr	r0, [pc, #20]	; (8e8 <PWM_0_init+0x24>)
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <PWM_0_init+0x28>)
     8d6:	4798      	blx	r3
}
     8d8:	bd10      	pop	{r4, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	000008a5 	.word	0x000008a5
     8e0:	000028f5 	.word	0x000028f5
     8e4:	42002c00 	.word	0x42002c00
     8e8:	200000a0 	.word	0x200000a0
     8ec:	000014f5 	.word	0x000014f5

000008f0 <DAC_0_CLOCK_init>:
     8f0:	4a04      	ldr	r2, [pc, #16]	; (904 <DAC_0_CLOCK_init+0x14>)
     8f2:	6a11      	ldr	r1, [r2, #32]
     8f4:	2380      	movs	r3, #128	; 0x80
     8f6:	02db      	lsls	r3, r3, #11
     8f8:	430b      	orrs	r3, r1
     8fa:	6213      	str	r3, [r2, #32]
     8fc:	4a02      	ldr	r2, [pc, #8]	; (908 <DAC_0_CLOCK_init+0x18>)
     8fe:	4b03      	ldr	r3, [pc, #12]	; (90c <DAC_0_CLOCK_init+0x1c>)
     900:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     902:	4770      	bx	lr
     904:	40000400 	.word	0x40000400
     908:	00004021 	.word	0x00004021
     90c:	40000c00 	.word	0x40000c00

00000910 <DAC_0_init>:

void DAC_0_init(void)
{
     910:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     912:	4b03      	ldr	r3, [pc, #12]	; (920 <DAC_0_init+0x10>)
     914:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     916:	4903      	ldr	r1, [pc, #12]	; (924 <DAC_0_init+0x14>)
     918:	4803      	ldr	r0, [pc, #12]	; (928 <DAC_0_init+0x18>)
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <DAC_0_init+0x1c>)
     91c:	4798      	blx	r3
	DAC_0_PORT_init();
}
     91e:	bd10      	pop	{r4, pc}
     920:	000008f1 	.word	0x000008f1
     924:	42004800 	.word	0x42004800
     928:	200000f8 	.word	0x200000f8
     92c:	00000f89 	.word	0x00000f89

00000930 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     930:	4a04      	ldr	r2, [pc, #16]	; (944 <WDT_0_CLOCK_init+0x14>)
     932:	6993      	ldr	r3, [r2, #24]
     934:	2110      	movs	r1, #16
     936:	430b      	orrs	r3, r1
     938:	6193      	str	r3, [r2, #24]
     93a:	4a03      	ldr	r2, [pc, #12]	; (948 <WDT_0_CLOCK_init+0x18>)
     93c:	4b03      	ldr	r3, [pc, #12]	; (94c <WDT_0_CLOCK_init+0x1c>)
     93e:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     940:	4770      	bx	lr
     942:	46c0      	nop			; (mov r8, r8)
     944:	40000400 	.word	0x40000400
     948:	00004003 	.word	0x00004003
     94c:	40000c00 	.word	0x40000c00

00000950 <WDT_0_init>:

void WDT_0_init(void)
{
     950:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     952:	4b06      	ldr	r3, [pc, #24]	; (96c <WDT_0_init+0x1c>)
     954:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     956:	2248      	movs	r2, #72	; 0x48
     958:	4905      	ldr	r1, [pc, #20]	; (970 <WDT_0_init+0x20>)
     95a:	2001      	movs	r0, #1
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <WDT_0_init+0x24>)
     95e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     960:	4805      	ldr	r0, [pc, #20]	; (978 <WDT_0_init+0x28>)
     962:	4b06      	ldr	r3, [pc, #24]	; (97c <WDT_0_init+0x2c>)
     964:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     966:	4b06      	ldr	r3, [pc, #24]	; (980 <WDT_0_init+0x30>)
     968:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     96a:	bd10      	pop	{r4, pc}
     96c:	00000931 	.word	0x00000931
     970:	00002fe8 	.word	0x00002fe8
     974:	00001985 	.word	0x00001985
     978:	200000f4 	.word	0x200000f4
     97c:	40001000 	.word	0x40001000
     980:	00002931 	.word	0x00002931

00000984 <system_init>:

void system_init(void)
{
     984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     986:	46de      	mov	lr, fp
     988:	4657      	mov	r7, sl
     98a:	464e      	mov	r6, r9
     98c:	4645      	mov	r5, r8
     98e:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     990:	4bba      	ldr	r3, [pc, #744]	; (c7c <system_init+0x2f8>)
     992:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     994:	22c0      	movs	r2, #192	; 0xc0
     996:	05d2      	lsls	r2, r2, #23
     998:	2101      	movs	r1, #1
     99a:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     99c:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     99e:	4bb8      	ldr	r3, [pc, #736]	; (c80 <system_init+0x2fc>)
     9a0:	48b8      	ldr	r0, [pc, #736]	; (c84 <system_init+0x300>)
     9a2:	6298      	str	r0, [r3, #40]	; 0x28
     9a4:	20c0      	movs	r0, #192	; 0xc0
     9a6:	0600      	lsls	r0, r0, #24
     9a8:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9aa:	2540      	movs	r5, #64	; 0x40
     9ac:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ae:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9b0:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b2:	2002      	movs	r0, #2
     9b4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9b6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9b8:	48b3      	ldr	r0, [pc, #716]	; (c88 <system_init+0x304>)
     9ba:	6298      	str	r0, [r3, #40]	; 0x28
     9bc:	20c0      	movs	r0, #192	; 0xc0
     9be:	0600      	lsls	r0, r0, #24
     9c0:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c2:	3501      	adds	r5, #1
     9c4:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9c6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ca:	2708      	movs	r7, #8
     9cc:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ce:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9d0:	48ae      	ldr	r0, [pc, #696]	; (c8c <system_init+0x308>)
     9d2:	4682      	mov	sl, r0
     9d4:	6298      	str	r0, [r3, #40]	; 0x28
     9d6:	20c0      	movs	r0, #192	; 0xc0
     9d8:	0600      	lsls	r0, r0, #24
     9da:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9dc:	3502      	adds	r5, #2
     9de:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e4:	2010      	movs	r0, #16
     9e6:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ea:	48a9      	ldr	r0, [pc, #676]	; (c90 <system_init+0x30c>)
     9ec:	6298      	str	r0, [r3, #40]	; 0x28
     9ee:	20c0      	movs	r0, #192	; 0xc0
     9f0:	0600      	lsls	r0, r0, #24
     9f2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f4:	3501      	adds	r5, #1
     9f6:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f8:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9fa:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9fc:	2080      	movs	r0, #128	; 0x80
     9fe:	0100      	lsls	r0, r0, #4
     a00:	4680      	mov	r8, r0
     a02:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a04:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a06:	48a3      	ldr	r0, [pc, #652]	; (c94 <system_init+0x310>)
     a08:	6298      	str	r0, [r3, #40]	; 0x28
     a0a:	20c0      	movs	r0, #192	; 0xc0
     a0c:	0600      	lsls	r0, r0, #24
     a0e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a10:	3507      	adds	r5, #7
     a12:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a14:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a16:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a18:	2080      	movs	r0, #128	; 0x80
     a1a:	0140      	lsls	r0, r0, #5
     a1c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a1e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a20:	489d      	ldr	r0, [pc, #628]	; (c98 <system_init+0x314>)
     a22:	6298      	str	r0, [r3, #40]	; 0x28
     a24:	20c0      	movs	r0, #192	; 0xc0
     a26:	0600      	lsls	r0, r0, #24
     a28:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a2a:	3501      	adds	r5, #1
     a2c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a30:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a32:	2080      	movs	r0, #128	; 0x80
     a34:	0180      	lsls	r0, r0, #6
     a36:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a38:	4898      	ldr	r0, [pc, #608]	; (c9c <system_init+0x318>)
     a3a:	6298      	str	r0, [r3, #40]	; 0x28
     a3c:	4898      	ldr	r0, [pc, #608]	; (ca0 <system_init+0x31c>)
     a3e:	4683      	mov	fp, r0
     a40:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a42:	204d      	movs	r0, #77	; 0x4d
     a44:	5c1c      	ldrb	r4, [r3, r0]
     a46:	3d48      	subs	r5, #72	; 0x48
     a48:	43ac      	bics	r4, r5
     a4a:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a4e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a50:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a52:	2080      	movs	r0, #128	; 0x80
     a54:	01c0      	lsls	r0, r0, #7
     a56:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a58:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a5a:	4892      	ldr	r0, [pc, #584]	; (ca4 <system_init+0x320>)
     a5c:	6298      	str	r0, [r3, #40]	; 0x28
     a5e:	20c0      	movs	r0, #192	; 0xc0
     a60:	0600      	lsls	r0, r0, #24
     a62:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a64:	204e      	movs	r0, #78	; 0x4e
     a66:	4684      	mov	ip, r0
     a68:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a6c:	4664      	mov	r4, ip
     a6e:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a70:	2080      	movs	r0, #128	; 0x80
     a72:	0200      	lsls	r0, r0, #8
     a74:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a76:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	488b      	ldr	r0, [pc, #556]	; (ca8 <system_init+0x324>)
     a7a:	6298      	str	r0, [r3, #40]	; 0x28
     a7c:	20c0      	movs	r0, #192	; 0xc0
     a7e:	0600      	lsls	r0, r0, #24
     a80:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	204f      	movs	r0, #79	; 0x4f
     a84:	4684      	mov	ip, r0
     a86:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a88:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	4664      	mov	r4, ip
     a8c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	2080      	movs	r0, #128	; 0x80
     a90:	0240      	lsls	r0, r0, #9
     a92:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	2080      	movs	r0, #128	; 0x80
     a98:	05c0      	lsls	r0, r0, #23
     a9a:	6298      	str	r0, [r3, #40]	; 0x28
     a9c:	4c83      	ldr	r4, [pc, #524]	; (cac <system_init+0x328>)
     a9e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	2450      	movs	r4, #80	; 0x50
     aa2:	46a1      	mov	r9, r4
     aa4:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa6:	438c      	bics	r4, r1
     aa8:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aaa:	464c      	mov	r4, r9
     aac:	4666      	mov	r6, ip
     aae:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab0:	2480      	movs	r4, #128	; 0x80
     ab2:	02a4      	lsls	r4, r4, #10
     ab4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab8:	6298      	str	r0, [r3, #40]	; 0x28
     aba:	4c7d      	ldr	r4, [pc, #500]	; (cb0 <system_init+0x32c>)
     abc:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	2451      	movs	r4, #81	; 0x51
     ac0:	46a1      	mov	r9, r4
     ac2:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac4:	438c      	bics	r4, r1
     ac6:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac8:	464c      	mov	r4, r9
     aca:	4666      	mov	r6, ip
     acc:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2480      	movs	r4, #128	; 0x80
     ad0:	02e4      	lsls	r4, r4, #11
     ad2:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad6:	6298      	str	r0, [r3, #40]	; 0x28
     ad8:	4c76      	ldr	r4, [pc, #472]	; (cb4 <system_init+0x330>)
     ada:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     adc:	2452      	movs	r4, #82	; 0x52
     ade:	46a1      	mov	r9, r4
     ae0:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae2:	438c      	bics	r4, r1
     ae4:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae6:	464c      	mov	r4, r9
     ae8:	4666      	mov	r6, ip
     aea:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aec:	2480      	movs	r4, #128	; 0x80
     aee:	0364      	lsls	r4, r4, #13
     af0:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af2:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     af4:	6298      	str	r0, [r3, #40]	; 0x28
     af6:	4c70      	ldr	r4, [pc, #448]	; (cb8 <system_init+0x334>)
     af8:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afa:	2454      	movs	r4, #84	; 0x54
     afc:	46a1      	mov	r9, r4
     afe:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b00:	438c      	bics	r4, r1
     b02:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b04:	464c      	mov	r4, r9
     b06:	4666      	mov	r6, ip
     b08:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b0a:	2480      	movs	r4, #128	; 0x80
     b0c:	0424      	lsls	r4, r4, #16
     b0e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b10:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b12:	6298      	str	r0, [r3, #40]	; 0x28
     b14:	4c69      	ldr	r4, [pc, #420]	; (cbc <system_init+0x338>)
     b16:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b18:	2457      	movs	r4, #87	; 0x57
     b1a:	46a1      	mov	r9, r4
     b1c:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b1e:	438c      	bics	r4, r1
     b20:	46a4      	mov	ip, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b22:	464c      	mov	r4, r9
     b24:	4666      	mov	r6, ip
     b26:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b28:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b2a:	4865      	ldr	r0, [pc, #404]	; (cc0 <system_init+0x33c>)
     b2c:	4681      	mov	r9, r0
     b2e:	6298      	str	r0, [r3, #40]	; 0x28
     b30:	4864      	ldr	r0, [pc, #400]	; (cc4 <system_init+0x340>)
     b32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b34:	205e      	movs	r0, #94	; 0x5e
     b36:	5c1c      	ldrb	r4, [r3, r0]
     b38:	43ac      	bics	r4, r5
     b3a:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b3e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b40:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b42:	2080      	movs	r0, #128	; 0x80
     b44:	0600      	lsls	r0, r0, #24
     b46:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b48:	4648      	mov	r0, r9
     b4a:	6298      	str	r0, [r3, #40]	; 0x28
     b4c:	485e      	ldr	r0, [pc, #376]	; (cc8 <system_init+0x344>)
     b4e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b50:	205f      	movs	r0, #95	; 0x5f
     b52:	5c1c      	ldrb	r4, [r3, r0]
     b54:	43ac      	bics	r4, r5
     b56:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b58:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5c:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b5e:	3025      	adds	r0, #37	; 0x25
     b60:	5015      	str	r5, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b62:	3024      	adds	r0, #36	; 0x24
     b64:	4c59      	ldr	r4, [pc, #356]	; (ccc <system_init+0x348>)
     b66:	501c      	str	r4, [r3, r0]
     b68:	465c      	mov	r4, fp
     b6a:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b6c:	26c2      	movs	r6, #194	; 0xc2
     b6e:	5d9c      	ldrb	r4, [r3, r6]
     b70:	43ac      	bics	r4, r5
     b72:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b74:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b76:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7a:	2494      	movs	r4, #148	; 0x94
     b7c:	46a4      	mov	ip, r4
     b7e:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b80:	3e3a      	subs	r6, #58	; 0x3a
     b82:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b84:	4654      	mov	r4, sl
     b86:	501c      	str	r4, [r3, r0]
     b88:	24c0      	movs	r4, #192	; 0xc0
     b8a:	0624      	lsls	r4, r4, #24
     b8c:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b8e:	24c3      	movs	r4, #195	; 0xc3
     b90:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b92:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b94:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b96:	2780      	movs	r7, #128	; 0x80
     b98:	007f      	lsls	r7, r7, #1
     b9a:	4664      	mov	r4, ip
     b9c:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b9e:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ba0:	4f4b      	ldr	r7, [pc, #300]	; (cd0 <system_init+0x34c>)
     ba2:	501f      	str	r7, [r3, r0]
     ba4:	24c0      	movs	r4, #192	; 0xc0
     ba6:	0624      	lsls	r4, r4, #24
     ba8:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     baa:	24c8      	movs	r4, #200	; 0xc8
     bac:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bae:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb0:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb2:	2780      	movs	r7, #128	; 0x80
     bb4:	00bf      	lsls	r7, r7, #2
     bb6:	4664      	mov	r4, ip
     bb8:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bba:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bbc:	4f45      	ldr	r7, [pc, #276]	; (cd4 <system_init+0x350>)
     bbe:	501f      	str	r7, [r3, r0]
     bc0:	24c0      	movs	r4, #192	; 0xc0
     bc2:	0624      	lsls	r4, r4, #24
     bc4:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	24c9      	movs	r4, #201	; 0xc9
     bc8:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bcc:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bce:	2780      	movs	r7, #128	; 0x80
     bd0:	00ff      	lsls	r7, r7, #3
     bd2:	4664      	mov	r4, ip
     bd4:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bd6:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bd8:	4c3f      	ldr	r4, [pc, #252]	; (cd8 <system_init+0x354>)
     bda:	501c      	str	r4, [r3, r0]
     bdc:	24c0      	movs	r4, #192	; 0xc0
     bde:	0624      	lsls	r4, r4, #24
     be0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     be2:	24ca      	movs	r4, #202	; 0xca
     be4:	46a3      	mov	fp, r4
     be6:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     be8:	438c      	bics	r4, r1
     bea:	46a2      	mov	sl, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bec:	465c      	mov	r4, fp
     bee:	4657      	mov	r7, sl
     bf0:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bf2:	4664      	mov	r4, ip
     bf4:	4647      	mov	r7, r8
     bf6:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bf8:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bfa:	4c26      	ldr	r4, [pc, #152]	; (c94 <system_init+0x310>)
     bfc:	501c      	str	r4, [r3, r0]
     bfe:	24c0      	movs	r4, #192	; 0xc0
     c00:	0624      	lsls	r4, r4, #24
     c02:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c04:	3643      	adds	r6, #67	; 0x43
     c06:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c08:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c0a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c0c:	2480      	movs	r4, #128	; 0x80
     c0e:	03e4      	lsls	r4, r4, #15
     c10:	3e47      	subs	r6, #71	; 0x47
     c12:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c14:	464a      	mov	r2, r9
     c16:	501a      	str	r2, [r3, r0]
     c18:	4a30      	ldr	r2, [pc, #192]	; (cdc <system_init+0x358>)
     c1a:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c1c:	22d6      	movs	r2, #214	; 0xd6
     c1e:	5c98      	ldrb	r0, [r3, r2]
     c20:	43a8      	bics	r0, r5
     c22:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c24:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c26:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c28:	5498      	strb	r0, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DETECT, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     c2a:	4b2d      	ldr	r3, [pc, #180]	; (ce0 <system_init+0x35c>)
     c2c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     c2e:	4b2d      	ldr	r3, [pc, #180]	; (ce4 <system_init+0x360>)
     c30:	4798      	blx	r3

	FLASH_0_init();
     c32:	4b2d      	ldr	r3, [pc, #180]	; (ce8 <system_init+0x364>)
     c34:	4798      	blx	r3

	SPI_0_init();
     c36:	4b2d      	ldr	r3, [pc, #180]	; (cec <system_init+0x368>)
     c38:	4798      	blx	r3

	SPI_1_init();
     c3a:	4b2d      	ldr	r3, [pc, #180]	; (cf0 <system_init+0x36c>)
     c3c:	4798      	blx	r3

	delay_driver_init();
     c3e:	4b2d      	ldr	r3, [pc, #180]	; (cf4 <system_init+0x370>)
     c40:	4798      	blx	r3
     c42:	4b25      	ldr	r3, [pc, #148]	; (cd8 <system_init+0x354>)
     c44:	699b      	ldr	r3, [r3, #24]
     c46:	2220      	movs	r2, #32
     c48:	4313      	orrs	r3, r2
     c4a:	4a23      	ldr	r2, [pc, #140]	; (cd8 <system_init+0x354>)
     c4c:	6193      	str	r3, [r2, #24]
     c4e:	4a2a      	ldr	r2, [pc, #168]	; (cf8 <system_init+0x374>)
     c50:	4b2a      	ldr	r3, [pc, #168]	; (cfc <system_init+0x378>)
     c52:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     c54:	4b2a      	ldr	r3, [pc, #168]	; (d00 <system_init+0x37c>)
     c56:	4798      	blx	r3
     c58:	0002      	movs	r2, r0
     c5a:	492a      	ldr	r1, [pc, #168]	; (d04 <system_init+0x380>)
     c5c:	482a      	ldr	r0, [pc, #168]	; (d08 <system_init+0x384>)
     c5e:	4b2b      	ldr	r3, [pc, #172]	; (d0c <system_init+0x388>)
     c60:	4798      	blx	r3

	TIMER_0_init();

	PWM_0_init();
     c62:	4b2b      	ldr	r3, [pc, #172]	; (d10 <system_init+0x38c>)
     c64:	4798      	blx	r3

	DAC_0_init();
     c66:	4b2b      	ldr	r3, [pc, #172]	; (d14 <system_init+0x390>)
     c68:	4798      	blx	r3

	WDT_0_init();
     c6a:	4b2b      	ldr	r3, [pc, #172]	; (d18 <system_init+0x394>)
     c6c:	4798      	blx	r3
}
     c6e:	bc3c      	pop	{r2, r3, r4, r5}
     c70:	4690      	mov	r8, r2
     c72:	4699      	mov	r9, r3
     c74:	46a2      	mov	sl, r4
     c76:	46ab      	mov	fp, r5
     c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00001b5d 	.word	0x00001b5d
     c80:	41004400 	.word	0x41004400
     c84:	40000001 	.word	0x40000001
     c88:	40000002 	.word	0x40000002
     c8c:	40000008 	.word	0x40000008
     c90:	40000010 	.word	0x40000010
     c94:	40000800 	.word	0x40000800
     c98:	40001000 	.word	0x40001000
     c9c:	40022000 	.word	0x40022000
     ca0:	c0020000 	.word	0xc0020000
     ca4:	40004000 	.word	0x40004000
     ca8:	40008000 	.word	0x40008000
     cac:	c0000001 	.word	0xc0000001
     cb0:	c0000002 	.word	0xc0000002
     cb4:	c0000004 	.word	0xc0000004
     cb8:	c0000010 	.word	0xc0000010
     cbc:	c0000080 	.word	0xc0000080
     cc0:	40020000 	.word	0x40020000
     cc4:	c0024000 	.word	0xc0024000
     cc8:	c0028000 	.word	0xc0028000
     ccc:	40020004 	.word	0x40020004
     cd0:	40000100 	.word	0x40000100
     cd4:	40000200 	.word	0x40000200
     cd8:	40000400 	.word	0x40000400
     cdc:	c0020040 	.word	0xc0020040
     ce0:	000004d1 	.word	0x000004d1
     ce4:	000004fd 	.word	0x000004fd
     ce8:	00000675 	.word	0x00000675
     cec:	00000769 	.word	0x00000769
     cf0:	00000869 	.word	0x00000869
     cf4:	00000891 	.word	0x00000891
     cf8:	00004004 	.word	0x00004004
     cfc:	40000c00 	.word	0x40000c00
     d00:	000022d7 	.word	0x000022d7
     d04:	40001400 	.word	0x40001400
     d08:	2000011c 	.word	0x2000011c
     d0c:	0000181d 	.word	0x0000181d
     d10:	000008c5 	.word	0x000008c5
     d14:	00000911 	.word	0x00000911
     d18:	00000951 	.word	0x00000951

00000d1c <split_to_8>:
	store_delivery_data();
}

void split_to_8(void)
{
	write_array[0] = writes >> 8;
     d1c:	4b06      	ldr	r3, [pc, #24]	; (d38 <split_to_8+0x1c>)
     d1e:	881a      	ldrh	r2, [r3, #0]
     d20:	4b06      	ldr	r3, [pc, #24]	; (d3c <split_to_8+0x20>)
     d22:	0a11      	lsrs	r1, r2, #8
     d24:	7019      	strb	r1, [r3, #0]
	write_array[1] = writes;
     d26:	705a      	strb	r2, [r3, #1]
	address_array[0] = flash_address >> 8;
     d28:	4b05      	ldr	r3, [pc, #20]	; (d40 <split_to_8+0x24>)
     d2a:	881a      	ldrh	r2, [r3, #0]
     d2c:	4b05      	ldr	r3, [pc, #20]	; (d44 <split_to_8+0x28>)
     d2e:	0a11      	lsrs	r1, r2, #8
     d30:	8019      	strh	r1, [r3, #0]
	address_array[1] = flash_address;
     d32:	805a      	strh	r2, [r3, #2]
}
     d34:	4770      	bx	lr
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	2000009a 	.word	0x2000009a
     d3c:	20000168 	.word	0x20000168
     d40:	20000014 	.word	0x20000014
     d44:	2000016c 	.word	0x2000016c

00000d48 <store_delivery_data>:
{
     d48:	b530      	push	{r4, r5, lr}
     d4a:	b0a1      	sub	sp, #132	; 0x84
	page_size = flash_get_page_size(&FLASH_0);
     d4c:	4c14      	ldr	r4, [pc, #80]	; (da0 <store_delivery_data+0x58>)
     d4e:	0020      	movs	r0, r4
     d50:	4b14      	ldr	r3, [pc, #80]	; (da4 <store_delivery_data+0x5c>)
     d52:	4798      	blx	r3
     d54:	0005      	movs	r5, r0
	writes++;
     d56:	4a14      	ldr	r2, [pc, #80]	; (da8 <store_delivery_data+0x60>)
     d58:	8813      	ldrh	r3, [r2, #0]
     d5a:	3301      	adds	r3, #1
     d5c:	8013      	strh	r3, [r2, #0]
	split_to_8();
     d5e:	4b13      	ldr	r3, [pc, #76]	; (dac <store_delivery_data+0x64>)
     d60:	4798      	blx	r3
	storage_array[0] = button_array[0];
     d62:	4b13      	ldr	r3, [pc, #76]	; (db0 <store_delivery_data+0x68>)
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	466a      	mov	r2, sp
     d68:	7013      	strb	r3, [r2, #0]
	storage_array[1] = basal_rate[0];
     d6a:	4b12      	ldr	r3, [pc, #72]	; (db4 <store_delivery_data+0x6c>)
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	7053      	strb	r3, [r2, #1]
	storage_array[2] = count[0];
     d70:	4b11      	ldr	r3, [pc, #68]	; (db8 <store_delivery_data+0x70>)
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	7093      	strb	r3, [r2, #2]
	storage_array[3] = write_array[0];
     d76:	4b11      	ldr	r3, [pc, #68]	; (dbc <store_delivery_data+0x74>)
     d78:	781a      	ldrb	r2, [r3, #0]
     d7a:	4669      	mov	r1, sp
     d7c:	70ca      	strb	r2, [r1, #3]
	storage_array[4] = write_array[1];
     d7e:	785b      	ldrb	r3, [r3, #1]
     d80:	710b      	strb	r3, [r1, #4]
	storage_array[5] = address_array[0];
     d82:	4b0f      	ldr	r3, [pc, #60]	; (dc0 <store_delivery_data+0x78>)
     d84:	881a      	ldrh	r2, [r3, #0]
     d86:	714a      	strb	r2, [r1, #5]
	storage_array[6] = address_array[1];
     d88:	885b      	ldrh	r3, [r3, #2]
     d8a:	466a      	mov	r2, sp
     d8c:	718b      	strb	r3, [r1, #6]
	flash_write(&FLASH_0, flash_address, storage_array, page_size);
     d8e:	4b0d      	ldr	r3, [pc, #52]	; (dc4 <store_delivery_data+0x7c>)
     d90:	8819      	ldrh	r1, [r3, #0]
     d92:	002b      	movs	r3, r5
     d94:	0020      	movs	r0, r4
     d96:	4c0c      	ldr	r4, [pc, #48]	; (dc8 <store_delivery_data+0x80>)
     d98:	47a0      	blx	r4
}
     d9a:	b021      	add	sp, #132	; 0x84
     d9c:	bd30      	pop	{r4, r5, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	200000bc 	.word	0x200000bc
     da4:	0000144d 	.word	0x0000144d
     da8:	2000009a 	.word	0x2000009a
     dac:	00000d1d 	.word	0x00000d1d
     db0:	20000094 	.word	0x20000094
     db4:	20000018 	.word	0x20000018
     db8:	20000098 	.word	0x20000098
     dbc:	20000168 	.word	0x20000168
     dc0:	2000016c 	.word	0x2000016c
     dc4:	20000014 	.word	0x20000014
     dc8:	000012dd 	.word	0x000012dd

00000dcc <flash_initialise>:
{
     dcc:	b510      	push	{r4, lr}
	flash_address = 0x4000;
     dce:	2180      	movs	r1, #128	; 0x80
     dd0:	01c9      	lsls	r1, r1, #7
     dd2:	4b04      	ldr	r3, [pc, #16]	; (de4 <flash_initialise+0x18>)
     dd4:	8019      	strh	r1, [r3, #0]
	flash_erase(&FLASH_0, flash_address, 1);
     dd6:	2201      	movs	r2, #1
     dd8:	4803      	ldr	r0, [pc, #12]	; (de8 <flash_initialise+0x1c>)
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <flash_initialise+0x20>)
     ddc:	4798      	blx	r3
	store_delivery_data();
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <flash_initialise+0x24>)
     de0:	4798      	blx	r3
}
     de2:	bd10      	pop	{r4, pc}
     de4:	20000014 	.word	0x20000014
     de8:	200000bc 	.word	0x200000bc
     dec:	0000139d 	.word	0x0000139d
     df0:	00000d49 	.word	0x00000d49

00000df4 <join_to_16>:

void join_to_16(void)
{
	writes = 0;
	writes = ((write_array[0] << 8) | write_array[1]);
     df4:	4907      	ldr	r1, [pc, #28]	; (e14 <join_to_16+0x20>)
     df6:	780a      	ldrb	r2, [r1, #0]
     df8:	0212      	lsls	r2, r2, #8
     dfa:	784b      	ldrb	r3, [r1, #1]
     dfc:	4313      	orrs	r3, r2
     dfe:	4a06      	ldr	r2, [pc, #24]	; (e18 <join_to_16+0x24>)
     e00:	8013      	strh	r3, [r2, #0]
	flash_address = 0;
	flash_address = ((address_array[0] << 8) | address_array[1]);
     e02:	4a06      	ldr	r2, [pc, #24]	; (e1c <join_to_16+0x28>)
     e04:	8813      	ldrh	r3, [r2, #0]
     e06:	021b      	lsls	r3, r3, #8
     e08:	8852      	ldrh	r2, [r2, #2]
     e0a:	4313      	orrs	r3, r2
     e0c:	4a04      	ldr	r2, [pc, #16]	; (e20 <join_to_16+0x2c>)
     e0e:	8013      	strh	r3, [r2, #0]
	
}
     e10:	4770      	bx	lr
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	20000168 	.word	0x20000168
     e18:	2000009a 	.word	0x2000009a
     e1c:	2000016c 	.word	0x2000016c
     e20:	20000014 	.word	0x20000014

00000e24 <get_delivery_data>:
{
     e24:	b510      	push	{r4, lr}
     e26:	b0a0      	sub	sp, #128	; 0x80
	page_size = flash_get_page_size(&FLASH_0);
     e28:	4c14      	ldr	r4, [pc, #80]	; (e7c <get_delivery_data+0x58>)
     e2a:	0020      	movs	r0, r4
     e2c:	4b14      	ldr	r3, [pc, #80]	; (e80 <get_delivery_data+0x5c>)
     e2e:	4798      	blx	r3
     e30:	0003      	movs	r3, r0
	flash_read(&FLASH_0, flash_address, storage_array, page_size);
     e32:	4a14      	ldr	r2, [pc, #80]	; (e84 <get_delivery_data+0x60>)
     e34:	8811      	ldrh	r1, [r2, #0]
     e36:	466a      	mov	r2, sp
     e38:	0020      	movs	r0, r4
     e3a:	4c13      	ldr	r4, [pc, #76]	; (e88 <get_delivery_data+0x64>)
     e3c:	47a0      	blx	r4
	button_array[0] = storage_array[0];
     e3e:	466b      	mov	r3, sp
     e40:	781a      	ldrb	r2, [r3, #0]
     e42:	4b12      	ldr	r3, [pc, #72]	; (e8c <get_delivery_data+0x68>)
     e44:	701a      	strb	r2, [r3, #0]
	basal_rate[0] = storage_array[1];
     e46:	466b      	mov	r3, sp
     e48:	785a      	ldrb	r2, [r3, #1]
     e4a:	4b11      	ldr	r3, [pc, #68]	; (e90 <get_delivery_data+0x6c>)
     e4c:	701a      	strb	r2, [r3, #0]
	count[0] = storage_array[2];
     e4e:	466b      	mov	r3, sp
     e50:	789a      	ldrb	r2, [r3, #2]
     e52:	4b10      	ldr	r3, [pc, #64]	; (e94 <get_delivery_data+0x70>)
     e54:	701a      	strb	r2, [r3, #0]
	write_array[0] = storage_array[3];
     e56:	4b10      	ldr	r3, [pc, #64]	; (e98 <get_delivery_data+0x74>)
     e58:	466a      	mov	r2, sp
     e5a:	78d2      	ldrb	r2, [r2, #3]
     e5c:	701a      	strb	r2, [r3, #0]
	write_array[1] = storage_array[4];
     e5e:	466a      	mov	r2, sp
     e60:	7912      	ldrb	r2, [r2, #4]
     e62:	705a      	strb	r2, [r3, #1]
	address_array[0] = storage_array[5];
     e64:	4b0d      	ldr	r3, [pc, #52]	; (e9c <get_delivery_data+0x78>)
     e66:	466a      	mov	r2, sp
     e68:	7952      	ldrb	r2, [r2, #5]
     e6a:	801a      	strh	r2, [r3, #0]
	address_array[1] = storage_array[6];
     e6c:	466a      	mov	r2, sp
     e6e:	7992      	ldrb	r2, [r2, #6]
     e70:	805a      	strh	r2, [r3, #2]
	join_to_16();
     e72:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <get_delivery_data+0x7c>)
     e74:	4798      	blx	r3
}
     e76:	b020      	add	sp, #128	; 0x80
     e78:	bd10      	pop	{r4, pc}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	200000bc 	.word	0x200000bc
     e80:	0000144d 	.word	0x0000144d
     e84:	20000014 	.word	0x20000014
     e88:	00001235 	.word	0x00001235
     e8c:	20000094 	.word	0x20000094
     e90:	20000018 	.word	0x20000018
     e94:	20000098 	.word	0x20000098
     e98:	20000168 	.word	0x20000168
     e9c:	2000016c 	.word	0x2000016c
     ea0:	00000df5 	.word	0x00000df5

00000ea4 <check_writes>:

void check_writes(void)
{
	if (writes < 7000)
     ea4:	4b1d      	ldr	r3, [pc, #116]	; (f1c <check_writes+0x78>)
     ea6:	881b      	ldrh	r3, [r3, #0]
     ea8:	4a1d      	ldr	r2, [pc, #116]	; (f20 <check_writes+0x7c>)
     eaa:	4293      	cmp	r3, r2
     eac:	d91d      	bls.n	eea <check_writes+0x46>
	{
		flash_address = 0x4000;
	}
	else if (writes >= 7000 && writes < 14000)
     eae:	491c      	ldr	r1, [pc, #112]	; (f20 <check_writes+0x7c>)
     eb0:	4a1c      	ldr	r2, [pc, #112]	; (f24 <check_writes+0x80>)
     eb2:	189a      	adds	r2, r3, r2
     eb4:	b292      	uxth	r2, r2
     eb6:	428a      	cmp	r2, r1
     eb8:	d91c      	bls.n	ef4 <check_writes+0x50>
	{
		flash_address = 0x4100;
	}
	else if (writes >= 14000 && writes < 21000)
     eba:	4919      	ldr	r1, [pc, #100]	; (f20 <check_writes+0x7c>)
     ebc:	4a1a      	ldr	r2, [pc, #104]	; (f28 <check_writes+0x84>)
     ebe:	189a      	adds	r2, r3, r2
     ec0:	b292      	uxth	r2, r2
     ec2:	428a      	cmp	r2, r1
     ec4:	d91b      	bls.n	efe <check_writes+0x5a>
	{
		flash_address = 0x4200;
	}
	else if (writes >= 21000 && writes < 28000)
     ec6:	4916      	ldr	r1, [pc, #88]	; (f20 <check_writes+0x7c>)
     ec8:	4a18      	ldr	r2, [pc, #96]	; (f2c <check_writes+0x88>)
     eca:	189a      	adds	r2, r3, r2
     ecc:	b292      	uxth	r2, r2
     ece:	428a      	cmp	r2, r1
     ed0:	d91a      	bls.n	f08 <check_writes+0x64>
	{
		flash_address = 0x4300;
	}
	else if (writes >= 28000 && writes < 35000)
     ed2:	4a17      	ldr	r2, [pc, #92]	; (f30 <check_writes+0x8c>)
     ed4:	4694      	mov	ip, r2
     ed6:	4463      	add	r3, ip
     ed8:	4a11      	ldr	r2, [pc, #68]	; (f20 <check_writes+0x7c>)
     eda:	b29b      	uxth	r3, r3
     edc:	4293      	cmp	r3, r2
     ede:	d918      	bls.n	f12 <check_writes+0x6e>
	{
		flash_address = 0x4400;
	}
	else
	{
		flash_address = 0x4500;
     ee0:	228a      	movs	r2, #138	; 0x8a
     ee2:	01d2      	lsls	r2, r2, #7
     ee4:	4b13      	ldr	r3, [pc, #76]	; (f34 <check_writes+0x90>)
     ee6:	801a      	strh	r2, [r3, #0]
	}
     ee8:	e003      	b.n	ef2 <check_writes+0x4e>
		flash_address = 0x4000;
     eea:	2280      	movs	r2, #128	; 0x80
     eec:	01d2      	lsls	r2, r2, #7
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <check_writes+0x90>)
     ef0:	801a      	strh	r2, [r3, #0]
     ef2:	4770      	bx	lr
		flash_address = 0x4100;
     ef4:	2282      	movs	r2, #130	; 0x82
     ef6:	01d2      	lsls	r2, r2, #7
     ef8:	4b0e      	ldr	r3, [pc, #56]	; (f34 <check_writes+0x90>)
     efa:	801a      	strh	r2, [r3, #0]
     efc:	e7f9      	b.n	ef2 <check_writes+0x4e>
		flash_address = 0x4200;
     efe:	2284      	movs	r2, #132	; 0x84
     f00:	01d2      	lsls	r2, r2, #7
     f02:	4b0c      	ldr	r3, [pc, #48]	; (f34 <check_writes+0x90>)
     f04:	801a      	strh	r2, [r3, #0]
     f06:	e7f4      	b.n	ef2 <check_writes+0x4e>
		flash_address = 0x4300;
     f08:	2286      	movs	r2, #134	; 0x86
     f0a:	01d2      	lsls	r2, r2, #7
     f0c:	4b09      	ldr	r3, [pc, #36]	; (f34 <check_writes+0x90>)
     f0e:	801a      	strh	r2, [r3, #0]
     f10:	e7ef      	b.n	ef2 <check_writes+0x4e>
		flash_address = 0x4400;
     f12:	2288      	movs	r2, #136	; 0x88
     f14:	01d2      	lsls	r2, r2, #7
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <check_writes+0x90>)
     f18:	801a      	strh	r2, [r3, #0]
     f1a:	e7ea      	b.n	ef2 <check_writes+0x4e>
     f1c:	2000009a 	.word	0x2000009a
     f20:	00001b57 	.word	0x00001b57
     f24:	ffffe4a8 	.word	0xffffe4a8
     f28:	ffffc950 	.word	0xffffc950
     f2c:	ffffadf8 	.word	0xffffadf8
     f30:	ffff92a0 	.word	0xffff92a0
     f34:	20000014 	.word	0x20000014

00000f38 <adc_sync_init>:
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
     f3e:	2800      	cmp	r0, #0
     f40:	d00c      	beq.n	f5c <adc_sync_init+0x24>
     f42:	0008      	movs	r0, r1
     f44:	1e43      	subs	r3, r0, #1
     f46:	4198      	sbcs	r0, r3
     f48:	b2c0      	uxtb	r0, r0
     f4a:	2239      	movs	r2, #57	; 0x39
     f4c:	4904      	ldr	r1, [pc, #16]	; (f60 <adc_sync_init+0x28>)
     f4e:	4b05      	ldr	r3, [pc, #20]	; (f64 <adc_sync_init+0x2c>)
     f50:	4798      	blx	r3
     f52:	0029      	movs	r1, r5
     f54:	0020      	movs	r0, r4
     f56:	4b04      	ldr	r3, [pc, #16]	; (f68 <adc_sync_init+0x30>)
     f58:	4798      	blx	r3
     f5a:	bd70      	pop	{r4, r5, r6, pc}
     f5c:	2000      	movs	r0, #0
     f5e:	e7f4      	b.n	f4a <adc_sync_init+0x12>
     f60:	00003004 	.word	0x00003004
     f64:	00001985 	.word	0x00001985
     f68:	00001afd 	.word	0x00001afd

00000f6c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f6c:	f3ef 8310 	mrs	r3, PRIMASK
     f70:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f72:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f74:	f3bf 8f5f 	dmb	sy
     f78:	4770      	bx	lr

00000f7a <atomic_leave_critical>:
     f7a:	f3bf 8f5f 	dmb	sy
     f7e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f80:	f383 8810 	msr	PRIMASK, r3
     f84:	4770      	bx	lr
	...

00000f88 <dac_sync_init>:
     f88:	b570      	push	{r4, r5, r6, lr}
     f8a:	0005      	movs	r5, r0
     f8c:	000c      	movs	r4, r1
     f8e:	2800      	cmp	r0, #0
     f90:	d011      	beq.n	fb6 <dac_sync_init+0x2e>
     f92:	0008      	movs	r0, r1
     f94:	1e43      	subs	r3, r0, #1
     f96:	4198      	sbcs	r0, r3
     f98:	b2c0      	uxtb	r0, r0
     f9a:	2232      	movs	r2, #50	; 0x32
     f9c:	4907      	ldr	r1, [pc, #28]	; (fbc <dac_sync_init+0x34>)
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <dac_sync_init+0x38>)
     fa0:	4798      	blx	r3
     fa2:	0021      	movs	r1, r4
     fa4:	0028      	movs	r0, r5
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <dac_sync_init+0x3c>)
     fa8:	4798      	blx	r3
     faa:	2800      	cmp	r0, #0
     fac:	d102      	bne.n	fb4 <dac_sync_init+0x2c>
     fae:	2300      	movs	r3, #0
     fb0:	606b      	str	r3, [r5, #4]
     fb2:	60ab      	str	r3, [r5, #8]
     fb4:	bd70      	pop	{r4, r5, r6, pc}
     fb6:	2000      	movs	r0, #0
     fb8:	e7ef      	b.n	f9a <dac_sync_init+0x12>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00003020 	.word	0x00003020
     fc0:	00001985 	.word	0x00001985
     fc4:	00001bd1 	.word	0x00001bd1

00000fc8 <delay_init>:
     fc8:	b510      	push	{r4, lr}
     fca:	4b02      	ldr	r3, [pc, #8]	; (fd4 <delay_init+0xc>)
     fcc:	6018      	str	r0, [r3, #0]
     fce:	4b02      	ldr	r3, [pc, #8]	; (fd8 <delay_init+0x10>)
     fd0:	4798      	blx	r3
     fd2:	bd10      	pop	{r4, pc}
     fd4:	20000050 	.word	0x20000050
     fd8:	0000276d 	.word	0x0000276d

00000fdc <delay_us>:
     fdc:	b510      	push	{r4, lr}
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <delay_us+0x14>)
     fe0:	681c      	ldr	r4, [r3, #0]
     fe2:	4b04      	ldr	r3, [pc, #16]	; (ff4 <delay_us+0x18>)
     fe4:	4798      	blx	r3
     fe6:	0001      	movs	r1, r0
     fe8:	0020      	movs	r0, r4
     fea:	4b03      	ldr	r3, [pc, #12]	; (ff8 <delay_us+0x1c>)
     fec:	4798      	blx	r3
     fee:	bd10      	pop	{r4, pc}
     ff0:	20000050 	.word	0x20000050
     ff4:	00001b3d 	.word	0x00001b3d
     ff8:	00002781 	.word	0x00002781

00000ffc <delay_ms>:
     ffc:	b510      	push	{r4, lr}
     ffe:	4b04      	ldr	r3, [pc, #16]	; (1010 <delay_ms+0x14>)
    1000:	681c      	ldr	r4, [r3, #0]
    1002:	4b04      	ldr	r3, [pc, #16]	; (1014 <delay_ms+0x18>)
    1004:	4798      	blx	r3
    1006:	0001      	movs	r1, r0
    1008:	0020      	movs	r0, r4
    100a:	4b03      	ldr	r3, [pc, #12]	; (1018 <delay_ms+0x1c>)
    100c:	4798      	blx	r3
    100e:	bd10      	pop	{r4, pc}
    1010:	20000050 	.word	0x20000050
    1014:	00001b55 	.word	0x00001b55
    1018:	00002781 	.word	0x00002781

0000101c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    101e:	4b13      	ldr	r3, [pc, #76]	; (106c <process_ext_irq+0x50>)
    1020:	69d9      	ldr	r1, [r3, #28]
    1022:	4288      	cmp	r0, r1
    1024:	d005      	beq.n	1032 <process_ext_irq+0x16>
    1026:	2203      	movs	r2, #3
    1028:	2706      	movs	r7, #6
    102a:	2400      	movs	r4, #0
    102c:	26ff      	movs	r6, #255	; 0xff
    102e:	001d      	movs	r5, r3
    1030:	e016      	b.n	1060 <process_ext_irq+0x44>
    1032:	2303      	movs	r3, #3
			if (ext_irqs[middle].cb) {
    1034:	00db      	lsls	r3, r3, #3
    1036:	4a0d      	ldr	r2, [pc, #52]	; (106c <process_ext_irq+0x50>)
    1038:	589b      	ldr	r3, [r3, r2]
    103a:	2b00      	cmp	r3, #0
    103c:	d000      	beq.n	1040 <process_ext_irq+0x24>
				ext_irqs[middle].cb();
    103e:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    1040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			upper = middle - 1;
    1042:	3a01      	subs	r2, #1
    1044:	b2d7      	uxtb	r7, r2
	while (upper >= lower) {
    1046:	42a7      	cmp	r7, r4
    1048:	d3fa      	bcc.n	1040 <process_ext_irq+0x24>
		middle = (upper + lower) >> 1;
    104a:	193b      	adds	r3, r7, r4
    104c:	105b      	asrs	r3, r3, #1
    104e:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1050:	2a05      	cmp	r2, #5
    1052:	d8f5      	bhi.n	1040 <process_ext_irq+0x24>
    1054:	4033      	ands	r3, r6
		if (ext_irqs[middle].pin == pin) {
    1056:	00d9      	lsls	r1, r3, #3
    1058:	1869      	adds	r1, r5, r1
    105a:	6849      	ldr	r1, [r1, #4]
    105c:	4281      	cmp	r1, r0
    105e:	d0e9      	beq.n	1034 <process_ext_irq+0x18>
		if (ext_irqs[middle].pin < pin) {
    1060:	4288      	cmp	r0, r1
    1062:	d9ee      	bls.n	1042 <process_ext_irq+0x26>
			lower = middle + 1;
    1064:	3201      	adds	r2, #1
    1066:	b2d4      	uxtb	r4, r2
    1068:	e7ed      	b.n	1046 <process_ext_irq+0x2a>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	20000054 	.word	0x20000054

00001070 <ext_irq_init>:
{
    1070:	b510      	push	{r4, lr}
    1072:	4b07      	ldr	r3, [pc, #28]	; (1090 <ext_irq_init+0x20>)
    1074:	0018      	movs	r0, r3
    1076:	3030      	adds	r0, #48	; 0x30
		ext_irqs[i].pin = 0xFFFFFFFF;
    1078:	2101      	movs	r1, #1
    107a:	4249      	negs	r1, r1
		ext_irqs[i].cb  = NULL;
    107c:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    107e:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1080:	601a      	str	r2, [r3, #0]
    1082:	3308      	adds	r3, #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1084:	4283      	cmp	r3, r0
    1086:	d1fa      	bne.n	107e <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    1088:	4802      	ldr	r0, [pc, #8]	; (1094 <ext_irq_init+0x24>)
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <ext_irq_init+0x28>)
    108c:	4798      	blx	r3
}
    108e:	bd10      	pop	{r4, pc}
    1090:	20000054 	.word	0x20000054
    1094:	0000101d 	.word	0x0000101d
    1098:	00001bfd 	.word	0x00001bfd

0000109c <ext_irq_register>:
{
    109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    109e:	46de      	mov	lr, fp
    10a0:	4657      	mov	r7, sl
    10a2:	464e      	mov	r6, r9
    10a4:	4645      	mov	r5, r8
    10a6:	b5e0      	push	{r5, r6, r7, lr}
		if (ext_irqs[i].pin == pin) {
    10a8:	4b32      	ldr	r3, [pc, #200]	; (1174 <ext_irq_register+0xd8>)
    10aa:	685b      	ldr	r3, [r3, #4]
    10ac:	4298      	cmp	r0, r3
    10ae:	d01d      	beq.n	10ec <ext_irq_register+0x50>
    10b0:	4a30      	ldr	r2, [pc, #192]	; (1174 <ext_irq_register+0xd8>)
    10b2:	2301      	movs	r3, #1
    10b4:	001c      	movs	r4, r3
    10b6:	68d5      	ldr	r5, [r2, #12]
    10b8:	4285      	cmp	r5, r0
    10ba:	d018      	beq.n	10ee <ext_irq_register+0x52>
    10bc:	3301      	adds	r3, #1
    10be:	3208      	adds	r2, #8
	for (; i < EXT_IRQ_AMOUNT; i++) {
    10c0:	2b06      	cmp	r3, #6
    10c2:	d1f7      	bne.n	10b4 <ext_irq_register+0x18>
	if (NULL == cb) {
    10c4:	2900      	cmp	r1, #0
    10c6:	d04d      	beq.n	1164 <ext_irq_register+0xc8>
			if (NULL == ext_irqs[i].cb) {
    10c8:	4b2a      	ldr	r3, [pc, #168]	; (1174 <ext_irq_register+0xd8>)
    10ca:	681a      	ldr	r2, [r3, #0]
    10cc:	2301      	movs	r3, #1
    10ce:	2a00      	cmp	r2, #0
    10d0:	d04b      	beq.n	116a <ext_irq_register+0xce>
    10d2:	4c28      	ldr	r4, [pc, #160]	; (1174 <ext_irq_register+0xd8>)
    10d4:	b2de      	uxtb	r6, r3
    10d6:	001d      	movs	r5, r3
    10d8:	00da      	lsls	r2, r3, #3
    10da:	5912      	ldr	r2, [r2, r4]
    10dc:	2a00      	cmp	r2, #0
    10de:	d00f      	beq.n	1100 <ext_irq_register+0x64>
    10e0:	3301      	adds	r3, #1
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10e2:	2b06      	cmp	r3, #6
    10e4:	d1f6      	bne.n	10d4 <ext_irq_register+0x38>
		return ERR_INVALID_ARG;
    10e6:	200d      	movs	r0, #13
    10e8:	4240      	negs	r0, r0
    10ea:	e035      	b.n	1158 <ext_irq_register+0xbc>
		if (ext_irqs[i].pin == pin) {
    10ec:	2400      	movs	r4, #0
			ext_irqs[i].cb = cb;
    10ee:	00e4      	lsls	r4, r4, #3
    10f0:	4b20      	ldr	r3, [pc, #128]	; (1174 <ext_irq_register+0xd8>)
    10f2:	50e1      	str	r1, [r4, r3]
	if (NULL == cb) {
    10f4:	2900      	cmp	r1, #0
    10f6:	d12c      	bne.n	1152 <ext_irq_register+0xb6>
		return _ext_irq_enable(pin, false);
    10f8:	2100      	movs	r1, #0
    10fa:	4b1f      	ldr	r3, [pc, #124]	; (1178 <ext_irq_register+0xdc>)
    10fc:	4798      	blx	r3
    10fe:	e02b      	b.n	1158 <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    1100:	4b1c      	ldr	r3, [pc, #112]	; (1174 <ext_irq_register+0xd8>)
    1102:	00ed      	lsls	r5, r5, #3
    1104:	50e9      	str	r1, [r5, r3]
				ext_irqs[i].pin = pin;
    1106:	195d      	adds	r5, r3, r5
    1108:	6068      	str	r0, [r5, #4]
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    110a:	2e05      	cmp	r6, #5
    110c:	d821      	bhi.n	1152 <ext_irq_register+0xb6>
				ext_irqs[i] = tmp;
    110e:	4d19      	ldr	r5, [pc, #100]	; (1174 <ext_irq_register+0xd8>)
    1110:	00f7      	lsls	r7, r6, #3
    1112:	46ba      	mov	sl, r7
    1114:	44aa      	add	sl, r5
    1116:	002b      	movs	r3, r5
    1118:	3530      	adds	r5, #48	; 0x30
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    111a:	46bb      	mov	fp, r7
    111c:	4654      	mov	r4, sl
				ext_irqs[j] = ext_irqs[i];
    111e:	4699      	mov	r9, r3
    1120:	e002      	b.n	1128 <ext_irq_register+0x8c>
    1122:	3308      	adds	r3, #8
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1124:	429d      	cmp	r5, r3
    1126:	d014      	beq.n	1152 <ext_irq_register+0xb6>
    1128:	001a      	movs	r2, r3
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    112a:	6859      	ldr	r1, [r3, #4]
    112c:	6866      	ldr	r6, [r4, #4]
    112e:	428e      	cmp	r6, r1
    1130:	d2f7      	bcs.n	1122 <ext_irq_register+0x86>
    1132:	3101      	adds	r1, #1
    1134:	d0f5      	beq.n	1122 <ext_irq_register+0x86>
				struct ext_irq tmp = ext_irqs[j];
    1136:	6819      	ldr	r1, [r3, #0]
    1138:	4688      	mov	r8, r1
    113a:	6859      	ldr	r1, [r3, #4]
    113c:	468c      	mov	ip, r1
				ext_irqs[j] = ext_irqs[i];
    113e:	4649      	mov	r1, r9
    1140:	4459      	add	r1, fp
    1142:	c9c0      	ldmia	r1!, {r6, r7}
    1144:	c2c0      	stmia	r2!, {r6, r7}
				ext_irqs[i] = tmp;
    1146:	4642      	mov	r2, r8
    1148:	4651      	mov	r1, sl
    114a:	600a      	str	r2, [r1, #0]
    114c:	4662      	mov	r2, ip
    114e:	604a      	str	r2, [r1, #4]
    1150:	e7e7      	b.n	1122 <ext_irq_register+0x86>
	return _ext_irq_enable(pin, true);
    1152:	2101      	movs	r1, #1
    1154:	4b08      	ldr	r3, [pc, #32]	; (1178 <ext_irq_register+0xdc>)
    1156:	4798      	blx	r3
}
    1158:	bc3c      	pop	{r2, r3, r4, r5}
    115a:	4690      	mov	r8, r2
    115c:	4699      	mov	r9, r3
    115e:	46a2      	mov	sl, r4
    1160:	46ab      	mov	fp, r5
    1162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    1164:	200d      	movs	r0, #13
    1166:	4240      	negs	r0, r0
    1168:	e7f6      	b.n	1158 <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    116a:	4b02      	ldr	r3, [pc, #8]	; (1174 <ext_irq_register+0xd8>)
    116c:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
    116e:	6058      	str	r0, [r3, #4]
    1170:	2600      	movs	r6, #0
    1172:	e7cc      	b.n	110e <ext_irq_register+0x72>
    1174:	20000054 	.word	0x20000054
    1178:	00001c9d 	.word	0x00001c9d

0000117c <ext_irq_enable>:
{
    117c:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
    117e:	2101      	movs	r1, #1
    1180:	4b01      	ldr	r3, [pc, #4]	; (1188 <ext_irq_enable+0xc>)
    1182:	4798      	blx	r3
}
    1184:	bd10      	pop	{r4, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00001c9d 	.word	0x00001c9d

0000118c <ext_irq_disable>:
{
    118c:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, false);
    118e:	2100      	movs	r1, #0
    1190:	4b01      	ldr	r3, [pc, #4]	; (1198 <ext_irq_disable+0xc>)
    1192:	4798      	blx	r3
}
    1194:	bd10      	pop	{r4, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	00001c9d 	.word	0x00001c9d

0000119c <flash_ready>:
    119c:	b510      	push	{r4, lr}
    119e:	6943      	ldr	r3, [r0, #20]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d000      	beq.n	11a6 <flash_ready+0xa>
    11a4:	4798      	blx	r3
    11a6:	bd10      	pop	{r4, pc}

000011a8 <flash_error>:
    11a8:	b510      	push	{r4, lr}
    11aa:	6983      	ldr	r3, [r0, #24]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d000      	beq.n	11b2 <flash_error+0xa>
    11b0:	4798      	blx	r3
    11b2:	bd10      	pop	{r4, pc}

000011b4 <flash_is_address_aligned>:
    11b4:	b570      	push	{r4, r5, r6, lr}
    11b6:	0004      	movs	r4, r0
    11b8:	000d      	movs	r5, r1
    11ba:	1e43      	subs	r3, r0, #1
    11bc:	4198      	sbcs	r0, r3
    11be:	b2c0      	uxtb	r0, r0
    11c0:	2218      	movs	r2, #24
    11c2:	32ff      	adds	r2, #255	; 0xff
    11c4:	4906      	ldr	r1, [pc, #24]	; (11e0 <flash_is_address_aligned+0x2c>)
    11c6:	4b07      	ldr	r3, [pc, #28]	; (11e4 <flash_is_address_aligned+0x30>)
    11c8:	4798      	blx	r3
    11ca:	0020      	movs	r0, r4
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <flash_is_address_aligned+0x34>)
    11ce:	4798      	blx	r3
    11d0:	3801      	subs	r0, #1
    11d2:	4205      	tst	r5, r0
    11d4:	d101      	bne.n	11da <flash_is_address_aligned+0x26>
    11d6:	2000      	movs	r0, #0
    11d8:	bd70      	pop	{r4, r5, r6, pc}
    11da:	200e      	movs	r0, #14
    11dc:	4240      	negs	r0, r0
    11de:	e7fb      	b.n	11d8 <flash_is_address_aligned+0x24>
    11e0:	0000303c 	.word	0x0000303c
    11e4:	00001985 	.word	0x00001985
    11e8:	00001efd 	.word	0x00001efd

000011ec <flash_init>:
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	0005      	movs	r5, r0
    11f0:	000c      	movs	r4, r1
    11f2:	2800      	cmp	r0, #0
    11f4:	d012      	beq.n	121c <flash_init+0x30>
    11f6:	0008      	movs	r0, r1
    11f8:	1e43      	subs	r3, r0, #1
    11fa:	4198      	sbcs	r0, r3
    11fc:	b2c0      	uxtb	r0, r0
    11fe:	2238      	movs	r2, #56	; 0x38
    1200:	4907      	ldr	r1, [pc, #28]	; (1220 <flash_init+0x34>)
    1202:	4b08      	ldr	r3, [pc, #32]	; (1224 <flash_init+0x38>)
    1204:	4798      	blx	r3
    1206:	0021      	movs	r1, r4
    1208:	0028      	movs	r0, r5
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <flash_init+0x3c>)
    120c:	4798      	blx	r3
    120e:	2800      	cmp	r0, #0
    1210:	d103      	bne.n	121a <flash_init+0x2e>
    1212:	4b06      	ldr	r3, [pc, #24]	; (122c <flash_init+0x40>)
    1214:	602b      	str	r3, [r5, #0]
    1216:	4b06      	ldr	r3, [pc, #24]	; (1230 <flash_init+0x44>)
    1218:	606b      	str	r3, [r5, #4]
    121a:	bd70      	pop	{r4, r5, r6, pc}
    121c:	2000      	movs	r0, #0
    121e:	e7ee      	b.n	11fe <flash_init+0x12>
    1220:	0000303c 	.word	0x0000303c
    1224:	00001985 	.word	0x00001985
    1228:	00001e9d 	.word	0x00001e9d
    122c:	0000119d 	.word	0x0000119d
    1230:	000011a9 	.word	0x000011a9

00001234 <flash_read>:
    1234:	b5f0      	push	{r4, r5, r6, r7, lr}
    1236:	46ce      	mov	lr, r9
    1238:	b500      	push	{lr}
    123a:	b082      	sub	sp, #8
    123c:	0004      	movs	r4, r0
    123e:	000f      	movs	r7, r1
    1240:	0016      	movs	r6, r2
    1242:	001d      	movs	r5, r3
    1244:	2800      	cmp	r0, #0
    1246:	d018      	beq.n	127a <flash_read+0x46>
    1248:	2a00      	cmp	r2, #0
    124a:	d035      	beq.n	12b8 <flash_read+0x84>
    124c:	2001      	movs	r0, #1
    124e:	2b00      	cmp	r3, #0
    1250:	d114      	bne.n	127c <flash_read+0x48>
    1252:	2256      	movs	r2, #86	; 0x56
    1254:	491c      	ldr	r1, [pc, #112]	; (12c8 <flash_read+0x94>)
    1256:	2000      	movs	r0, #0
    1258:	4b1c      	ldr	r3, [pc, #112]	; (12cc <flash_read+0x98>)
    125a:	4798      	blx	r3
    125c:	9401      	str	r4, [sp, #4]
    125e:	0020      	movs	r0, r4
    1260:	4b1b      	ldr	r3, [pc, #108]	; (12d0 <flash_read+0x9c>)
    1262:	4798      	blx	r3
    1264:	4681      	mov	r9, r0
    1266:	0020      	movs	r0, r4
    1268:	4b1a      	ldr	r3, [pc, #104]	; (12d4 <flash_read+0xa0>)
    126a:	4798      	blx	r3
    126c:	464b      	mov	r3, r9
    126e:	4358      	muls	r0, r3
    1270:	4287      	cmp	r7, r0
    1272:	d916      	bls.n	12a2 <flash_read+0x6e>
    1274:	200e      	movs	r0, #14
    1276:	4240      	negs	r0, r0
    1278:	e01a      	b.n	12b0 <flash_read+0x7c>
    127a:	2000      	movs	r0, #0
    127c:	2256      	movs	r2, #86	; 0x56
    127e:	4912      	ldr	r1, [pc, #72]	; (12c8 <flash_read+0x94>)
    1280:	4b12      	ldr	r3, [pc, #72]	; (12cc <flash_read+0x98>)
    1282:	4798      	blx	r3
    1284:	9401      	str	r4, [sp, #4]
    1286:	0020      	movs	r0, r4
    1288:	4b11      	ldr	r3, [pc, #68]	; (12d0 <flash_read+0x9c>)
    128a:	4798      	blx	r3
    128c:	4681      	mov	r9, r0
    128e:	0020      	movs	r0, r4
    1290:	4b10      	ldr	r3, [pc, #64]	; (12d4 <flash_read+0xa0>)
    1292:	4798      	blx	r3
    1294:	464b      	mov	r3, r9
    1296:	4358      	muls	r0, r3
    1298:	42b8      	cmp	r0, r7
    129a:	d30f      	bcc.n	12bc <flash_read+0x88>
    129c:	19eb      	adds	r3, r5, r7
    129e:	4298      	cmp	r0, r3
    12a0:	d30f      	bcc.n	12c2 <flash_read+0x8e>
    12a2:	002b      	movs	r3, r5
    12a4:	0032      	movs	r2, r6
    12a6:	0039      	movs	r1, r7
    12a8:	9801      	ldr	r0, [sp, #4]
    12aa:	4c0b      	ldr	r4, [pc, #44]	; (12d8 <flash_read+0xa4>)
    12ac:	47a0      	blx	r4
    12ae:	2000      	movs	r0, #0
    12b0:	b002      	add	sp, #8
    12b2:	bc04      	pop	{r2}
    12b4:	4691      	mov	r9, r2
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b8:	2000      	movs	r0, #0
    12ba:	e7df      	b.n	127c <flash_read+0x48>
    12bc:	200e      	movs	r0, #14
    12be:	4240      	negs	r0, r0
    12c0:	e7f6      	b.n	12b0 <flash_read+0x7c>
    12c2:	200e      	movs	r0, #14
    12c4:	4240      	negs	r0, r0
    12c6:	e7f3      	b.n	12b0 <flash_read+0x7c>
    12c8:	0000303c 	.word	0x0000303c
    12cc:	00001985 	.word	0x00001985
    12d0:	00001efd 	.word	0x00001efd
    12d4:	00001f01 	.word	0x00001f01
    12d8:	00001f07 	.word	0x00001f07

000012dc <flash_write>:
    12dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12de:	46c6      	mov	lr, r8
    12e0:	b500      	push	{lr}
    12e2:	b082      	sub	sp, #8
    12e4:	0004      	movs	r4, r0
    12e6:	000d      	movs	r5, r1
    12e8:	0017      	movs	r7, r2
    12ea:	001e      	movs	r6, r3
    12ec:	2800      	cmp	r0, #0
    12ee:	d018      	beq.n	1322 <flash_write+0x46>
    12f0:	2a00      	cmp	r2, #0
    12f2:	d03c      	beq.n	136e <flash_write+0x92>
    12f4:	2001      	movs	r0, #1
    12f6:	2b00      	cmp	r3, #0
    12f8:	d114      	bne.n	1324 <flash_write+0x48>
    12fa:	226a      	movs	r2, #106	; 0x6a
    12fc:	4921      	ldr	r1, [pc, #132]	; (1384 <flash_write+0xa8>)
    12fe:	2000      	movs	r0, #0
    1300:	4b21      	ldr	r3, [pc, #132]	; (1388 <flash_write+0xac>)
    1302:	4798      	blx	r3
    1304:	9401      	str	r4, [sp, #4]
    1306:	0020      	movs	r0, r4
    1308:	4b20      	ldr	r3, [pc, #128]	; (138c <flash_write+0xb0>)
    130a:	4798      	blx	r3
    130c:	4680      	mov	r8, r0
    130e:	0020      	movs	r0, r4
    1310:	4b1f      	ldr	r3, [pc, #124]	; (1390 <flash_write+0xb4>)
    1312:	4798      	blx	r3
    1314:	4643      	mov	r3, r8
    1316:	4358      	muls	r0, r3
    1318:	4285      	cmp	r5, r0
    131a:	d916      	bls.n	134a <flash_write+0x6e>
    131c:	200e      	movs	r0, #14
    131e:	4240      	negs	r0, r0
    1320:	e021      	b.n	1366 <flash_write+0x8a>
    1322:	2000      	movs	r0, #0
    1324:	226a      	movs	r2, #106	; 0x6a
    1326:	4917      	ldr	r1, [pc, #92]	; (1384 <flash_write+0xa8>)
    1328:	4b17      	ldr	r3, [pc, #92]	; (1388 <flash_write+0xac>)
    132a:	4798      	blx	r3
    132c:	9401      	str	r4, [sp, #4]
    132e:	0020      	movs	r0, r4
    1330:	4b16      	ldr	r3, [pc, #88]	; (138c <flash_write+0xb0>)
    1332:	4798      	blx	r3
    1334:	4680      	mov	r8, r0
    1336:	0020      	movs	r0, r4
    1338:	4b15      	ldr	r3, [pc, #84]	; (1390 <flash_write+0xb4>)
    133a:	4798      	blx	r3
    133c:	4643      	mov	r3, r8
    133e:	4358      	muls	r0, r3
    1340:	42a8      	cmp	r0, r5
    1342:	d316      	bcc.n	1372 <flash_write+0x96>
    1344:	1973      	adds	r3, r6, r5
    1346:	4298      	cmp	r0, r3
    1348:	d316      	bcc.n	1378 <flash_write+0x9c>
    134a:	0029      	movs	r1, r5
    134c:	9c01      	ldr	r4, [sp, #4]
    134e:	0020      	movs	r0, r4
    1350:	4b10      	ldr	r3, [pc, #64]	; (1394 <flash_write+0xb8>)
    1352:	4798      	blx	r3
    1354:	2800      	cmp	r0, #0
    1356:	d112      	bne.n	137e <flash_write+0xa2>
    1358:	0033      	movs	r3, r6
    135a:	003a      	movs	r2, r7
    135c:	0029      	movs	r1, r5
    135e:	0020      	movs	r0, r4
    1360:	4c0d      	ldr	r4, [pc, #52]	; (1398 <flash_write+0xbc>)
    1362:	47a0      	blx	r4
    1364:	2000      	movs	r0, #0
    1366:	b002      	add	sp, #8
    1368:	bc04      	pop	{r2}
    136a:	4690      	mov	r8, r2
    136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    136e:	2000      	movs	r0, #0
    1370:	e7d8      	b.n	1324 <flash_write+0x48>
    1372:	200e      	movs	r0, #14
    1374:	4240      	negs	r0, r0
    1376:	e7f6      	b.n	1366 <flash_write+0x8a>
    1378:	200e      	movs	r0, #14
    137a:	4240      	negs	r0, r0
    137c:	e7f3      	b.n	1366 <flash_write+0x8a>
    137e:	2011      	movs	r0, #17
    1380:	4240      	negs	r0, r0
    1382:	e7f0      	b.n	1366 <flash_write+0x8a>
    1384:	0000303c 	.word	0x0000303c
    1388:	00001985 	.word	0x00001985
    138c:	00001efd 	.word	0x00001efd
    1390:	00001f01 	.word	0x00001f01
    1394:	00002141 	.word	0x00002141
    1398:	00001f59 	.word	0x00001f59

0000139c <flash_erase>:
    139c:	b5f0      	push	{r4, r5, r6, r7, lr}
    139e:	b083      	sub	sp, #12
    13a0:	0004      	movs	r4, r0
    13a2:	000d      	movs	r5, r1
    13a4:	0016      	movs	r6, r2
    13a6:	2800      	cmp	r0, #0
    13a8:	d017      	beq.n	13da <flash_erase+0x3e>
    13aa:	2001      	movs	r0, #1
    13ac:	2a00      	cmp	r2, #0
    13ae:	d115      	bne.n	13dc <flash_erase+0x40>
    13b0:	229a      	movs	r2, #154	; 0x9a
    13b2:	491f      	ldr	r1, [pc, #124]	; (1430 <flash_erase+0x94>)
    13b4:	2000      	movs	r0, #0
    13b6:	4b1f      	ldr	r3, [pc, #124]	; (1434 <flash_erase+0x98>)
    13b8:	4798      	blx	r3
    13ba:	9401      	str	r4, [sp, #4]
    13bc:	0020      	movs	r0, r4
    13be:	4b1e      	ldr	r3, [pc, #120]	; (1438 <flash_erase+0x9c>)
    13c0:	4798      	blx	r3
    13c2:	9000      	str	r0, [sp, #0]
    13c4:	0020      	movs	r0, r4
    13c6:	4b1d      	ldr	r3, [pc, #116]	; (143c <flash_erase+0xa0>)
    13c8:	4798      	blx	r3
    13ca:	0007      	movs	r7, r0
    13cc:	0029      	movs	r1, r5
    13ce:	0020      	movs	r0, r4
    13d0:	4b1b      	ldr	r3, [pc, #108]	; (1440 <flash_erase+0xa4>)
    13d2:	4798      	blx	r3
    13d4:	2800      	cmp	r0, #0
    13d6:	d016      	beq.n	1406 <flash_erase+0x6a>
    13d8:	e022      	b.n	1420 <flash_erase+0x84>
    13da:	2000      	movs	r0, #0
    13dc:	229a      	movs	r2, #154	; 0x9a
    13de:	4914      	ldr	r1, [pc, #80]	; (1430 <flash_erase+0x94>)
    13e0:	4b14      	ldr	r3, [pc, #80]	; (1434 <flash_erase+0x98>)
    13e2:	4798      	blx	r3
    13e4:	9401      	str	r4, [sp, #4]
    13e6:	0020      	movs	r0, r4
    13e8:	4b13      	ldr	r3, [pc, #76]	; (1438 <flash_erase+0x9c>)
    13ea:	4798      	blx	r3
    13ec:	9000      	str	r0, [sp, #0]
    13ee:	0020      	movs	r0, r4
    13f0:	4b12      	ldr	r3, [pc, #72]	; (143c <flash_erase+0xa0>)
    13f2:	4798      	blx	r3
    13f4:	0007      	movs	r7, r0
    13f6:	0029      	movs	r1, r5
    13f8:	0020      	movs	r0, r4
    13fa:	4b11      	ldr	r3, [pc, #68]	; (1440 <flash_erase+0xa4>)
    13fc:	4798      	blx	r3
    13fe:	2800      	cmp	r0, #0
    1400:	d10e      	bne.n	1420 <flash_erase+0x84>
    1402:	42be      	cmp	r6, r7
    1404:	d80e      	bhi.n	1424 <flash_erase+0x88>
    1406:	9900      	ldr	r1, [sp, #0]
    1408:	0028      	movs	r0, r5
    140a:	4b0e      	ldr	r3, [pc, #56]	; (1444 <flash_erase+0xa8>)
    140c:	4798      	blx	r3
    140e:	1980      	adds	r0, r0, r6
    1410:	42b8      	cmp	r0, r7
    1412:	d80a      	bhi.n	142a <flash_erase+0x8e>
    1414:	0032      	movs	r2, r6
    1416:	0029      	movs	r1, r5
    1418:	9801      	ldr	r0, [sp, #4]
    141a:	4b0b      	ldr	r3, [pc, #44]	; (1448 <flash_erase+0xac>)
    141c:	4798      	blx	r3
    141e:	2000      	movs	r0, #0
    1420:	b003      	add	sp, #12
    1422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1424:	200d      	movs	r0, #13
    1426:	4240      	negs	r0, r0
    1428:	e7fa      	b.n	1420 <flash_erase+0x84>
    142a:	200d      	movs	r0, #13
    142c:	4240      	negs	r0, r0
    142e:	e7f7      	b.n	1420 <flash_erase+0x84>
    1430:	0000303c 	.word	0x0000303c
    1434:	00001985 	.word	0x00001985
    1438:	00001efd 	.word	0x00001efd
    143c:	00001f01 	.word	0x00001f01
    1440:	000011b5 	.word	0x000011b5
    1444:	00002e25 	.word	0x00002e25
    1448:	00002075 	.word	0x00002075

0000144c <flash_get_page_size>:
    144c:	b510      	push	{r4, lr}
    144e:	0004      	movs	r4, r0
    1450:	1e43      	subs	r3, r0, #1
    1452:	4198      	sbcs	r0, r3
    1454:	b2c0      	uxtb	r0, r0
    1456:	22f7      	movs	r2, #247	; 0xf7
    1458:	4903      	ldr	r1, [pc, #12]	; (1468 <flash_get_page_size+0x1c>)
    145a:	4b04      	ldr	r3, [pc, #16]	; (146c <flash_get_page_size+0x20>)
    145c:	4798      	blx	r3
    145e:	0020      	movs	r0, r4
    1460:	4b03      	ldr	r3, [pc, #12]	; (1470 <flash_get_page_size+0x24>)
    1462:	4798      	blx	r3
    1464:	bd10      	pop	{r4, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	0000303c 	.word	0x0000303c
    146c:	00001985 	.word	0x00001985
    1470:	00001efd 	.word	0x00001efd

00001474 <io_write>:
    1474:	b570      	push	{r4, r5, r6, lr}
    1476:	0006      	movs	r6, r0
    1478:	000c      	movs	r4, r1
    147a:	0015      	movs	r5, r2
    147c:	2800      	cmp	r0, #0
    147e:	d00d      	beq.n	149c <io_write+0x28>
    1480:	0008      	movs	r0, r1
    1482:	1e43      	subs	r3, r0, #1
    1484:	4198      	sbcs	r0, r3
    1486:	b2c0      	uxtb	r0, r0
    1488:	2234      	movs	r2, #52	; 0x34
    148a:	4905      	ldr	r1, [pc, #20]	; (14a0 <io_write+0x2c>)
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <io_write+0x30>)
    148e:	4798      	blx	r3
    1490:	6833      	ldr	r3, [r6, #0]
    1492:	002a      	movs	r2, r5
    1494:	0021      	movs	r1, r4
    1496:	0030      	movs	r0, r6
    1498:	4798      	blx	r3
    149a:	bd70      	pop	{r4, r5, r6, pc}
    149c:	2000      	movs	r0, #0
    149e:	e7f3      	b.n	1488 <io_write+0x14>
    14a0:	00003054 	.word	0x00003054
    14a4:	00001985 	.word	0x00001985

000014a8 <io_read>:
    14a8:	b570      	push	{r4, r5, r6, lr}
    14aa:	0006      	movs	r6, r0
    14ac:	000c      	movs	r4, r1
    14ae:	0015      	movs	r5, r2
    14b0:	2800      	cmp	r0, #0
    14b2:	d00d      	beq.n	14d0 <io_read+0x28>
    14b4:	0008      	movs	r0, r1
    14b6:	1e43      	subs	r3, r0, #1
    14b8:	4198      	sbcs	r0, r3
    14ba:	b2c0      	uxtb	r0, r0
    14bc:	223d      	movs	r2, #61	; 0x3d
    14be:	4905      	ldr	r1, [pc, #20]	; (14d4 <io_read+0x2c>)
    14c0:	4b05      	ldr	r3, [pc, #20]	; (14d8 <io_read+0x30>)
    14c2:	4798      	blx	r3
    14c4:	6873      	ldr	r3, [r6, #4]
    14c6:	002a      	movs	r2, r5
    14c8:	0021      	movs	r1, r4
    14ca:	0030      	movs	r0, r6
    14cc:	4798      	blx	r3
    14ce:	bd70      	pop	{r4, r5, r6, pc}
    14d0:	2000      	movs	r0, #0
    14d2:	e7f3      	b.n	14bc <io_read+0x14>
    14d4:	00003054 	.word	0x00003054
    14d8:	00001985 	.word	0x00001985

000014dc <pwm_period_expired>:
    14dc:	b510      	push	{r4, lr}
    14de:	6943      	ldr	r3, [r0, #20]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d000      	beq.n	14e6 <pwm_period_expired+0xa>
    14e4:	4798      	blx	r3
    14e6:	bd10      	pop	{r4, pc}

000014e8 <pwm_detect_fault>:
    14e8:	b510      	push	{r4, lr}
    14ea:	6983      	ldr	r3, [r0, #24]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d000      	beq.n	14f2 <pwm_detect_fault+0xa>
    14f0:	4798      	blx	r3
    14f2:	bd10      	pop	{r4, pc}

000014f4 <pwm_init>:
    14f4:	b570      	push	{r4, r5, r6, lr}
    14f6:	0005      	movs	r5, r0
    14f8:	000c      	movs	r4, r1
    14fa:	2800      	cmp	r0, #0
    14fc:	d011      	beq.n	1522 <pwm_init+0x2e>
    14fe:	0008      	movs	r0, r1
    1500:	1e43      	subs	r3, r0, #1
    1502:	4198      	sbcs	r0, r3
    1504:	b2c0      	uxtb	r0, r0
    1506:	2233      	movs	r2, #51	; 0x33
    1508:	4907      	ldr	r1, [pc, #28]	; (1528 <pwm_init+0x34>)
    150a:	4b08      	ldr	r3, [pc, #32]	; (152c <pwm_init+0x38>)
    150c:	4798      	blx	r3
    150e:	0021      	movs	r1, r4
    1510:	0028      	movs	r0, r5
    1512:	4b07      	ldr	r3, [pc, #28]	; (1530 <pwm_init+0x3c>)
    1514:	4798      	blx	r3
    1516:	4b07      	ldr	r3, [pc, #28]	; (1534 <pwm_init+0x40>)
    1518:	602b      	str	r3, [r5, #0]
    151a:	4b07      	ldr	r3, [pc, #28]	; (1538 <pwm_init+0x44>)
    151c:	606b      	str	r3, [r5, #4]
    151e:	2000      	movs	r0, #0
    1520:	bd70      	pop	{r4, r5, r6, pc}
    1522:	2000      	movs	r0, #0
    1524:	e7ef      	b.n	1506 <pwm_init+0x12>
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	00003068 	.word	0x00003068
    152c:	00001985 	.word	0x00001985
    1530:	00002811 	.word	0x00002811
    1534:	000014dd 	.word	0x000014dd
    1538:	000014e9 	.word	0x000014e9

0000153c <sleep>:
    153c:	b510      	push	{r4, lr}
    153e:	4b05      	ldr	r3, [pc, #20]	; (1554 <sleep+0x18>)
    1540:	4798      	blx	r3
    1542:	2800      	cmp	r0, #0
    1544:	d103      	bne.n	154e <sleep+0x12>
    1546:	4b04      	ldr	r3, [pc, #16]	; (1558 <sleep+0x1c>)
    1548:	4798      	blx	r3
    154a:	2000      	movs	r0, #0
    154c:	bd10      	pop	{r4, pc}
    154e:	200d      	movs	r0, #13
    1550:	4240      	negs	r0, r0
    1552:	e7fb      	b.n	154c <sleep+0x10>
    1554:	00002189 	.word	0x00002189
    1558:	00001b35 	.word	0x00001b35

0000155c <spi_m_sync_init>:
    155c:	b570      	push	{r4, r5, r6, lr}
    155e:	0004      	movs	r4, r0
    1560:	000d      	movs	r5, r1
    1562:	2800      	cmp	r0, #0
    1564:	d016      	beq.n	1594 <spi_m_sync_init+0x38>
    1566:	0008      	movs	r0, r1
    1568:	1e43      	subs	r3, r0, #1
    156a:	4198      	sbcs	r0, r3
    156c:	b2c0      	uxtb	r0, r0
    156e:	2240      	movs	r2, #64	; 0x40
    1570:	4909      	ldr	r1, [pc, #36]	; (1598 <spi_m_sync_init+0x3c>)
    1572:	4b0a      	ldr	r3, [pc, #40]	; (159c <spi_m_sync_init+0x40>)
    1574:	4798      	blx	r3
    1576:	6065      	str	r5, [r4, #4]
    1578:	1d20      	adds	r0, r4, #4
    157a:	0029      	movs	r1, r5
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <spi_m_sync_init+0x44>)
    157e:	4798      	blx	r3
    1580:	2800      	cmp	r0, #0
    1582:	db06      	blt.n	1592 <spi_m_sync_init+0x36>
    1584:	4b07      	ldr	r3, [pc, #28]	; (15a4 <spi_m_sync_init+0x48>)
    1586:	82a3      	strh	r3, [r4, #20]
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <spi_m_sync_init+0x4c>)
    158a:	6123      	str	r3, [r4, #16]
    158c:	4b07      	ldr	r3, [pc, #28]	; (15ac <spi_m_sync_init+0x50>)
    158e:	60e3      	str	r3, [r4, #12]
    1590:	2000      	movs	r0, #0
    1592:	bd70      	pop	{r4, r5, r6, pc}
    1594:	2000      	movs	r0, #0
    1596:	e7ea      	b.n	156e <spi_m_sync_init+0x12>
    1598:	00003080 	.word	0x00003080
    159c:	00001985 	.word	0x00001985
    15a0:	00002361 	.word	0x00002361
    15a4:	ffff8000 	.word	0xffff8000
    15a8:	000016b5 	.word	0x000016b5
    15ac:	00001679 	.word	0x00001679

000015b0 <spi_m_sync_enable>:
    15b0:	b510      	push	{r4, lr}
    15b2:	0004      	movs	r4, r0
    15b4:	1e43      	subs	r3, r0, #1
    15b6:	4198      	sbcs	r0, r3
    15b8:	b2c0      	uxtb	r0, r0
    15ba:	2257      	movs	r2, #87	; 0x57
    15bc:	4903      	ldr	r1, [pc, #12]	; (15cc <spi_m_sync_enable+0x1c>)
    15be:	4b04      	ldr	r3, [pc, #16]	; (15d0 <spi_m_sync_enable+0x20>)
    15c0:	4798      	blx	r3
    15c2:	1d20      	adds	r0, r4, #4
    15c4:	4b03      	ldr	r3, [pc, #12]	; (15d4 <spi_m_sync_enable+0x24>)
    15c6:	4798      	blx	r3
    15c8:	bd10      	pop	{r4, pc}
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	00003080 	.word	0x00003080
    15d0:	00001985 	.word	0x00001985
    15d4:	00002559 	.word	0x00002559

000015d8 <spi_m_sync_set_baudrate>:
    15d8:	b570      	push	{r4, r5, r6, lr}
    15da:	0004      	movs	r4, r0
    15dc:	000d      	movs	r5, r1
    15de:	1e43      	subs	r3, r0, #1
    15e0:	4198      	sbcs	r0, r3
    15e2:	b2c0      	uxtb	r0, r0
    15e4:	2263      	movs	r2, #99	; 0x63
    15e6:	4904      	ldr	r1, [pc, #16]	; (15f8 <spi_m_sync_set_baudrate+0x20>)
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <spi_m_sync_set_baudrate+0x24>)
    15ea:	4798      	blx	r3
    15ec:	1d20      	adds	r0, r4, #4
    15ee:	0029      	movs	r1, r5
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <spi_m_sync_set_baudrate+0x28>)
    15f2:	4798      	blx	r3
    15f4:	bd70      	pop	{r4, r5, r6, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00003080 	.word	0x00003080
    15fc:	00001985 	.word	0x00001985
    1600:	00002589 	.word	0x00002589

00001604 <spi_m_sync_set_char_size>:
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	0004      	movs	r4, r0
    1608:	000d      	movs	r5, r1
    160a:	1e43      	subs	r3, r0, #1
    160c:	4198      	sbcs	r0, r3
    160e:	b2c0      	uxtb	r0, r0
    1610:	226f      	movs	r2, #111	; 0x6f
    1612:	4904      	ldr	r1, [pc, #16]	; (1624 <spi_m_sync_set_char_size+0x20>)
    1614:	4b04      	ldr	r3, [pc, #16]	; (1628 <spi_m_sync_set_char_size+0x24>)
    1616:	4798      	blx	r3
    1618:	1d20      	adds	r0, r4, #4
    161a:	0029      	movs	r1, r5
    161c:	4b03      	ldr	r3, [pc, #12]	; (162c <spi_m_sync_set_char_size+0x28>)
    161e:	4798      	blx	r3
    1620:	bd70      	pop	{r4, r5, r6, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	00003080 	.word	0x00003080
    1628:	00001985 	.word	0x00001985
    162c:	000025c9 	.word	0x000025c9

00001630 <spi_m_sync_transfer>:
    1630:	b530      	push	{r4, r5, lr}
    1632:	b087      	sub	sp, #28
    1634:	0004      	movs	r4, r0
    1636:	000d      	movs	r5, r1
    1638:	2800      	cmp	r0, #0
    163a:	d014      	beq.n	1666 <spi_m_sync_transfer+0x36>
    163c:	0008      	movs	r0, r1
    163e:	1e43      	subs	r3, r0, #1
    1640:	4198      	sbcs	r0, r3
    1642:	b2c0      	uxtb	r0, r0
    1644:	22b3      	movs	r2, #179	; 0xb3
    1646:	4909      	ldr	r1, [pc, #36]	; (166c <spi_m_sync_transfer+0x3c>)
    1648:	4b09      	ldr	r3, [pc, #36]	; (1670 <spi_m_sync_transfer+0x40>)
    164a:	4798      	blx	r3
    164c:	682b      	ldr	r3, [r5, #0]
    164e:	9303      	str	r3, [sp, #12]
    1650:	686b      	ldr	r3, [r5, #4]
    1652:	9304      	str	r3, [sp, #16]
    1654:	68ab      	ldr	r3, [r5, #8]
    1656:	9301      	str	r3, [sp, #4]
    1658:	9305      	str	r3, [sp, #20]
    165a:	1d20      	adds	r0, r4, #4
    165c:	a903      	add	r1, sp, #12
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <spi_m_sync_transfer+0x44>)
    1660:	4798      	blx	r3
    1662:	b007      	add	sp, #28
    1664:	bd30      	pop	{r4, r5, pc}
    1666:	2000      	movs	r0, #0
    1668:	e7ec      	b.n	1644 <spi_m_sync_transfer+0x14>
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	00003080 	.word	0x00003080
    1670:	00001985 	.word	0x00001985
    1674:	00002605 	.word	0x00002605

00001678 <_spi_m_sync_io_write>:
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	b084      	sub	sp, #16
    167c:	0004      	movs	r4, r0
    167e:	000e      	movs	r6, r1
    1680:	0015      	movs	r5, r2
    1682:	1e43      	subs	r3, r0, #1
    1684:	4198      	sbcs	r0, r3
    1686:	b2c0      	uxtb	r0, r0
    1688:	22a3      	movs	r2, #163	; 0xa3
    168a:	4907      	ldr	r1, [pc, #28]	; (16a8 <_spi_m_sync_io_write+0x30>)
    168c:	4b07      	ldr	r3, [pc, #28]	; (16ac <_spi_m_sync_io_write+0x34>)
    168e:	4798      	blx	r3
    1690:	2300      	movs	r3, #0
    1692:	9302      	str	r3, [sp, #8]
    1694:	9601      	str	r6, [sp, #4]
    1696:	9503      	str	r5, [sp, #12]
    1698:	0020      	movs	r0, r4
    169a:	380c      	subs	r0, #12
    169c:	a901      	add	r1, sp, #4
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <_spi_m_sync_io_write+0x38>)
    16a0:	4798      	blx	r3
    16a2:	b004      	add	sp, #16
    16a4:	bd70      	pop	{r4, r5, r6, pc}
    16a6:	46c0      	nop			; (mov r8, r8)
    16a8:	00003080 	.word	0x00003080
    16ac:	00001985 	.word	0x00001985
    16b0:	00001631 	.word	0x00001631

000016b4 <_spi_m_sync_io_read>:
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	0004      	movs	r4, r0
    16ba:	000e      	movs	r6, r1
    16bc:	0015      	movs	r5, r2
    16be:	1e43      	subs	r3, r0, #1
    16c0:	4198      	sbcs	r0, r3
    16c2:	b2c0      	uxtb	r0, r0
    16c4:	2287      	movs	r2, #135	; 0x87
    16c6:	4907      	ldr	r1, [pc, #28]	; (16e4 <_spi_m_sync_io_read+0x30>)
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <_spi_m_sync_io_read+0x34>)
    16ca:	4798      	blx	r3
    16cc:	9602      	str	r6, [sp, #8]
    16ce:	2300      	movs	r3, #0
    16d0:	9301      	str	r3, [sp, #4]
    16d2:	9503      	str	r5, [sp, #12]
    16d4:	0020      	movs	r0, r4
    16d6:	380c      	subs	r0, #12
    16d8:	a901      	add	r1, sp, #4
    16da:	4b04      	ldr	r3, [pc, #16]	; (16ec <_spi_m_sync_io_read+0x38>)
    16dc:	4798      	blx	r3
    16de:	b004      	add	sp, #16
    16e0:	bd70      	pop	{r4, r5, r6, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00003080 	.word	0x00003080
    16e8:	00001985 	.word	0x00001985
    16ec:	00001631 	.word	0x00001631

000016f0 <spi_m_sync_get_io_descriptor>:
    16f0:	b570      	push	{r4, r5, r6, lr}
    16f2:	0004      	movs	r4, r0
    16f4:	000d      	movs	r5, r1
    16f6:	2800      	cmp	r0, #0
    16f8:	d00b      	beq.n	1712 <spi_m_sync_get_io_descriptor+0x22>
    16fa:	0008      	movs	r0, r1
    16fc:	1e43      	subs	r3, r0, #1
    16fe:	4198      	sbcs	r0, r3
    1700:	b2c0      	uxtb	r0, r0
    1702:	22bd      	movs	r2, #189	; 0xbd
    1704:	4904      	ldr	r1, [pc, #16]	; (1718 <spi_m_sync_get_io_descriptor+0x28>)
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <spi_m_sync_get_io_descriptor+0x2c>)
    1708:	4798      	blx	r3
    170a:	340c      	adds	r4, #12
    170c:	602c      	str	r4, [r5, #0]
    170e:	2000      	movs	r0, #0
    1710:	bd70      	pop	{r4, r5, r6, pc}
    1712:	2000      	movs	r0, #0
    1714:	e7f5      	b.n	1702 <spi_m_sync_get_io_descriptor+0x12>
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	00003080 	.word	0x00003080
    171c:	00001985 	.word	0x00001985

00001720 <timer_add_timer_task>:
    1720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1722:	46ce      	mov	lr, r9
    1724:	4647      	mov	r7, r8
    1726:	b580      	push	{r7, lr}
    1728:	4681      	mov	r9, r0
    172a:	6803      	ldr	r3, [r0, #0]
    172c:	469c      	mov	ip, r3
    172e:	2b00      	cmp	r3, #0
    1730:	d005      	beq.n	173e <timer_add_timer_task+0x1e>
    1732:	688e      	ldr	r6, [r1, #8]
    1734:	001c      	movs	r4, r3
    1736:	2500      	movs	r5, #0
    1738:	2701      	movs	r7, #1
    173a:	1abf      	subs	r7, r7, r2
    173c:	e00d      	b.n	175a <timer_add_timer_task+0x3a>
    173e:	4b12      	ldr	r3, [pc, #72]	; (1788 <timer_add_timer_task+0x68>)
    1740:	4798      	blx	r3
    1742:	e018      	b.n	1776 <timer_add_timer_task+0x56>
    1744:	18fb      	adds	r3, r7, r3
    1746:	68a0      	ldr	r0, [r4, #8]
    1748:	4680      	mov	r8, r0
    174a:	4443      	add	r3, r8
    174c:	42b3      	cmp	r3, r6
    174e:	d20c      	bcs.n	176a <timer_add_timer_task+0x4a>
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	0025      	movs	r5, r4
    1754:	2b00      	cmp	r3, #0
    1756:	d00b      	beq.n	1770 <timer_add_timer_task+0x50>
    1758:	001c      	movs	r4, r3
    175a:	6863      	ldr	r3, [r4, #4]
    175c:	4293      	cmp	r3, r2
    175e:	d8f1      	bhi.n	1744 <timer_add_timer_task+0x24>
    1760:	68a0      	ldr	r0, [r4, #8]
    1762:	4680      	mov	r8, r0
    1764:	4443      	add	r3, r8
    1766:	1a9b      	subs	r3, r3, r2
    1768:	e7f0      	b.n	174c <timer_add_timer_task+0x2c>
    176a:	45a4      	cmp	ip, r4
    176c:	d007      	beq.n	177e <timer_add_timer_task+0x5e>
    176e:	002c      	movs	r4, r5
    1770:	0020      	movs	r0, r4
    1772:	4b06      	ldr	r3, [pc, #24]	; (178c <timer_add_timer_task+0x6c>)
    1774:	4798      	blx	r3
    1776:	bc0c      	pop	{r2, r3}
    1778:	4690      	mov	r8, r2
    177a:	4699      	mov	r9, r3
    177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    177e:	4648      	mov	r0, r9
    1780:	4b01      	ldr	r3, [pc, #4]	; (1788 <timer_add_timer_task+0x68>)
    1782:	4798      	blx	r3
    1784:	e7f7      	b.n	1776 <timer_add_timer_task+0x56>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	000019b1 	.word	0x000019b1
    178c:	000019dd 	.word	0x000019dd

00001790 <timer_process_counted>:
    1790:	b5f0      	push	{r4, r5, r6, r7, lr}
    1792:	46c6      	mov	lr, r8
    1794:	b500      	push	{lr}
    1796:	b082      	sub	sp, #8
    1798:	0007      	movs	r7, r0
    179a:	6944      	ldr	r4, [r0, #20]
    179c:	6903      	ldr	r3, [r0, #16]
    179e:	3301      	adds	r3, #1
    17a0:	4698      	mov	r8, r3
    17a2:	6103      	str	r3, [r0, #16]
    17a4:	7e03      	ldrb	r3, [r0, #24]
    17a6:	07db      	lsls	r3, r3, #31
    17a8:	d411      	bmi.n	17ce <timer_process_counted+0x3e>
    17aa:	7e03      	ldrb	r3, [r0, #24]
    17ac:	079b      	lsls	r3, r3, #30
    17ae:	d40e      	bmi.n	17ce <timer_process_counted+0x3e>
    17b0:	2c00      	cmp	r4, #0
    17b2:	d010      	beq.n	17d6 <timer_process_counted+0x46>
    17b4:	4643      	mov	r3, r8
    17b6:	6862      	ldr	r2, [r4, #4]
    17b8:	1a9b      	subs	r3, r3, r2
    17ba:	68a2      	ldr	r2, [r4, #8]
    17bc:	4293      	cmp	r3, r2
    17be:	d30a      	bcc.n	17d6 <timer_process_counted+0x46>
    17c0:	2314      	movs	r3, #20
    17c2:	469c      	mov	ip, r3
    17c4:	4484      	add	ip, r0
    17c6:	4663      	mov	r3, ip
    17c8:	9301      	str	r3, [sp, #4]
    17ca:	4e12      	ldr	r6, [pc, #72]	; (1814 <timer_process_counted+0x84>)
    17cc:	e014      	b.n	17f8 <timer_process_counted+0x68>
    17ce:	7e3b      	ldrb	r3, [r7, #24]
    17d0:	2202      	movs	r2, #2
    17d2:	4313      	orrs	r3, r2
    17d4:	763b      	strb	r3, [r7, #24]
    17d6:	b002      	add	sp, #8
    17d8:	bc04      	pop	{r2}
    17da:	4690      	mov	r8, r2
    17dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17de:	697d      	ldr	r5, [r7, #20]
    17e0:	68e3      	ldr	r3, [r4, #12]
    17e2:	0020      	movs	r0, r4
    17e4:	4798      	blx	r3
    17e6:	2d00      	cmp	r5, #0
    17e8:	d0f5      	beq.n	17d6 <timer_process_counted+0x46>
    17ea:	002c      	movs	r4, r5
    17ec:	4643      	mov	r3, r8
    17ee:	686a      	ldr	r2, [r5, #4]
    17f0:	1a9b      	subs	r3, r3, r2
    17f2:	68aa      	ldr	r2, [r5, #8]
    17f4:	4293      	cmp	r3, r2
    17f6:	d3ee      	bcc.n	17d6 <timer_process_counted+0x46>
    17f8:	9801      	ldr	r0, [sp, #4]
    17fa:	47b0      	blx	r6
    17fc:	7c23      	ldrb	r3, [r4, #16]
    17fe:	2b01      	cmp	r3, #1
    1800:	d1ed      	bne.n	17de <timer_process_counted+0x4e>
    1802:	4643      	mov	r3, r8
    1804:	6063      	str	r3, [r4, #4]
    1806:	4642      	mov	r2, r8
    1808:	0021      	movs	r1, r4
    180a:	9801      	ldr	r0, [sp, #4]
    180c:	4b02      	ldr	r3, [pc, #8]	; (1818 <timer_process_counted+0x88>)
    180e:	4798      	blx	r3
    1810:	e7e5      	b.n	17de <timer_process_counted+0x4e>
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	000019e5 	.word	0x000019e5
    1818:	00001721 	.word	0x00001721

0000181c <timer_init>:
    181c:	b570      	push	{r4, r5, r6, lr}
    181e:	0005      	movs	r5, r0
    1820:	000c      	movs	r4, r1
    1822:	2800      	cmp	r0, #0
    1824:	d011      	beq.n	184a <timer_init+0x2e>
    1826:	0008      	movs	r0, r1
    1828:	1e43      	subs	r3, r0, #1
    182a:	4198      	sbcs	r0, r3
    182c:	b2c0      	uxtb	r0, r0
    182e:	223b      	movs	r2, #59	; 0x3b
    1830:	4907      	ldr	r1, [pc, #28]	; (1850 <timer_init+0x34>)
    1832:	4b08      	ldr	r3, [pc, #32]	; (1854 <timer_init+0x38>)
    1834:	4798      	blx	r3
    1836:	0021      	movs	r1, r4
    1838:	0028      	movs	r0, r5
    183a:	4b07      	ldr	r3, [pc, #28]	; (1858 <timer_init+0x3c>)
    183c:	4798      	blx	r3
    183e:	2300      	movs	r3, #0
    1840:	612b      	str	r3, [r5, #16]
    1842:	4b06      	ldr	r3, [pc, #24]	; (185c <timer_init+0x40>)
    1844:	602b      	str	r3, [r5, #0]
    1846:	2000      	movs	r0, #0
    1848:	bd70      	pop	{r4, r5, r6, pc}
    184a:	2000      	movs	r0, #0
    184c:	e7ef      	b.n	182e <timer_init+0x12>
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	0000309c 	.word	0x0000309c
    1854:	00001985 	.word	0x00001985
    1858:	000021e1 	.word	0x000021e1
    185c:	00001791 	.word	0x00001791

00001860 <timer_start>:
    1860:	b510      	push	{r4, lr}
    1862:	0004      	movs	r4, r0
    1864:	1e43      	subs	r3, r0, #1
    1866:	4198      	sbcs	r0, r3
    1868:	b2c0      	uxtb	r0, r0
    186a:	2253      	movs	r2, #83	; 0x53
    186c:	4907      	ldr	r1, [pc, #28]	; (188c <timer_start+0x2c>)
    186e:	4b08      	ldr	r3, [pc, #32]	; (1890 <timer_start+0x30>)
    1870:	4798      	blx	r3
    1872:	0020      	movs	r0, r4
    1874:	4b07      	ldr	r3, [pc, #28]	; (1894 <timer_start+0x34>)
    1876:	4798      	blx	r3
    1878:	2800      	cmp	r0, #0
    187a:	d104      	bne.n	1886 <timer_start+0x26>
    187c:	0020      	movs	r0, r4
    187e:	4b06      	ldr	r3, [pc, #24]	; (1898 <timer_start+0x38>)
    1880:	4798      	blx	r3
    1882:	2000      	movs	r0, #0
    1884:	bd10      	pop	{r4, pc}
    1886:	2011      	movs	r0, #17
    1888:	4240      	negs	r0, r0
    188a:	e7fb      	b.n	1884 <timer_start+0x24>
    188c:	0000309c 	.word	0x0000309c
    1890:	00001985 	.word	0x00001985
    1894:	000022c5 	.word	0x000022c5
    1898:	0000223d 	.word	0x0000223d

0000189c <timer_stop>:
    189c:	b510      	push	{r4, lr}
    189e:	0004      	movs	r4, r0
    18a0:	1e43      	subs	r3, r0, #1
    18a2:	4198      	sbcs	r0, r3
    18a4:	b2c0      	uxtb	r0, r0
    18a6:	2261      	movs	r2, #97	; 0x61
    18a8:	4907      	ldr	r1, [pc, #28]	; (18c8 <timer_stop+0x2c>)
    18aa:	4b08      	ldr	r3, [pc, #32]	; (18cc <timer_stop+0x30>)
    18ac:	4798      	blx	r3
    18ae:	0020      	movs	r0, r4
    18b0:	4b07      	ldr	r3, [pc, #28]	; (18d0 <timer_stop+0x34>)
    18b2:	4798      	blx	r3
    18b4:	2800      	cmp	r0, #0
    18b6:	d004      	beq.n	18c2 <timer_stop+0x26>
    18b8:	0020      	movs	r0, r4
    18ba:	4b06      	ldr	r3, [pc, #24]	; (18d4 <timer_stop+0x38>)
    18bc:	4798      	blx	r3
    18be:	2000      	movs	r0, #0
    18c0:	bd10      	pop	{r4, pc}
    18c2:	2011      	movs	r0, #17
    18c4:	4240      	negs	r0, r0
    18c6:	e7fb      	b.n	18c0 <timer_stop+0x24>
    18c8:	0000309c 	.word	0x0000309c
    18cc:	00001985 	.word	0x00001985
    18d0:	000022c5 	.word	0x000022c5
    18d4:	00002291 	.word	0x00002291

000018d8 <timer_add_task>:
    18d8:	b570      	push	{r4, r5, r6, lr}
    18da:	b082      	sub	sp, #8
    18dc:	0004      	movs	r4, r0
    18de:	000d      	movs	r5, r1
    18e0:	2800      	cmp	r0, #0
    18e2:	d024      	beq.n	192e <timer_add_task+0x56>
    18e4:	0008      	movs	r0, r1
    18e6:	1e43      	subs	r3, r0, #1
    18e8:	4198      	sbcs	r0, r3
    18ea:	b2c0      	uxtb	r0, r0
    18ec:	227a      	movs	r2, #122	; 0x7a
    18ee:	491e      	ldr	r1, [pc, #120]	; (1968 <timer_add_task+0x90>)
    18f0:	4b1e      	ldr	r3, [pc, #120]	; (196c <timer_add_task+0x94>)
    18f2:	4798      	blx	r3
    18f4:	7e23      	ldrb	r3, [r4, #24]
    18f6:	2201      	movs	r2, #1
    18f8:	4313      	orrs	r3, r2
    18fa:	7623      	strb	r3, [r4, #24]
    18fc:	0026      	movs	r6, r4
    18fe:	3614      	adds	r6, #20
    1900:	0029      	movs	r1, r5
    1902:	0030      	movs	r0, r6
    1904:	4b1a      	ldr	r3, [pc, #104]	; (1970 <timer_add_task+0x98>)
    1906:	4798      	blx	r3
    1908:	2800      	cmp	r0, #0
    190a:	d112      	bne.n	1932 <timer_add_task+0x5a>
    190c:	6923      	ldr	r3, [r4, #16]
    190e:	606b      	str	r3, [r5, #4]
    1910:	6922      	ldr	r2, [r4, #16]
    1912:	0029      	movs	r1, r5
    1914:	0030      	movs	r0, r6
    1916:	4b17      	ldr	r3, [pc, #92]	; (1974 <timer_add_task+0x9c>)
    1918:	4798      	blx	r3
    191a:	7e23      	ldrb	r3, [r4, #24]
    191c:	2201      	movs	r2, #1
    191e:	4393      	bics	r3, r2
    1920:	7623      	strb	r3, [r4, #24]
    1922:	7e23      	ldrb	r3, [r4, #24]
    1924:	2000      	movs	r0, #0
    1926:	079b      	lsls	r3, r3, #30
    1928:	d40f      	bmi.n	194a <timer_add_task+0x72>
    192a:	b002      	add	sp, #8
    192c:	bd70      	pop	{r4, r5, r6, pc}
    192e:	2000      	movs	r0, #0
    1930:	e7dc      	b.n	18ec <timer_add_task+0x14>
    1932:	7e23      	ldrb	r3, [r4, #24]
    1934:	2201      	movs	r2, #1
    1936:	4393      	bics	r3, r2
    1938:	7623      	strb	r3, [r4, #24]
    193a:	327e      	adds	r2, #126	; 0x7e
    193c:	490a      	ldr	r1, [pc, #40]	; (1968 <timer_add_task+0x90>)
    193e:	2000      	movs	r0, #0
    1940:	4b0a      	ldr	r3, [pc, #40]	; (196c <timer_add_task+0x94>)
    1942:	4798      	blx	r3
    1944:	2012      	movs	r0, #18
    1946:	4240      	negs	r0, r0
    1948:	e7ef      	b.n	192a <timer_add_task+0x52>
    194a:	a801      	add	r0, sp, #4
    194c:	4b0a      	ldr	r3, [pc, #40]	; (1978 <timer_add_task+0xa0>)
    194e:	4798      	blx	r3
    1950:	7e23      	ldrb	r3, [r4, #24]
    1952:	2202      	movs	r2, #2
    1954:	4393      	bics	r3, r2
    1956:	7623      	strb	r3, [r4, #24]
    1958:	0020      	movs	r0, r4
    195a:	4b08      	ldr	r3, [pc, #32]	; (197c <timer_add_task+0xa4>)
    195c:	4798      	blx	r3
    195e:	a801      	add	r0, sp, #4
    1960:	4b07      	ldr	r3, [pc, #28]	; (1980 <timer_add_task+0xa8>)
    1962:	4798      	blx	r3
    1964:	2000      	movs	r0, #0
    1966:	e7e0      	b.n	192a <timer_add_task+0x52>
    1968:	0000309c 	.word	0x0000309c
    196c:	00001985 	.word	0x00001985
    1970:	0000198d 	.word	0x0000198d
    1974:	00001721 	.word	0x00001721
    1978:	00000f6d 	.word	0x00000f6d
    197c:	000022d5 	.word	0x000022d5
    1980:	00000f7b 	.word	0x00000f7b

00001984 <assert>:
    1984:	2800      	cmp	r0, #0
    1986:	d100      	bne.n	198a <assert+0x6>
    1988:	be00      	bkpt	0x0000
    198a:	4770      	bx	lr

0000198c <is_list_element>:
    198c:	6803      	ldr	r3, [r0, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d00a      	beq.n	19a8 <is_list_element+0x1c>
    1992:	428b      	cmp	r3, r1
    1994:	d00a      	beq.n	19ac <is_list_element+0x20>
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	2b00      	cmp	r3, #0
    199a:	d003      	beq.n	19a4 <is_list_element+0x18>
    199c:	4299      	cmp	r1, r3
    199e:	d1fa      	bne.n	1996 <is_list_element+0xa>
    19a0:	2001      	movs	r0, #1
    19a2:	e000      	b.n	19a6 <is_list_element+0x1a>
    19a4:	2000      	movs	r0, #0
    19a6:	4770      	bx	lr
    19a8:	2000      	movs	r0, #0
    19aa:	e7fc      	b.n	19a6 <is_list_element+0x1a>
    19ac:	2001      	movs	r0, #1
    19ae:	e7fa      	b.n	19a6 <is_list_element+0x1a>

000019b0 <list_insert_as_head>:
    19b0:	b570      	push	{r4, r5, r6, lr}
    19b2:	0004      	movs	r4, r0
    19b4:	000d      	movs	r5, r1
    19b6:	4b06      	ldr	r3, [pc, #24]	; (19d0 <list_insert_as_head+0x20>)
    19b8:	4798      	blx	r3
    19ba:	2301      	movs	r3, #1
    19bc:	4058      	eors	r0, r3
    19be:	b2c0      	uxtb	r0, r0
    19c0:	2239      	movs	r2, #57	; 0x39
    19c2:	4904      	ldr	r1, [pc, #16]	; (19d4 <list_insert_as_head+0x24>)
    19c4:	4b04      	ldr	r3, [pc, #16]	; (19d8 <list_insert_as_head+0x28>)
    19c6:	4798      	blx	r3
    19c8:	6823      	ldr	r3, [r4, #0]
    19ca:	602b      	str	r3, [r5, #0]
    19cc:	6025      	str	r5, [r4, #0]
    19ce:	bd70      	pop	{r4, r5, r6, pc}
    19d0:	0000198d 	.word	0x0000198d
    19d4:	000030b4 	.word	0x000030b4
    19d8:	00001985 	.word	0x00001985

000019dc <list_insert_after>:
    19dc:	6803      	ldr	r3, [r0, #0]
    19de:	600b      	str	r3, [r1, #0]
    19e0:	6001      	str	r1, [r0, #0]
    19e2:	4770      	bx	lr

000019e4 <list_remove_head>:
    19e4:	6803      	ldr	r3, [r0, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d001      	beq.n	19ee <list_remove_head+0xa>
    19ea:	681a      	ldr	r2, [r3, #0]
    19ec:	6002      	str	r2, [r0, #0]
    19ee:	0018      	movs	r0, r3
    19f0:	4770      	bx	lr

000019f2 <_adc_get_regs>:
    19f2:	2000      	movs	r0, #0
    19f4:	4770      	bx	lr
	...

000019f8 <_adc_init>:
    19f8:	b570      	push	{r4, r5, r6, lr}
    19fa:	0004      	movs	r4, r0
    19fc:	000d      	movs	r5, r1
    19fe:	4b39      	ldr	r3, [pc, #228]	; (1ae4 <_adc_init+0xec>)
    1a00:	18c0      	adds	r0, r0, r3
    1a02:	4242      	negs	r2, r0
    1a04:	4142      	adcs	r2, r0
    1a06:	b2d0      	uxtb	r0, r2
    1a08:	2294      	movs	r2, #148	; 0x94
    1a0a:	4937      	ldr	r1, [pc, #220]	; (1ae8 <_adc_init+0xf0>)
    1a0c:	4b37      	ldr	r3, [pc, #220]	; (1aec <_adc_init+0xf4>)
    1a0e:	4798      	blx	r3
    1a10:	4b37      	ldr	r3, [pc, #220]	; (1af0 <_adc_init+0xf8>)
    1a12:	681a      	ldr	r2, [r3, #0]
    1a14:	0152      	lsls	r2, r2, #5
    1a16:	23e0      	movs	r3, #224	; 0xe0
    1a18:	00db      	lsls	r3, r3, #3
    1a1a:	401a      	ands	r2, r3
    1a1c:	4b35      	ldr	r3, [pc, #212]	; (1af4 <_adc_init+0xfc>)
    1a1e:	6859      	ldr	r1, [r3, #4]
    1a20:	0149      	lsls	r1, r1, #5
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	0edb      	lsrs	r3, r3, #27
    1a26:	430b      	orrs	r3, r1
    1a28:	21ff      	movs	r1, #255	; 0xff
    1a2a:	400b      	ands	r3, r1
    1a2c:	431a      	orrs	r2, r3
    1a2e:	7e63      	ldrb	r3, [r4, #25]
    1a30:	09db      	lsrs	r3, r3, #7
    1a32:	d1fc      	bne.n	1a2e <_adc_init+0x36>
    1a34:	7823      	ldrb	r3, [r4, #0]
    1a36:	079b      	lsls	r3, r3, #30
    1a38:	d504      	bpl.n	1a44 <_adc_init+0x4c>
    1a3a:	2300      	movs	r3, #0
    1a3c:	7023      	strb	r3, [r4, #0]
    1a3e:	7e63      	ldrb	r3, [r4, #25]
    1a40:	09db      	lsrs	r3, r3, #7
    1a42:	d1fc      	bne.n	1a3e <_adc_init+0x46>
    1a44:	2301      	movs	r3, #1
    1a46:	7023      	strb	r3, [r4, #0]
    1a48:	7e63      	ldrb	r3, [r4, #25]
    1a4a:	09db      	lsrs	r3, r3, #7
    1a4c:	d1fc      	bne.n	1a48 <_adc_init+0x50>
    1a4e:	8522      	strh	r2, [r4, #40]	; 0x28
    1a50:	00ea      	lsls	r2, r5, #3
    1a52:	1b52      	subs	r2, r2, r5
    1a54:	0092      	lsls	r2, r2, #2
    1a56:	4b28      	ldr	r3, [pc, #160]	; (1af8 <_adc_init+0x100>)
    1a58:	189b      	adds	r3, r3, r2
    1a5a:	789a      	ldrb	r2, [r3, #2]
    1a5c:	7062      	strb	r2, [r4, #1]
    1a5e:	78da      	ldrb	r2, [r3, #3]
    1a60:	70a2      	strb	r2, [r4, #2]
    1a62:	791a      	ldrb	r2, [r3, #4]
    1a64:	70e2      	strb	r2, [r4, #3]
    1a66:	7c1a      	ldrb	r2, [r3, #16]
    1a68:	7522      	strb	r2, [r4, #20]
    1a6a:	8ada      	ldrh	r2, [r3, #22]
    1a6c:	84a2      	strh	r2, [r4, #36]	; 0x24
    1a6e:	8b1a      	ldrh	r2, [r3, #24]
    1a70:	84e2      	strh	r2, [r4, #38]	; 0x26
    1a72:	7e99      	ldrb	r1, [r3, #26]
    1a74:	222a      	movs	r2, #42	; 0x2a
    1a76:	54a1      	strb	r1, [r4, r2]
    1a78:	88db      	ldrh	r3, [r3, #6]
    1a7a:	80a3      	strh	r3, [r4, #4]
    1a7c:	7e63      	ldrb	r3, [r4, #25]
    1a7e:	09db      	lsrs	r3, r3, #7
    1a80:	d1fc      	bne.n	1a7c <_adc_init+0x84>
    1a82:	00eb      	lsls	r3, r5, #3
    1a84:	1b5b      	subs	r3, r3, r5
    1a86:	009b      	lsls	r3, r3, #2
    1a88:	4a1b      	ldr	r2, [pc, #108]	; (1af8 <_adc_init+0x100>)
    1a8a:	18d3      	adds	r3, r2, r3
    1a8c:	68db      	ldr	r3, [r3, #12]
    1a8e:	6123      	str	r3, [r4, #16]
    1a90:	7e63      	ldrb	r3, [r4, #25]
    1a92:	09db      	lsrs	r3, r3, #7
    1a94:	d1fc      	bne.n	1a90 <_adc_init+0x98>
    1a96:	00eb      	lsls	r3, r5, #3
    1a98:	1b5b      	subs	r3, r3, r5
    1a9a:	009b      	lsls	r3, r3, #2
    1a9c:	4a16      	ldr	r2, [pc, #88]	; (1af8 <_adc_init+0x100>)
    1a9e:	18d3      	adds	r3, r2, r3
    1aa0:	7a1b      	ldrb	r3, [r3, #8]
    1aa2:	7223      	strb	r3, [r4, #8]
    1aa4:	7e63      	ldrb	r3, [r4, #25]
    1aa6:	09db      	lsrs	r3, r3, #7
    1aa8:	d1fc      	bne.n	1aa4 <_adc_init+0xac>
    1aaa:	00eb      	lsls	r3, r5, #3
    1aac:	1b5b      	subs	r3, r3, r5
    1aae:	009b      	lsls	r3, r3, #2
    1ab0:	4a11      	ldr	r2, [pc, #68]	; (1af8 <_adc_init+0x100>)
    1ab2:	18d3      	adds	r3, r2, r3
    1ab4:	8a5b      	ldrh	r3, [r3, #18]
    1ab6:	83a3      	strh	r3, [r4, #28]
    1ab8:	7e63      	ldrb	r3, [r4, #25]
    1aba:	09db      	lsrs	r3, r3, #7
    1abc:	d1fc      	bne.n	1ab8 <_adc_init+0xc0>
    1abe:	00eb      	lsls	r3, r5, #3
    1ac0:	1b5b      	subs	r3, r3, r5
    1ac2:	009b      	lsls	r3, r3, #2
    1ac4:	4a0c      	ldr	r2, [pc, #48]	; (1af8 <_adc_init+0x100>)
    1ac6:	18d3      	adds	r3, r2, r3
    1ac8:	8a9b      	ldrh	r3, [r3, #20]
    1aca:	8423      	strh	r3, [r4, #32]
    1acc:	7e63      	ldrb	r3, [r4, #25]
    1ace:	09db      	lsrs	r3, r3, #7
    1ad0:	d1fc      	bne.n	1acc <_adc_init+0xd4>
    1ad2:	00eb      	lsls	r3, r5, #3
    1ad4:	1b5d      	subs	r5, r3, r5
    1ad6:	00ad      	lsls	r5, r5, #2
    1ad8:	4b07      	ldr	r3, [pc, #28]	; (1af8 <_adc_init+0x100>)
    1ada:	195d      	adds	r5, r3, r5
    1adc:	786b      	ldrb	r3, [r5, #1]
    1ade:	7023      	strb	r3, [r4, #0]
    1ae0:	2000      	movs	r0, #0
    1ae2:	bd70      	pop	{r4, r5, r6, pc}
    1ae4:	bdffc000 	.word	0xbdffc000
    1ae8:	000030f0 	.word	0x000030f0
    1aec:	00001985 	.word	0x00001985
    1af0:	00806024 	.word	0x00806024
    1af4:	00806020 	.word	0x00806020
    1af8:	000030d4 	.word	0x000030d4

00001afc <_adc_sync_init>:
    1afc:	b570      	push	{r4, r5, r6, lr}
    1afe:	0005      	movs	r5, r0
    1b00:	000c      	movs	r4, r1
    1b02:	1e43      	subs	r3, r0, #1
    1b04:	4198      	sbcs	r0, r3
    1b06:	b2c0      	uxtb	r0, r0
    1b08:	22c5      	movs	r2, #197	; 0xc5
    1b0a:	4906      	ldr	r1, [pc, #24]	; (1b24 <_adc_sync_init+0x28>)
    1b0c:	4b06      	ldr	r3, [pc, #24]	; (1b28 <_adc_sync_init+0x2c>)
    1b0e:	4798      	blx	r3
    1b10:	602c      	str	r4, [r5, #0]
    1b12:	0020      	movs	r0, r4
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <_adc_sync_init+0x30>)
    1b16:	4798      	blx	r3
    1b18:	0001      	movs	r1, r0
    1b1a:	0020      	movs	r0, r4
    1b1c:	4b04      	ldr	r3, [pc, #16]	; (1b30 <_adc_sync_init+0x34>)
    1b1e:	4798      	blx	r3
    1b20:	bd70      	pop	{r4, r5, r6, pc}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	000030f0 	.word	0x000030f0
    1b28:	00001985 	.word	0x00001985
    1b2c:	000019f3 	.word	0x000019f3
    1b30:	000019f9 	.word	0x000019f9

00001b34 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    1b34:	f3bf 8f4f 	dsb	sy
    1b38:	bf30      	wfi
    1b3a:	4770      	bx	lr

00001b3c <_get_cycles_for_us>:
    1b3c:	b510      	push	{r4, lr}
    1b3e:	0003      	movs	r3, r0
    1b40:	2064      	movs	r0, #100	; 0x64
    1b42:	4358      	muls	r0, r3
    1b44:	3801      	subs	r0, #1
    1b46:	2164      	movs	r1, #100	; 0x64
    1b48:	4b01      	ldr	r3, [pc, #4]	; (1b50 <_get_cycles_for_us+0x14>)
    1b4a:	4798      	blx	r3
    1b4c:	3001      	adds	r0, #1
    1b4e:	bd10      	pop	{r4, pc}
    1b50:	00002e25 	.word	0x00002e25

00001b54 <_get_cycles_for_ms>:
    1b54:	23fa      	movs	r3, #250	; 0xfa
    1b56:	009b      	lsls	r3, r3, #2
    1b58:	4358      	muls	r0, r3
    1b5a:	4770      	bx	lr

00001b5c <_init_chip>:
    1b5c:	b510      	push	{r4, lr}
    1b5e:	4b06      	ldr	r3, [pc, #24]	; (1b78 <_init_chip+0x1c>)
    1b60:	685a      	ldr	r2, [r3, #4]
    1b62:	605a      	str	r2, [r3, #4]
    1b64:	4b05      	ldr	r3, [pc, #20]	; (1b7c <_init_chip+0x20>)
    1b66:	4798      	blx	r3
    1b68:	4b05      	ldr	r3, [pc, #20]	; (1b80 <_init_chip+0x24>)
    1b6a:	4798      	blx	r3
    1b6c:	4b05      	ldr	r3, [pc, #20]	; (1b84 <_init_chip+0x28>)
    1b6e:	4798      	blx	r3
    1b70:	20ff      	movs	r0, #255	; 0xff
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <_init_chip+0x2c>)
    1b74:	4798      	blx	r3
    1b76:	bd10      	pop	{r4, pc}
    1b78:	41004000 	.word	0x41004000
    1b7c:	000021c1 	.word	0x000021c1
    1b80:	00002715 	.word	0x00002715
    1b84:	0000275d 	.word	0x0000275d
    1b88:	00001df1 	.word	0x00001df1

00001b8c <_dac_init>:
    1b8c:	79c3      	ldrb	r3, [r0, #7]
    1b8e:	09db      	lsrs	r3, r3, #7
    1b90:	d1fc      	bne.n	1b8c <_dac_init>
    1b92:	79c3      	ldrb	r3, [r0, #7]
    1b94:	09db      	lsrs	r3, r3, #7
    1b96:	d1fc      	bne.n	1b92 <_dac_init+0x6>
    1b98:	7803      	ldrb	r3, [r0, #0]
    1b9a:	079b      	lsls	r3, r3, #30
    1b9c:	d507      	bpl.n	1bae <_dac_init+0x22>
    1b9e:	2300      	movs	r3, #0
    1ba0:	7003      	strb	r3, [r0, #0]
    1ba2:	79c3      	ldrb	r3, [r0, #7]
    1ba4:	09db      	lsrs	r3, r3, #7
    1ba6:	d1fc      	bne.n	1ba2 <_dac_init+0x16>
    1ba8:	79c3      	ldrb	r3, [r0, #7]
    1baa:	09db      	lsrs	r3, r3, #7
    1bac:	d1fc      	bne.n	1ba8 <_dac_init+0x1c>
    1bae:	2301      	movs	r3, #1
    1bb0:	7003      	strb	r3, [r0, #0]
    1bb2:	79c3      	ldrb	r3, [r0, #7]
    1bb4:	09db      	lsrs	r3, r3, #7
    1bb6:	d1fc      	bne.n	1bb2 <_dac_init+0x26>
    1bb8:	79c3      	ldrb	r3, [r0, #7]
    1bba:	09db      	lsrs	r3, r3, #7
    1bbc:	d1fc      	bne.n	1bb8 <_dac_init+0x2c>
    1bbe:	7083      	strb	r3, [r0, #2]
    1bc0:	2201      	movs	r2, #1
    1bc2:	7042      	strb	r2, [r0, #1]
    1bc4:	7003      	strb	r3, [r0, #0]
    1bc6:	79c3      	ldrb	r3, [r0, #7]
    1bc8:	09db      	lsrs	r3, r3, #7
    1bca:	d1fc      	bne.n	1bc6 <_dac_init+0x3a>
    1bcc:	2000      	movs	r0, #0
    1bce:	4770      	bx	lr

00001bd0 <_dac_sync_init>:
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	0005      	movs	r5, r0
    1bd4:	000c      	movs	r4, r1
    1bd6:	1e43      	subs	r3, r0, #1
    1bd8:	4198      	sbcs	r0, r3
    1bda:	b2c0      	uxtb	r0, r0
    1bdc:	2249      	movs	r2, #73	; 0x49
    1bde:	4904      	ldr	r1, [pc, #16]	; (1bf0 <_dac_sync_init+0x20>)
    1be0:	4b04      	ldr	r3, [pc, #16]	; (1bf4 <_dac_sync_init+0x24>)
    1be2:	4798      	blx	r3
    1be4:	602c      	str	r4, [r5, #0]
    1be6:	0020      	movs	r0, r4
    1be8:	4b03      	ldr	r3, [pc, #12]	; (1bf8 <_dac_sync_init+0x28>)
    1bea:	4798      	blx	r3
    1bec:	bd70      	pop	{r4, r5, r6, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00003108 	.word	0x00003108
    1bf4:	00001985 	.word	0x00001985
    1bf8:	00001b8d 	.word	0x00001b8d

00001bfc <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1bfc:	4a22      	ldr	r2, [pc, #136]	; (1c88 <_ext_irq_init+0x8c>)
    1bfe:	7853      	ldrb	r3, [r2, #1]
    1c00:	09db      	lsrs	r3, r3, #7
    1c02:	d1fc      	bne.n	1bfe <_ext_irq_init+0x2>
    1c04:	4a20      	ldr	r2, [pc, #128]	; (1c88 <_ext_irq_init+0x8c>)
    1c06:	7853      	ldrb	r3, [r2, #1]
    1c08:	09db      	lsrs	r3, r3, #7
    1c0a:	d1fc      	bne.n	1c06 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1c0c:	4b1e      	ldr	r3, [pc, #120]	; (1c88 <_ext_irq_init+0x8c>)
    1c0e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1c10:	079b      	lsls	r3, r3, #30
    1c12:	d50a      	bpl.n	1c2a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1c14:	2200      	movs	r2, #0
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <_ext_irq_init+0x8c>)
    1c18:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c1a:	001a      	movs	r2, r3
    1c1c:	7853      	ldrb	r3, [r2, #1]
    1c1e:	09db      	lsrs	r3, r3, #7
    1c20:	d1fc      	bne.n	1c1c <_ext_irq_init+0x20>
    1c22:	4a19      	ldr	r2, [pc, #100]	; (1c88 <_ext_irq_init+0x8c>)
    1c24:	7853      	ldrb	r3, [r2, #1]
    1c26:	09db      	lsrs	r3, r3, #7
    1c28:	d1fc      	bne.n	1c24 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    1c2a:	2201      	movs	r2, #1
    1c2c:	4b16      	ldr	r3, [pc, #88]	; (1c88 <_ext_irq_init+0x8c>)
    1c2e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c30:	001a      	movs	r2, r3
    1c32:	7853      	ldrb	r3, [r2, #1]
    1c34:	09db      	lsrs	r3, r3, #7
    1c36:	d1fc      	bne.n	1c32 <_ext_irq_init+0x36>
    1c38:	4a13      	ldr	r2, [pc, #76]	; (1c88 <_ext_irq_init+0x8c>)
    1c3a:	7853      	ldrb	r3, [r2, #1]
    1c3c:	09db      	lsrs	r3, r3, #7
    1c3e:	d1fc      	bne.n	1c3a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1c40:	4b11      	ldr	r3, [pc, #68]	; (1c88 <_ext_irq_init+0x8c>)
    1c42:	2200      	movs	r2, #0
    1c44:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1c46:	4a11      	ldr	r2, [pc, #68]	; (1c8c <_ext_irq_init+0x90>)
    1c48:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1c4a:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1c4c:	22dd      	movs	r2, #221	; 0xdd
    1c4e:	0512      	lsls	r2, r2, #20
    1c50:	619a      	str	r2, [r3, #24]
    1c52:	4a0f      	ldr	r2, [pc, #60]	; (1c90 <_ext_irq_init+0x94>)
    1c54:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1c56:	781a      	ldrb	r2, [r3, #0]
    1c58:	2102      	movs	r1, #2
    1c5a:	430a      	orrs	r2, r1
    1c5c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1c5e:	001a      	movs	r2, r3
    1c60:	7853      	ldrb	r3, [r2, #1]
    1c62:	09db      	lsrs	r3, r3, #7
    1c64:	d1fc      	bne.n	1c60 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c66:	4b0b      	ldr	r3, [pc, #44]	; (1c94 <_ext_irq_init+0x98>)
    1c68:	2210      	movs	r2, #16
    1c6a:	2180      	movs	r1, #128	; 0x80
    1c6c:	505a      	str	r2, [r3, r1]
    1c6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c72:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c76:	3101      	adds	r1, #1
    1c78:	31ff      	adds	r1, #255	; 0xff
    1c7a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c7c:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1c7e:	4b06      	ldr	r3, [pc, #24]	; (1c98 <_ext_irq_init+0x9c>)
    1c80:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1c82:	2000      	movs	r0, #0
    1c84:	4770      	bx	lr
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	40001800 	.word	0x40001800
    1c8c:	0000a360 	.word	0x0000a360
    1c90:	d0d000dd 	.word	0xd0d000dd
    1c94:	e000e100 	.word	0xe000e100
    1c98:	20000084 	.word	0x20000084

00001c9c <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1c9c:	2805      	cmp	r0, #5
    1c9e:	d015      	beq.n	1ccc <_ext_irq_enable+0x30>
    1ca0:	2806      	cmp	r0, #6
    1ca2:	d00b      	beq.n	1cbc <_ext_irq_enable+0x20>
    1ca4:	281c      	cmp	r0, #28
    1ca6:	d00b      	beq.n	1cc0 <_ext_irq_enable+0x24>
    1ca8:	2809      	cmp	r0, #9
    1caa:	d00b      	beq.n	1cc4 <_ext_irq_enable+0x28>
    1cac:	2819      	cmp	r0, #25
    1cae:	d00b      	beq.n	1cc8 <_ext_irq_enable+0x2c>
    1cb0:	2305      	movs	r3, #5
    1cb2:	281b      	cmp	r0, #27
    1cb4:	d00b      	beq.n	1cce <_ext_irq_enable+0x32>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    1cb6:	200d      	movs	r0, #13
    1cb8:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1cba:	4770      	bx	lr
		if (_map[i].pin == pin) {
    1cbc:	2301      	movs	r3, #1
    1cbe:	e006      	b.n	1cce <_ext_irq_enable+0x32>
    1cc0:	2302      	movs	r3, #2
    1cc2:	e004      	b.n	1cce <_ext_irq_enable+0x32>
    1cc4:	2303      	movs	r3, #3
    1cc6:	e002      	b.n	1cce <_ext_irq_enable+0x32>
    1cc8:	2304      	movs	r3, #4
    1cca:	e000      	b.n	1cce <_ext_irq_enable+0x32>
    1ccc:	2300      	movs	r3, #0
			extint = _map[i].extint;
    1cce:	00db      	lsls	r3, r3, #3
    1cd0:	4a0a      	ldr	r2, [pc, #40]	; (1cfc <_ext_irq_enable+0x60>)
    1cd2:	5c9a      	ldrb	r2, [r3, r2]
	if (INVALID_EXTINT_NUMBER == extint) {
    1cd4:	2aff      	cmp	r2, #255	; 0xff
    1cd6:	d00e      	beq.n	1cf6 <_ext_irq_enable+0x5a>
	if (enable) {
    1cd8:	2900      	cmp	r1, #0
    1cda:	d106      	bne.n	1cea <_ext_irq_enable+0x4e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1cdc:	2301      	movs	r3, #1
    1cde:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1ce0:	4a07      	ldr	r2, [pc, #28]	; (1d00 <_ext_irq_enable+0x64>)
    1ce2:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1ce4:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1ce6:	2000      	movs	r0, #0
    1ce8:	e7e7      	b.n	1cba <_ext_irq_enable+0x1e>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1cea:	2301      	movs	r3, #1
    1cec:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1cee:	4a04      	ldr	r2, [pc, #16]	; (1d00 <_ext_irq_enable+0x64>)
    1cf0:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1cf2:	2000      	movs	r0, #0
    1cf4:	e7e1      	b.n	1cba <_ext_irq_enable+0x1e>
		return ERR_INVALID_ARG;
    1cf6:	200d      	movs	r0, #13
    1cf8:	4240      	negs	r0, r0
    1cfa:	e7de      	b.n	1cba <_ext_irq_enable+0x1e>
    1cfc:	00003120 	.word	0x00003120
    1d00:	40001800 	.word	0x40001800

00001d04 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	46d6      	mov	lr, sl
    1d08:	464f      	mov	r7, r9
    1d0a:	4646      	mov	r6, r8
    1d0c:	b5c0      	push	{r6, r7, lr}
    1d0e:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    1d10:	4b31      	ldr	r3, [pc, #196]	; (1dd8 <EIC_Handler+0xd4>)
    1d12:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1d14:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1d16:	400a      	ands	r2, r1
    1d18:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1d1a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d1c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1d1e:	4b2f      	ldr	r3, [pc, #188]	; (1ddc <EIC_Handler+0xd8>)
    1d20:	6818      	ldr	r0, [r3, #0]
    1d22:	1e43      	subs	r3, r0, #1
    1d24:	4198      	sbcs	r0, r3
    1d26:	b2c0      	uxtb	r0, r0
    1d28:	22d2      	movs	r2, #210	; 0xd2
    1d2a:	492d      	ldr	r1, [pc, #180]	; (1de0 <EIC_Handler+0xdc>)
    1d2c:	4b2d      	ldr	r3, [pc, #180]	; (1de4 <EIC_Handler+0xe0>)
    1d2e:	4798      	blx	r3

	while (flags) {
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d04a      	beq.n	1dcc <EIC_Handler+0xc8>
    1d36:	2301      	movs	r3, #1
    1d38:	425b      	negs	r3, r3
    1d3a:	469a      	mov	sl, r3
		pos = ffs(flags) - 1;
    1d3c:	4b2a      	ldr	r3, [pc, #168]	; (1de8 <EIC_Handler+0xe4>)
    1d3e:	4698      	mov	r8, r3
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1d40:	4b2a      	ldr	r3, [pc, #168]	; (1dec <EIC_Handler+0xe8>)
    1d42:	4699      	mov	r9, r3
				if (_map[middle].extint == pos) {
    1d44:	001d      	movs	r5, r3
    1d46:	e03a      	b.n	1dbe <EIC_Handler+0xba>
    1d48:	2303      	movs	r3, #3
					pin = _map[middle].pin;
    1d4a:	00db      	lsls	r3, r3, #3
    1d4c:	444b      	add	r3, r9
    1d4e:	685b      	ldr	r3, [r3, #4]
    1d50:	469a      	mov	sl, r3
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1d52:	4653      	mov	r3, sl
    1d54:	3301      	adds	r3, #1
    1d56:	d003      	beq.n	1d60 <EIC_Handler+0x5c>
				callback(pin);
    1d58:	4b20      	ldr	r3, [pc, #128]	; (1ddc <EIC_Handler+0xd8>)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	4650      	mov	r0, sl
    1d5e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1d60:	9b01      	ldr	r3, [sp, #4]
    1d62:	2201      	movs	r2, #1
    1d64:	40a2      	lsls	r2, r4
    1d66:	4393      	bics	r3, r2
    1d68:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1d6a:	9801      	ldr	r0, [sp, #4]
    1d6c:	4b1e      	ldr	r3, [pc, #120]	; (1de8 <EIC_Handler+0xe4>)
    1d6e:	4798      	blx	r3
    1d70:	3801      	subs	r0, #1
    1d72:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1d74:	1c63      	adds	r3, r4, #1
    1d76:	d018      	beq.n	1daa <EIC_Handler+0xa6>
				if (_map[middle].extint == pos) {
    1d78:	2c09      	cmp	r4, #9
    1d7a:	d0e5      	beq.n	1d48 <EIC_Handler+0x44>
    1d7c:	2709      	movs	r7, #9
    1d7e:	2203      	movs	r2, #3
    1d80:	2606      	movs	r6, #6
    1d82:	2100      	movs	r1, #0
    1d84:	20ff      	movs	r0, #255	; 0xff
    1d86:	e00b      	b.n	1da0 <EIC_Handler+0x9c>
					upper = middle - 1;
    1d88:	3a01      	subs	r2, #1
    1d8a:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    1d8c:	42b1      	cmp	r1, r6
    1d8e:	d8e0      	bhi.n	1d52 <EIC_Handler+0x4e>
				middle = (upper + lower) >> 1;
    1d90:	1873      	adds	r3, r6, r1
    1d92:	105b      	asrs	r3, r3, #1
    1d94:	b2da      	uxtb	r2, r3
    1d96:	4003      	ands	r3, r0
				if (_map[middle].extint == pos) {
    1d98:	00df      	lsls	r7, r3, #3
    1d9a:	5d7f      	ldrb	r7, [r7, r5]
    1d9c:	42a7      	cmp	r7, r4
    1d9e:	d0d4      	beq.n	1d4a <EIC_Handler+0x46>
				if (_map[middle].extint < pos) {
    1da0:	42bc      	cmp	r4, r7
    1da2:	ddf1      	ble.n	1d88 <EIC_Handler+0x84>
					lower = middle + 1;
    1da4:	3201      	adds	r2, #1
    1da6:	b2d1      	uxtb	r1, r2
    1da8:	e7f0      	b.n	1d8c <EIC_Handler+0x88>
	return ((Eic *)hw)->INTFLAG.reg;
    1daa:	4b0b      	ldr	r3, [pc, #44]	; (1dd8 <EIC_Handler+0xd4>)
    1dac:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1dae:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1db0:	400a      	ands	r2, r1
    1db2:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1db4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1db6:	611a      	str	r2, [r3, #16]
	while (flags) {
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d006      	beq.n	1dcc <EIC_Handler+0xc8>
		pos = ffs(flags) - 1;
    1dbe:	9801      	ldr	r0, [sp, #4]
    1dc0:	47c0      	blx	r8
    1dc2:	3801      	subs	r0, #1
    1dc4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1dc6:	1c63      	adds	r3, r4, #1
    1dc8:	d1d6      	bne.n	1d78 <EIC_Handler+0x74>
    1dca:	e7ee      	b.n	1daa <EIC_Handler+0xa6>
	}
}
    1dcc:	b002      	add	sp, #8
    1dce:	bc1c      	pop	{r2, r3, r4}
    1dd0:	4690      	mov	r8, r2
    1dd2:	4699      	mov	r9, r3
    1dd4:	46a2      	mov	sl, r4
    1dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd8:	40001800 	.word	0x40001800
    1ddc:	20000084 	.word	0x20000084
    1de0:	00003150 	.word	0x00003150
    1de4:	00001985 	.word	0x00001985
    1de8:	00002f3d 	.word	0x00002f3d
    1dec:	00003120 	.word	0x00003120

00001df0 <_gclk_init_generators_by_fref>:
    1df0:	07c3      	lsls	r3, r0, #31
    1df2:	d50a      	bpl.n	1e0a <_gclk_init_generators_by_fref+0x1a>
    1df4:	4b05      	ldr	r3, [pc, #20]	; (1e0c <_gclk_init_generators_by_fref+0x1c>)
    1df6:	2280      	movs	r2, #128	; 0x80
    1df8:	0052      	lsls	r2, r2, #1
    1dfa:	609a      	str	r2, [r3, #8]
    1dfc:	2283      	movs	r2, #131	; 0x83
    1dfe:	0252      	lsls	r2, r2, #9
    1e00:	605a      	str	r2, [r3, #4]
    1e02:	001a      	movs	r2, r3
    1e04:	7853      	ldrb	r3, [r2, #1]
    1e06:	09db      	lsrs	r3, r3, #7
    1e08:	d1fc      	bne.n	1e04 <_gclk_init_generators_by_fref+0x14>
    1e0a:	4770      	bx	lr
    1e0c:	40000c00 	.word	0x40000c00

00001e10 <_flash_program>:
    1e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e12:	0004      	movs	r4, r0
    1e14:	000d      	movs	r5, r1
    1e16:	0017      	movs	r7, r2
    1e18:	001e      	movs	r6, r3
    1e1a:	2301      	movs	r3, #1
    1e1c:	404b      	eors	r3, r1
    1e1e:	2001      	movs	r0, #1
    1e20:	4018      	ands	r0, r3
    1e22:	22c5      	movs	r2, #197	; 0xc5
    1e24:	0052      	lsls	r2, r2, #1
    1e26:	4919      	ldr	r1, [pc, #100]	; (1e8c <_flash_program+0x7c>)
    1e28:	4b19      	ldr	r3, [pc, #100]	; (1e90 <_flash_program+0x80>)
    1e2a:	4798      	blx	r3
    1e2c:	0868      	lsrs	r0, r5, #1
    1e2e:	2201      	movs	r2, #1
    1e30:	7d23      	ldrb	r3, [r4, #20]
    1e32:	4213      	tst	r3, r2
    1e34:	d0fc      	beq.n	1e30 <_flash_program+0x20>
    1e36:	4b17      	ldr	r3, [pc, #92]	; (1e94 <_flash_program+0x84>)
    1e38:	8023      	strh	r3, [r4, #0]
    1e3a:	2201      	movs	r2, #1
    1e3c:	7d23      	ldrb	r3, [r4, #20]
    1e3e:	4213      	tst	r3, r2
    1e40:	d0fc      	beq.n	1e3c <_flash_program+0x2c>
    1e42:	2320      	movs	r3, #32
    1e44:	33ff      	adds	r3, #255	; 0xff
    1e46:	8323      	strh	r3, [r4, #24]
    1e48:	2e00      	cmp	r6, #0
    1e4a:	d00e      	beq.n	1e6a <_flash_program+0x5a>
    1e4c:	3b1f      	subs	r3, #31
    1e4e:	3bff      	subs	r3, #255	; 0xff
    1e50:	0029      	movs	r1, r5
    1e52:	4399      	bics	r1, r3
    1e54:	2300      	movs	r3, #0
    1e56:	5cfd      	ldrb	r5, [r7, r3]
    1e58:	b2aa      	uxth	r2, r5
    1e5a:	2b3e      	cmp	r3, #62	; 0x3e
    1e5c:	d910      	bls.n	1e80 <_flash_program+0x70>
    1e5e:	800a      	strh	r2, [r1, #0]
    1e60:	3302      	adds	r3, #2
    1e62:	b29b      	uxth	r3, r3
    1e64:	3102      	adds	r1, #2
    1e66:	429e      	cmp	r6, r3
    1e68:	d8f5      	bhi.n	1e56 <_flash_program+0x46>
    1e6a:	2201      	movs	r2, #1
    1e6c:	7d23      	ldrb	r3, [r4, #20]
    1e6e:	4213      	tst	r3, r2
    1e70:	d0fc      	beq.n	1e6c <_flash_program+0x5c>
    1e72:	61e0      	str	r0, [r4, #28]
    1e74:	4b08      	ldr	r3, [pc, #32]	; (1e98 <_flash_program+0x88>)
    1e76:	9a06      	ldr	r2, [sp, #24]
    1e78:	4313      	orrs	r3, r2
    1e7a:	b29b      	uxth	r3, r3
    1e7c:	8023      	strh	r3, [r4, #0]
    1e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e80:	18fa      	adds	r2, r7, r3
    1e82:	7852      	ldrb	r2, [r2, #1]
    1e84:	0212      	lsls	r2, r2, #8
    1e86:	432a      	orrs	r2, r5
    1e88:	e7e9      	b.n	1e5e <_flash_program+0x4e>
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	00003168 	.word	0x00003168
    1e90:	00001985 	.word	0x00001985
    1e94:	ffffa544 	.word	0xffffa544
    1e98:	ffffa500 	.word	0xffffa500

00001e9c <_flash_init>:
    1e9c:	b570      	push	{r4, r5, r6, lr}
    1e9e:	0005      	movs	r5, r0
    1ea0:	000c      	movs	r4, r1
    1ea2:	2800      	cmp	r0, #0
    1ea4:	d01d      	beq.n	1ee2 <_flash_init+0x46>
    1ea6:	4b10      	ldr	r3, [pc, #64]	; (1ee8 <_flash_init+0x4c>)
    1ea8:	18c8      	adds	r0, r1, r3
    1eaa:	4243      	negs	r3, r0
    1eac:	4158      	adcs	r0, r3
    1eae:	b2c0      	uxtb	r0, r0
    1eb0:	2246      	movs	r2, #70	; 0x46
    1eb2:	490e      	ldr	r1, [pc, #56]	; (1eec <_flash_init+0x50>)
    1eb4:	4b0e      	ldr	r3, [pc, #56]	; (1ef0 <_flash_init+0x54>)
    1eb6:	4798      	blx	r3
    1eb8:	612c      	str	r4, [r5, #16]
    1eba:	6862      	ldr	r2, [r4, #4]
    1ebc:	239e      	movs	r3, #158	; 0x9e
    1ebe:	4013      	ands	r3, r2
    1ec0:	6063      	str	r3, [r4, #4]
    1ec2:	4b0c      	ldr	r3, [pc, #48]	; (1ef4 <_flash_init+0x58>)
    1ec4:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ec6:	4b0c      	ldr	r3, [pc, #48]	; (1ef8 <_flash_init+0x5c>)
    1ec8:	2220      	movs	r2, #32
    1eca:	2180      	movs	r1, #128	; 0x80
    1ecc:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ed2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ed6:	3101      	adds	r1, #1
    1ed8:	31ff      	adds	r1, #255	; 0xff
    1eda:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1edc:	601a      	str	r2, [r3, #0]
    1ede:	2000      	movs	r0, #0
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
    1ee2:	2000      	movs	r0, #0
    1ee4:	e7e4      	b.n	1eb0 <_flash_init+0x14>
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	beffc000 	.word	0xbeffc000
    1eec:	00003168 	.word	0x00003168
    1ef0:	00001985 	.word	0x00001985
    1ef4:	20000088 	.word	0x20000088
    1ef8:	e000e100 	.word	0xe000e100

00001efc <_flash_get_page_size>:
    1efc:	2040      	movs	r0, #64	; 0x40
    1efe:	4770      	bx	lr

00001f00 <_flash_get_total_pages>:
    1f00:	2080      	movs	r0, #128	; 0x80
    1f02:	0140      	lsls	r0, r0, #5
    1f04:	4770      	bx	lr

00001f06 <_flash_read>:
    1f06:	b570      	push	{r4, r5, r6, lr}
    1f08:	084c      	lsrs	r4, r1, #1
    1f0a:	6905      	ldr	r5, [r0, #16]
    1f0c:	2601      	movs	r6, #1
    1f0e:	7d28      	ldrb	r0, [r5, #20]
    1f10:	4230      	tst	r0, r6
    1f12:	d0fc      	beq.n	1f0e <_flash_read+0x8>
    1f14:	2020      	movs	r0, #32
    1f16:	30ff      	adds	r0, #255	; 0xff
    1f18:	8328      	strh	r0, [r5, #24]
    1f1a:	2000      	movs	r0, #0
    1f1c:	07cd      	lsls	r5, r1, #31
    1f1e:	d505      	bpl.n	1f2c <_flash_read+0x26>
    1f20:	3401      	adds	r4, #1
    1f22:	3001      	adds	r0, #1
    1f24:	4381      	bics	r1, r0
    1f26:	8809      	ldrh	r1, [r1, #0]
    1f28:	0a09      	lsrs	r1, r1, #8
    1f2a:	7011      	strb	r1, [r2, #0]
    1f2c:	4298      	cmp	r0, r3
    1f2e:	d211      	bcs.n	1f54 <_flash_read+0x4e>
    1f30:	1812      	adds	r2, r2, r0
    1f32:	0064      	lsls	r4, r4, #1
    1f34:	1a24      	subs	r4, r4, r0
    1f36:	1e5d      	subs	r5, r3, #1
    1f38:	e003      	b.n	1f42 <_flash_read+0x3c>
    1f3a:	3002      	adds	r0, #2
    1f3c:	3202      	adds	r2, #2
    1f3e:	4283      	cmp	r3, r0
    1f40:	d908      	bls.n	1f54 <_flash_read+0x4e>
    1f42:	1821      	adds	r1, r4, r0
    1f44:	8809      	ldrh	r1, [r1, #0]
    1f46:	b289      	uxth	r1, r1
    1f48:	7011      	strb	r1, [r2, #0]
    1f4a:	4285      	cmp	r5, r0
    1f4c:	d9f5      	bls.n	1f3a <_flash_read+0x34>
    1f4e:	0a09      	lsrs	r1, r1, #8
    1f50:	7051      	strb	r1, [r2, #1]
    1f52:	e7f2      	b.n	1f3a <_flash_read+0x34>
    1f54:	bd70      	pop	{r4, r5, r6, pc}
	...

00001f58 <_flash_write>:
    1f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5a:	46de      	mov	lr, fp
    1f5c:	4657      	mov	r7, sl
    1f5e:	464e      	mov	r6, r9
    1f60:	4645      	mov	r5, r8
    1f62:	b5e0      	push	{r5, r6, r7, lr}
    1f64:	b0c5      	sub	sp, #276	; 0x114
    1f66:	4683      	mov	fp, r0
    1f68:	0016      	movs	r6, r2
    1f6a:	001d      	movs	r5, r3
    1f6c:	000c      	movs	r4, r1
    1f6e:	e02e      	b.n	1fce <_flash_write+0x76>
    1f70:	46ba      	mov	sl, r7
    1f72:	4667      	mov	r7, ip
    1f74:	465b      	mov	r3, fp
    1f76:	691a      	ldr	r2, [r3, #16]
    1f78:	2101      	movs	r1, #1
    1f7a:	7d13      	ldrb	r3, [r2, #20]
    1f7c:	420b      	tst	r3, r1
    1f7e:	d0fc      	beq.n	1f7a <_flash_write+0x22>
    1f80:	2320      	movs	r3, #32
    1f82:	33ff      	adds	r3, #255	; 0xff
    1f84:	8313      	strh	r3, [r2, #24]
    1f86:	464b      	mov	r3, r9
    1f88:	085b      	lsrs	r3, r3, #1
    1f8a:	61d3      	str	r3, [r2, #28]
    1f8c:	4b36      	ldr	r3, [pc, #216]	; (2068 <STACK_SIZE+0x68>)
    1f8e:	8013      	strh	r3, [r2, #0]
    1f90:	002b      	movs	r3, r5
    1f92:	003d      	movs	r5, r7
    1f94:	464f      	mov	r7, r9
    1f96:	46a0      	mov	r8, r4
    1f98:	9703      	str	r7, [sp, #12]
    1f9a:	46b1      	mov	r9, r6
    1f9c:	465e      	mov	r6, fp
    1f9e:	469b      	mov	fp, r3
    1fa0:	9b03      	ldr	r3, [sp, #12]
    1fa2:	1afa      	subs	r2, r7, r3
    1fa4:	ab04      	add	r3, sp, #16
    1fa6:	469c      	mov	ip, r3
    1fa8:	4462      	add	r2, ip
    1faa:	2304      	movs	r3, #4
    1fac:	9300      	str	r3, [sp, #0]
    1fae:	333c      	adds	r3, #60	; 0x3c
    1fb0:	0039      	movs	r1, r7
    1fb2:	6930      	ldr	r0, [r6, #16]
    1fb4:	4c2d      	ldr	r4, [pc, #180]	; (206c <STACK_SIZE+0x6c>)
    1fb6:	47a0      	blx	r4
    1fb8:	3740      	adds	r7, #64	; 0x40
    1fba:	42bd      	cmp	r5, r7
    1fbc:	d1f0      	bne.n	1fa0 <_flash_write+0x48>
    1fbe:	4644      	mov	r4, r8
    1fc0:	465d      	mov	r5, fp
    1fc2:	46b3      	mov	fp, r6
    1fc4:	464e      	mov	r6, r9
    1fc6:	192b      	adds	r3, r5, r4
    1fc8:	3b01      	subs	r3, #1
    1fca:	459a      	cmp	sl, r3
    1fcc:	d244      	bcs.n	2058 <STACK_SIZE+0x58>
    1fce:	23ff      	movs	r3, #255	; 0xff
    1fd0:	0022      	movs	r2, r4
    1fd2:	439a      	bics	r2, r3
    1fd4:	4691      	mov	r9, r2
    1fd6:	444b      	add	r3, r9
    1fd8:	469a      	mov	sl, r3
    1fda:	2380      	movs	r3, #128	; 0x80
    1fdc:	005b      	lsls	r3, r3, #1
    1fde:	444b      	add	r3, r9
    1fe0:	4698      	mov	r8, r3
    1fe2:	0017      	movs	r7, r2
    1fe4:	4642      	mov	r2, r8
    1fe6:	9203      	str	r2, [sp, #12]
    1fe8:	46a0      	mov	r8, r4
    1fea:	464c      	mov	r4, r9
    1fec:	46b1      	mov	r9, r6
    1fee:	465e      	mov	r6, fp
    1ff0:	46ab      	mov	fp, r5
    1ff2:	1b3a      	subs	r2, r7, r4
    1ff4:	ab04      	add	r3, sp, #16
    1ff6:	469c      	mov	ip, r3
    1ff8:	4462      	add	r2, ip
    1ffa:	2340      	movs	r3, #64	; 0x40
    1ffc:	0039      	movs	r1, r7
    1ffe:	0030      	movs	r0, r6
    2000:	4d1b      	ldr	r5, [pc, #108]	; (2070 <STACK_SIZE+0x70>)
    2002:	47a8      	blx	r5
    2004:	3740      	adds	r7, #64	; 0x40
    2006:	9b03      	ldr	r3, [sp, #12]
    2008:	429f      	cmp	r7, r3
    200a:	d1f2      	bne.n	1ff2 <_flash_write+0x9a>
    200c:	465d      	mov	r5, fp
    200e:	46b3      	mov	fp, r6
    2010:	464e      	mov	r6, r9
    2012:	46a1      	mov	r9, r4
    2014:	4644      	mov	r4, r8
    2016:	464b      	mov	r3, r9
    2018:	1ae3      	subs	r3, r4, r3
    201a:	0999      	lsrs	r1, r3, #6
    201c:	223f      	movs	r2, #63	; 0x3f
    201e:	4013      	ands	r3, r2
    2020:	4554      	cmp	r4, sl
    2022:	d8a7      	bhi.n	1f74 <_flash_write+0x1c>
    2024:	2d00      	cmp	r5, #0
    2026:	d0a5      	beq.n	1f74 <_flash_write+0x1c>
    2028:	46bc      	mov	ip, r7
    202a:	4657      	mov	r7, sl
    202c:	018a      	lsls	r2, r1, #6
    202e:	a804      	add	r0, sp, #16
    2030:	4680      	mov	r8, r0
    2032:	4442      	add	r2, r8
    2034:	7830      	ldrb	r0, [r6, #0]
    2036:	54d0      	strb	r0, [r2, r3]
    2038:	3301      	adds	r3, #1
    203a:	223f      	movs	r2, #63	; 0x3f
    203c:	4013      	ands	r3, r2
    203e:	425a      	negs	r2, r3
    2040:	415a      	adcs	r2, r3
    2042:	1889      	adds	r1, r1, r2
    2044:	3401      	adds	r4, #1
    2046:	3601      	adds	r6, #1
    2048:	3d01      	subs	r5, #1
    204a:	42a7      	cmp	r7, r4
    204c:	d390      	bcc.n	1f70 <_flash_write+0x18>
    204e:	2d00      	cmp	r5, #0
    2050:	d1ec      	bne.n	202c <STACK_SIZE+0x2c>
    2052:	46ba      	mov	sl, r7
    2054:	4667      	mov	r7, ip
    2056:	e78d      	b.n	1f74 <_flash_write+0x1c>
    2058:	b045      	add	sp, #276	; 0x114
    205a:	bc3c      	pop	{r2, r3, r4, r5}
    205c:	4690      	mov	r8, r2
    205e:	4699      	mov	r9, r3
    2060:	46a2      	mov	sl, r4
    2062:	46ab      	mov	fp, r5
    2064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	ffffa502 	.word	0xffffa502
    206c:	00001e11 	.word	0x00001e11
    2070:	00001f07 	.word	0x00001f07

00002074 <_flash_erase>:
    2074:	b5f0      	push	{r4, r5, r6, r7, lr}
    2076:	46d6      	mov	lr, sl
    2078:	464f      	mov	r7, r9
    207a:	4646      	mov	r6, r8
    207c:	b5c0      	push	{r6, r7, lr}
    207e:	b090      	sub	sp, #64	; 0x40
    2080:	0005      	movs	r5, r0
    2082:	000c      	movs	r4, r1
    2084:	0016      	movs	r6, r2
    2086:	23ff      	movs	r3, #255	; 0xff
    2088:	000f      	movs	r7, r1
    208a:	439f      	bics	r7, r3
    208c:	2240      	movs	r2, #64	; 0x40
    208e:	21ff      	movs	r1, #255	; 0xff
    2090:	4668      	mov	r0, sp
    2092:	4b28      	ldr	r3, [pc, #160]	; (2134 <_flash_erase+0xc0>)
    2094:	4798      	blx	r3
    2096:	42bc      	cmp	r4, r7
    2098:	d048      	beq.n	212c <_flash_erase+0xb8>
    209a:	1c7b      	adds	r3, r7, #1
    209c:	33ff      	adds	r3, #255	; 0xff
    209e:	469a      	mov	sl, r3
    20a0:	23c0      	movs	r3, #192	; 0xc0
    20a2:	4699      	mov	r9, r3
    20a4:	44a1      	add	r9, r4
    20a6:	4f24      	ldr	r7, [pc, #144]	; (2138 <_flash_erase+0xc4>)
    20a8:	2340      	movs	r3, #64	; 0x40
    20aa:	466a      	mov	r2, sp
    20ac:	0021      	movs	r1, r4
    20ae:	0028      	movs	r0, r5
    20b0:	47b8      	blx	r7
    20b2:	3e01      	subs	r6, #1
    20b4:	2e00      	cmp	r6, #0
    20b6:	d033      	beq.n	2120 <_flash_erase+0xac>
    20b8:	3440      	adds	r4, #64	; 0x40
    20ba:	45a2      	cmp	sl, r4
    20bc:	d001      	beq.n	20c2 <_flash_erase+0x4e>
    20be:	454c      	cmp	r4, r9
    20c0:	d1f2      	bne.n	20a8 <_flash_erase+0x34>
    20c2:	4654      	mov	r4, sl
    20c4:	2e03      	cmp	r6, #3
    20c6:	d91f      	bls.n	2108 <_flash_erase+0x94>
    20c8:	4654      	mov	r4, sl
    20ca:	0030      	movs	r0, r6
    20cc:	2101      	movs	r1, #1
    20ce:	2320      	movs	r3, #32
    20d0:	33ff      	adds	r3, #255	; 0xff
    20d2:	4698      	mov	r8, r3
    20d4:	4f19      	ldr	r7, [pc, #100]	; (213c <_flash_erase+0xc8>)
    20d6:	692a      	ldr	r2, [r5, #16]
    20d8:	7d13      	ldrb	r3, [r2, #20]
    20da:	420b      	tst	r3, r1
    20dc:	d0fc      	beq.n	20d8 <_flash_erase+0x64>
    20de:	4643      	mov	r3, r8
    20e0:	8313      	strh	r3, [r2, #24]
    20e2:	0863      	lsrs	r3, r4, #1
    20e4:	61d3      	str	r3, [r2, #28]
    20e6:	8017      	strh	r7, [r2, #0]
    20e8:	3401      	adds	r4, #1
    20ea:	34ff      	adds	r4, #255	; 0xff
    20ec:	3804      	subs	r0, #4
    20ee:	2803      	cmp	r0, #3
    20f0:	d8f1      	bhi.n	20d6 <_flash_erase+0x62>
    20f2:	4657      	mov	r7, sl
    20f4:	3701      	adds	r7, #1
    20f6:	37ff      	adds	r7, #255	; 0xff
    20f8:	1f34      	subs	r4, r6, #4
    20fa:	08a4      	lsrs	r4, r4, #2
    20fc:	0224      	lsls	r4, r4, #8
    20fe:	19e4      	adds	r4, r4, r7
    2100:	2303      	movs	r3, #3
    2102:	401e      	ands	r6, r3
    2104:	2e00      	cmp	r6, #0
    2106:	d00b      	beq.n	2120 <_flash_erase+0xac>
    2108:	2700      	movs	r7, #0
    210a:	4b0b      	ldr	r3, [pc, #44]	; (2138 <_flash_erase+0xc4>)
    210c:	4698      	mov	r8, r3
    210e:	2340      	movs	r3, #64	; 0x40
    2110:	466a      	mov	r2, sp
    2112:	0021      	movs	r1, r4
    2114:	0028      	movs	r0, r5
    2116:	47c0      	blx	r8
    2118:	3440      	adds	r4, #64	; 0x40
    211a:	3701      	adds	r7, #1
    211c:	42be      	cmp	r6, r7
    211e:	d8f6      	bhi.n	210e <_flash_erase+0x9a>
    2120:	b010      	add	sp, #64	; 0x40
    2122:	bc1c      	pop	{r2, r3, r4}
    2124:	4690      	mov	r8, r2
    2126:	4699      	mov	r9, r3
    2128:	46a2      	mov	sl, r4
    212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    212c:	46a2      	mov	sl, r4
    212e:	2e03      	cmp	r6, #3
    2130:	d8ca      	bhi.n	20c8 <_flash_erase+0x54>
    2132:	e7e7      	b.n	2104 <_flash_erase+0x90>
    2134:	00002fd9 	.word	0x00002fd9
    2138:	00001f59 	.word	0x00001f59
    213c:	ffffa502 	.word	0xffffa502

00002140 <_flash_is_locked>:
    2140:	6903      	ldr	r3, [r0, #16]
    2142:	8c18      	ldrh	r0, [r3, #32]
    2144:	0089      	lsls	r1, r1, #2
    2146:	0c09      	lsrs	r1, r1, #16
    2148:	2301      	movs	r3, #1
    214a:	408b      	lsls	r3, r1
    214c:	4018      	ands	r0, r3
    214e:	4243      	negs	r3, r0
    2150:	4158      	adcs	r0, r3
    2152:	b2c0      	uxtb	r0, r0
    2154:	4770      	bx	lr
	...

00002158 <NVMCTRL_Handler>:
    2158:	b510      	push	{r4, lr}
    215a:	4b0a      	ldr	r3, [pc, #40]	; (2184 <NVMCTRL_Handler+0x2c>)
    215c:	6818      	ldr	r0, [r3, #0]
    215e:	6903      	ldr	r3, [r0, #16]
    2160:	7d1a      	ldrb	r2, [r3, #20]
    2162:	07d2      	lsls	r2, r2, #31
    2164:	d504      	bpl.n	2170 <NVMCTRL_Handler+0x18>
    2166:	6803      	ldr	r3, [r0, #0]
    2168:	2b00      	cmp	r3, #0
    216a:	d000      	beq.n	216e <NVMCTRL_Handler+0x16>
    216c:	4798      	blx	r3
    216e:	bd10      	pop	{r4, pc}
    2170:	7d1a      	ldrb	r2, [r3, #20]
    2172:	0792      	lsls	r2, r2, #30
    2174:	d5fb      	bpl.n	216e <NVMCTRL_Handler+0x16>
    2176:	2202      	movs	r2, #2
    2178:	751a      	strb	r2, [r3, #20]
    217a:	6843      	ldr	r3, [r0, #4]
    217c:	2b00      	cmp	r3, #0
    217e:	d0f6      	beq.n	216e <NVMCTRL_Handler+0x16>
    2180:	4798      	blx	r3
    2182:	e7f4      	b.n	216e <NVMCTRL_Handler+0x16>
    2184:	20000088 	.word	0x20000088

00002188 <_set_sleep_mode>:
    2188:	2802      	cmp	r0, #2
    218a:	d904      	bls.n	2196 <_set_sleep_mode+0xe>
    218c:	2803      	cmp	r0, #3
    218e:	d00b      	beq.n	21a8 <_set_sleep_mode+0x20>
    2190:	200d      	movs	r0, #13
    2192:	4240      	negs	r0, r0
    2194:	e007      	b.n	21a6 <_set_sleep_mode+0x1e>
    2196:	4a08      	ldr	r2, [pc, #32]	; (21b8 <_set_sleep_mode+0x30>)
    2198:	6913      	ldr	r3, [r2, #16]
    219a:	2104      	movs	r1, #4
    219c:	438b      	bics	r3, r1
    219e:	6113      	str	r3, [r2, #16]
    21a0:	4b06      	ldr	r3, [pc, #24]	; (21bc <_set_sleep_mode+0x34>)
    21a2:	7058      	strb	r0, [r3, #1]
    21a4:	2000      	movs	r0, #0
    21a6:	4770      	bx	lr
    21a8:	4a03      	ldr	r2, [pc, #12]	; (21b8 <_set_sleep_mode+0x30>)
    21aa:	6913      	ldr	r3, [r2, #16]
    21ac:	2104      	movs	r1, #4
    21ae:	430b      	orrs	r3, r1
    21b0:	6113      	str	r3, [r2, #16]
    21b2:	2000      	movs	r0, #0
    21b4:	e7f7      	b.n	21a6 <_set_sleep_mode+0x1e>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	e000ed00 	.word	0xe000ed00
    21bc:	40000400 	.word	0x40000400

000021c0 <_pm_init>:
    21c0:	4b06      	ldr	r3, [pc, #24]	; (21dc <_pm_init+0x1c>)
    21c2:	7a1a      	ldrb	r2, [r3, #8]
    21c4:	b2d2      	uxtb	r2, r2
    21c6:	721a      	strb	r2, [r3, #8]
    21c8:	7a5a      	ldrb	r2, [r3, #9]
    21ca:	b2d2      	uxtb	r2, r2
    21cc:	725a      	strb	r2, [r3, #9]
    21ce:	7a9a      	ldrb	r2, [r3, #10]
    21d0:	b2d2      	uxtb	r2, r2
    21d2:	729a      	strb	r2, [r3, #10]
    21d4:	7ada      	ldrb	r2, [r3, #11]
    21d6:	b2d2      	uxtb	r2, r2
    21d8:	72da      	strb	r2, [r3, #11]
    21da:	4770      	bx	lr
    21dc:	40000400 	.word	0x40000400

000021e0 <_timer_init>:
    21e0:	b570      	push	{r4, r5, r6, lr}
    21e2:	0004      	movs	r4, r0
    21e4:	000d      	movs	r5, r1
    21e6:	1e43      	subs	r3, r0, #1
    21e8:	4198      	sbcs	r0, r3
    21ea:	b2c0      	uxtb	r0, r0
    21ec:	2233      	movs	r2, #51	; 0x33
    21ee:	4910      	ldr	r1, [pc, #64]	; (2230 <_timer_init+0x50>)
    21f0:	4b10      	ldr	r3, [pc, #64]	; (2234 <_timer_init+0x54>)
    21f2:	4798      	blx	r3
    21f4:	60e5      	str	r5, [r4, #12]
    21f6:	2301      	movs	r3, #1
    21f8:	802b      	strh	r3, [r5, #0]
    21fa:	7aab      	ldrb	r3, [r5, #10]
    21fc:	09db      	lsrs	r3, r3, #7
    21fe:	d1fc      	bne.n	21fa <_timer_init+0x1a>
    2200:	68e2      	ldr	r2, [r4, #12]
    2202:	7a93      	ldrb	r3, [r2, #10]
    2204:	09db      	lsrs	r3, r3, #7
    2206:	d1fc      	bne.n	2202 <_timer_init+0x22>
    2208:	3380      	adds	r3, #128	; 0x80
    220a:	8013      	strh	r3, [r2, #0]
    220c:	7a93      	ldrb	r3, [r2, #10]
    220e:	09db      	lsrs	r3, r3, #7
    2210:	d1fc      	bne.n	220c <_timer_init+0x2c>
    2212:	68e2      	ldr	r2, [r4, #12]
    2214:	6993      	ldr	r3, [r2, #24]
    2216:	2380      	movs	r3, #128	; 0x80
    2218:	00db      	lsls	r3, r3, #3
    221a:	6193      	str	r3, [r2, #24]
    221c:	7a93      	ldrb	r3, [r2, #10]
    221e:	09db      	lsrs	r3, r3, #7
    2220:	d1fc      	bne.n	221c <_timer_init+0x3c>
    2222:	3301      	adds	r3, #1
    2224:	68e2      	ldr	r2, [r4, #12]
    2226:	71d3      	strb	r3, [r2, #7]
    2228:	4b03      	ldr	r3, [pc, #12]	; (2238 <_timer_init+0x58>)
    222a:	601c      	str	r4, [r3, #0]
    222c:	2000      	movs	r0, #0
    222e:	bd70      	pop	{r4, r5, r6, pc}
    2230:	00003188 	.word	0x00003188
    2234:	00001985 	.word	0x00001985
    2238:	2000008c 	.word	0x2000008c

0000223c <_timer_start>:
    223c:	b510      	push	{r4, lr}
    223e:	1e04      	subs	r4, r0, #0
    2240:	d01d      	beq.n	227e <_timer_start+0x42>
    2242:	68c0      	ldr	r0, [r0, #12]
    2244:	1e43      	subs	r3, r0, #1
    2246:	4198      	sbcs	r0, r3
    2248:	b2c0      	uxtb	r0, r0
    224a:	226a      	movs	r2, #106	; 0x6a
    224c:	490d      	ldr	r1, [pc, #52]	; (2284 <_timer_start+0x48>)
    224e:	4b0e      	ldr	r3, [pc, #56]	; (2288 <_timer_start+0x4c>)
    2250:	4798      	blx	r3
    2252:	2208      	movs	r2, #8
    2254:	4b0d      	ldr	r3, [pc, #52]	; (228c <_timer_start+0x50>)
    2256:	601a      	str	r2, [r3, #0]
    2258:	68e2      	ldr	r2, [r4, #12]
    225a:	6913      	ldr	r3, [r2, #16]
    225c:	2300      	movs	r3, #0
    225e:	6113      	str	r3, [r2, #16]
    2260:	7a93      	ldrb	r3, [r2, #10]
    2262:	09db      	lsrs	r3, r3, #7
    2264:	d1fc      	bne.n	2260 <_timer_start+0x24>
    2266:	68e2      	ldr	r2, [r4, #12]
    2268:	7a93      	ldrb	r3, [r2, #10]
    226a:	09db      	lsrs	r3, r3, #7
    226c:	d1fc      	bne.n	2268 <_timer_start+0x2c>
    226e:	8813      	ldrh	r3, [r2, #0]
    2270:	2102      	movs	r1, #2
    2272:	430b      	orrs	r3, r1
    2274:	8013      	strh	r3, [r2, #0]
    2276:	7a93      	ldrb	r3, [r2, #10]
    2278:	09db      	lsrs	r3, r3, #7
    227a:	d1fc      	bne.n	2276 <_timer_start+0x3a>
    227c:	bd10      	pop	{r4, pc}
    227e:	2000      	movs	r0, #0
    2280:	e7e3      	b.n	224a <_timer_start+0xe>
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00003188 	.word	0x00003188
    2288:	00001985 	.word	0x00001985
    228c:	e000e100 	.word	0xe000e100

00002290 <_timer_stop>:
    2290:	b510      	push	{r4, lr}
    2292:	1e04      	subs	r4, r0, #0
    2294:	d010      	beq.n	22b8 <_timer_stop+0x28>
    2296:	68c0      	ldr	r0, [r0, #12]
    2298:	1e43      	subs	r3, r0, #1
    229a:	4198      	sbcs	r0, r3
    229c:	b2c0      	uxtb	r0, r0
    229e:	2277      	movs	r2, #119	; 0x77
    22a0:	4906      	ldr	r1, [pc, #24]	; (22bc <_timer_stop+0x2c>)
    22a2:	4b07      	ldr	r3, [pc, #28]	; (22c0 <_timer_stop+0x30>)
    22a4:	4798      	blx	r3
    22a6:	68e2      	ldr	r2, [r4, #12]
    22a8:	8813      	ldrh	r3, [r2, #0]
    22aa:	2102      	movs	r1, #2
    22ac:	438b      	bics	r3, r1
    22ae:	8013      	strh	r3, [r2, #0]
    22b0:	7a93      	ldrb	r3, [r2, #10]
    22b2:	09db      	lsrs	r3, r3, #7
    22b4:	d1fc      	bne.n	22b0 <_timer_stop+0x20>
    22b6:	bd10      	pop	{r4, pc}
    22b8:	2000      	movs	r0, #0
    22ba:	e7f0      	b.n	229e <_timer_stop+0xe>
    22bc:	00003188 	.word	0x00003188
    22c0:	00001985 	.word	0x00001985

000022c4 <_timer_is_started>:
    22c4:	68c2      	ldr	r2, [r0, #12]
    22c6:	7a93      	ldrb	r3, [r2, #10]
    22c8:	09db      	lsrs	r3, r3, #7
    22ca:	d1fc      	bne.n	22c6 <_timer_is_started+0x2>
    22cc:	8810      	ldrh	r0, [r2, #0]
    22ce:	0780      	lsls	r0, r0, #30
    22d0:	0fc0      	lsrs	r0, r0, #31
    22d2:	4770      	bx	lr

000022d4 <_timer_set_irq>:
    22d4:	4770      	bx	lr

000022d6 <_rtc_get_timer>:
    22d6:	2000      	movs	r0, #0
    22d8:	4770      	bx	lr
	...

000022dc <RTC_Handler>:
    22dc:	b510      	push	{r4, lr}
    22de:	4b07      	ldr	r3, [pc, #28]	; (22fc <RTC_Handler+0x20>)
    22e0:	681c      	ldr	r4, [r3, #0]
    22e2:	68e3      	ldr	r3, [r4, #12]
    22e4:	7a1b      	ldrb	r3, [r3, #8]
    22e6:	07db      	lsls	r3, r3, #31
    22e8:	d507      	bpl.n	22fa <RTC_Handler+0x1e>
    22ea:	6823      	ldr	r3, [r4, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d001      	beq.n	22f4 <RTC_Handler+0x18>
    22f0:	0020      	movs	r0, r4
    22f2:	4798      	blx	r3
    22f4:	68e3      	ldr	r3, [r4, #12]
    22f6:	2201      	movs	r2, #1
    22f8:	721a      	strb	r2, [r3, #8]
    22fa:	bd10      	pop	{r4, pc}
    22fc:	2000008c 	.word	0x2000008c

00002300 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2300:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2302:	07db      	lsls	r3, r3, #31
    2304:	d409      	bmi.n	231a <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2306:	6803      	ldr	r3, [r0, #0]
    2308:	2202      	movs	r2, #2
    230a:	4313      	orrs	r3, r2
    230c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    230e:	3201      	adds	r2, #1
    2310:	69c3      	ldr	r3, [r0, #28]
    2312:	421a      	tst	r2, r3
    2314:	d1fc      	bne.n	2310 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2316:	2000      	movs	r0, #0
}
    2318:	4770      	bx	lr
		return ERR_BUSY;
    231a:	2004      	movs	r0, #4
    231c:	4240      	negs	r0, r0
    231e:	e7fb      	b.n	2318 <_spi_sync_enable+0x18>

00002320 <_spi_set_char_size>:
 * \param[out] size Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
    2320:	b510      	push	{r4, lr}
	/* Only 8-bit or 9-bit accepted */
	if (!(char_size == SPI_CHAR_SIZE_8 || char_size == SPI_CHAR_SIZE_9)) {
    2322:	2901      	cmp	r1, #1
    2324:	d815      	bhi.n	2352 <_spi_set_char_size+0x32>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2326:	69c3      	ldr	r3, [r0, #28]
    2328:	2405      	movs	r4, #5
		return ERR_INVALID_ARG;
	}

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_CTRLB)) {
    232a:	421c      	tst	r4, r3
    232c:	d114      	bne.n	2358 <_spi_set_char_size+0x38>

static inline void hri_sercomspi_write_CTRLB_CHSIZE_bf(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLB.reg;
    232e:	6843      	ldr	r3, [r0, #4]
	tmp &= ~SERCOM_SPI_CTRLB_CHSIZE_Msk;
    2330:	3402      	adds	r4, #2
    2332:	43a3      	bics	r3, r4
    2334:	001c      	movs	r4, r3
	tmp |= SERCOM_SPI_CTRLB_CHSIZE(data);
    2336:	2307      	movs	r3, #7
    2338:	400b      	ands	r3, r1
    233a:	4323      	orrs	r3, r4
	((Sercom *)hw)->SPI.CTRLB.reg = tmp;
    233c:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    233e:	2407      	movs	r4, #7
    2340:	69c3      	ldr	r3, [r0, #28]
    2342:	421c      	tst	r4, r3
    2344:	d1fc      	bne.n	2340 <_spi_set_char_size+0x20>
		return ERR_BUSY;
	}

	hri_sercomspi_write_CTRLB_CHSIZE_bf(hw, char_size);
	*size = (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
    2346:	1e4b      	subs	r3, r1, #1
    2348:	4199      	sbcs	r1, r3
    234a:	3101      	adds	r1, #1
    234c:	7011      	strb	r1, [r2, #0]

	return ERR_NONE;
    234e:	2000      	movs	r0, #0
}
    2350:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
    2352:	200d      	movs	r0, #13
    2354:	4240      	negs	r0, r0
    2356:	e7fb      	b.n	2350 <_spi_set_char_size+0x30>
		return ERR_BUSY;
    2358:	2004      	movs	r0, #4
    235a:	4240      	negs	r0, r0
    235c:	e7f8      	b.n	2350 <_spi_set_char_size+0x30>
	...

00002360 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2360:	b570      	push	{r4, r5, r6, lr}
    2362:	0006      	movs	r6, r0
    2364:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2366:	4b71      	ldr	r3, [pc, #452]	; (252c <_spi_m_sync_init+0x1cc>)
    2368:	18cb      	adds	r3, r1, r3
    236a:	0a9b      	lsrs	r3, r3, #10
    236c:	b2db      	uxtb	r3, r3
		if (sercomspi_regs[i].n == n) {
    236e:	2b00      	cmp	r3, #0
    2370:	d100      	bne.n	2374 <_spi_m_sync_init+0x14>
    2372:	e087      	b.n	2484 <_spi_m_sync_init+0x124>
    2374:	2b03      	cmp	r3, #3
    2376:	d008      	beq.n	238a <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2378:	2800      	cmp	r0, #0
    237a:	d100      	bne.n	237e <_spi_m_sync_init+0x1e>
    237c:	e0c6      	b.n	250c <_spi_m_sync_init+0x1ac>
    237e:	2900      	cmp	r1, #0
    2380:	d000      	beq.n	2384 <_spi_m_sync_init+0x24>
    2382:	e0cb      	b.n	251c <_spi_m_sync_init+0x1bc>
	return NULL;
    2384:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2386:	2000      	movs	r0, #0
    2388:	e00a      	b.n	23a0 <_spi_m_sync_init+0x40>
		if (sercomspi_regs[i].n == n) {
    238a:	3b02      	subs	r3, #2
			return &sercomspi_regs[i];
    238c:	011d      	lsls	r5, r3, #4
    238e:	18eb      	adds	r3, r5, r3
    2390:	4d67      	ldr	r5, [pc, #412]	; (2530 <_spi_m_sync_init+0x1d0>)
    2392:	3518      	adds	r5, #24
    2394:	18ed      	adds	r5, r5, r3
	ASSERT(dev && hw);
    2396:	2e00      	cmp	r6, #0
    2398:	d0f5      	beq.n	2386 <_spi_m_sync_init+0x26>
    239a:	2001      	movs	r0, #1
    239c:	2c00      	cmp	r4, #0
    239e:	d0f2      	beq.n	2386 <_spi_m_sync_init+0x26>
    23a0:	4a64      	ldr	r2, [pc, #400]	; (2534 <_spi_m_sync_init+0x1d4>)
    23a2:	4965      	ldr	r1, [pc, #404]	; (2538 <_spi_m_sync_init+0x1d8>)
    23a4:	4b65      	ldr	r3, [pc, #404]	; (253c <_spi_m_sync_init+0x1dc>)
    23a6:	4798      	blx	r3

	if (regs == NULL) {
    23a8:	2d00      	cmp	r5, #0
    23aa:	d100      	bne.n	23ae <_spi_m_sync_init+0x4e>
    23ac:	e0ab      	b.n	2506 <_spi_m_sync_init+0x1a6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    23ae:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    23b0:	07db      	lsls	r3, r3, #31
    23b2:	d41c      	bmi.n	23ee <_spi_m_sync_init+0x8e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    23b4:	7829      	ldrb	r1, [r5, #0]
    23b6:	231c      	movs	r3, #28
    23b8:	4019      	ands	r1, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23ba:	2203      	movs	r2, #3
    23bc:	69e3      	ldr	r3, [r4, #28]
    23be:	421a      	tst	r2, r3
    23c0:	d1fc      	bne.n	23bc <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    23c2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    23c4:	079b      	lsls	r3, r3, #30
    23c6:	d50b      	bpl.n	23e0 <_spi_m_sync_init+0x80>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    23c8:	6823      	ldr	r3, [r4, #0]
    23ca:	2202      	movs	r2, #2
    23cc:	4393      	bics	r3, r2
    23ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23d0:	3201      	adds	r2, #1
    23d2:	69e3      	ldr	r3, [r4, #28]
    23d4:	421a      	tst	r2, r3
    23d6:	d1fc      	bne.n	23d2 <_spi_m_sync_init+0x72>
    23d8:	2202      	movs	r2, #2
    23da:	69e3      	ldr	r3, [r4, #28]
    23dc:	421a      	tst	r2, r3
    23de:	d1fc      	bne.n	23da <_spi_m_sync_init+0x7a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    23e0:	2301      	movs	r3, #1
    23e2:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    23e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23e6:	2203      	movs	r2, #3
    23e8:	69e3      	ldr	r3, [r4, #28]
    23ea:	421a      	tst	r2, r3
    23ec:	d1fc      	bne.n	23e8 <_spi_m_sync_init+0x88>
    23ee:	2201      	movs	r2, #1
    23f0:	69e3      	ldr	r3, [r4, #28]
    23f2:	421a      	tst	r2, r3
    23f4:	d1fc      	bne.n	23f0 <_spi_m_sync_init+0x90>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    23f6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    23f8:	782b      	ldrb	r3, [r5, #0]
    23fa:	221c      	movs	r2, #28
    23fc:	4013      	ands	r3, r2
    23fe:	2b08      	cmp	r3, #8
    2400:	d042      	beq.n	2488 <_spi_m_sync_init+0x128>
	ASSERT(hw && regs);
    2402:	0020      	movs	r0, r4
    2404:	1e43      	subs	r3, r0, #1
    2406:	4198      	sbcs	r0, r3
    2408:	b2c0      	uxtb	r0, r0
    240a:	4a4d      	ldr	r2, [pc, #308]	; (2540 <_spi_m_sync_init+0x1e0>)
    240c:	494a      	ldr	r1, [pc, #296]	; (2538 <_spi_m_sync_init+0x1d8>)
    240e:	4b4b      	ldr	r3, [pc, #300]	; (253c <_spi_m_sync_init+0x1dc>)
    2410:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2412:	782b      	ldrb	r3, [r5, #0]
    2414:	786a      	ldrb	r2, [r5, #1]
    2416:	0212      	lsls	r2, r2, #8
    2418:	431a      	orrs	r2, r3
    241a:	78ab      	ldrb	r3, [r5, #2]
    241c:	041b      	lsls	r3, r3, #16
    241e:	431a      	orrs	r2, r3
    2420:	78eb      	ldrb	r3, [r5, #3]
    2422:	061b      	lsls	r3, r3, #24
    2424:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2426:	4a47      	ldr	r2, [pc, #284]	; (2544 <_spi_m_sync_init+0x1e4>)
    2428:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    242a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    242c:	3208      	adds	r2, #8
    242e:	32ff      	adds	r2, #255	; 0xff
    2430:	69e3      	ldr	r3, [r4, #28]
    2432:	421a      	tst	r2, r3
    2434:	d1fc      	bne.n	2430 <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
    2436:	792b      	ldrb	r3, [r5, #4]
    2438:	796a      	ldrb	r2, [r5, #5]
    243a:	0212      	lsls	r2, r2, #8
    243c:	431a      	orrs	r2, r3
    243e:	79ab      	ldrb	r3, [r5, #6]
    2440:	041b      	lsls	r3, r3, #16
    2442:	431a      	orrs	r2, r3
    2444:	79eb      	ldrb	r3, [r5, #7]
    2446:	061b      	lsls	r3, r3, #24
    2448:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    244a:	4a3f      	ldr	r2, [pc, #252]	; (2548 <_spi_m_sync_init+0x1e8>)
    244c:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    244e:	2280      	movs	r2, #128	; 0x80
    2450:	0292      	lsls	r2, r2, #10
    2452:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2454:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2456:	2207      	movs	r2, #7
    2458:	69e3      	ldr	r3, [r4, #28]
    245a:	421a      	tst	r2, r3
    245c:	d1fc      	bne.n	2458 <_spi_m_sync_init+0xf8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    245e:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2460:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2462:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2464:	2330      	movs	r3, #48	; 0x30
    2466:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2468:	792b      	ldrb	r3, [r5, #4]
    246a:	2207      	movs	r2, #7
    246c:	4013      	ands	r3, r2
    246e:	1e5a      	subs	r2, r3, #1
    2470:	4193      	sbcs	r3, r2
    2472:	3301      	adds	r3, #1
    2474:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2476:	7baa      	ldrb	r2, [r5, #14]
    2478:	7beb      	ldrb	r3, [r5, #15]
    247a:	021b      	lsls	r3, r3, #8
    247c:	4313      	orrs	r3, r2
    247e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2480:	2000      	movs	r0, #0
}
    2482:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    2484:	2300      	movs	r3, #0
    2486:	e781      	b.n	238c <_spi_m_sync_init+0x2c>
	ASSERT(hw && regs);
    2488:	0020      	movs	r0, r4
    248a:	1e43      	subs	r3, r0, #1
    248c:	4198      	sbcs	r0, r3
    248e:	b2c0      	uxtb	r0, r0
    2490:	4a2e      	ldr	r2, [pc, #184]	; (254c <_spi_m_sync_init+0x1ec>)
    2492:	4929      	ldr	r1, [pc, #164]	; (2538 <_spi_m_sync_init+0x1d8>)
    2494:	4b29      	ldr	r3, [pc, #164]	; (253c <_spi_m_sync_init+0x1dc>)
    2496:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2498:	782b      	ldrb	r3, [r5, #0]
    249a:	786a      	ldrb	r2, [r5, #1]
    249c:	0212      	lsls	r2, r2, #8
    249e:	431a      	orrs	r2, r3
    24a0:	78ab      	ldrb	r3, [r5, #2]
    24a2:	041b      	lsls	r3, r3, #16
    24a4:	431a      	orrs	r2, r3
    24a6:	78eb      	ldrb	r3, [r5, #3]
    24a8:	061b      	lsls	r3, r3, #24
    24aa:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    24ac:	4a25      	ldr	r2, [pc, #148]	; (2544 <_spi_m_sync_init+0x1e4>)
    24ae:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    24b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24b2:	3208      	adds	r2, #8
    24b4:	32ff      	adds	r2, #255	; 0xff
    24b6:	69e3      	ldr	r3, [r4, #28]
    24b8:	421a      	tst	r2, r3
    24ba:	d1fc      	bne.n	24b6 <_spi_m_sync_init+0x156>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    24bc:	792b      	ldrb	r3, [r5, #4]
    24be:	796a      	ldrb	r2, [r5, #5]
    24c0:	0212      	lsls	r2, r2, #8
    24c2:	431a      	orrs	r2, r3
    24c4:	79ab      	ldrb	r3, [r5, #6]
    24c6:	041b      	lsls	r3, r3, #16
    24c8:	431a      	orrs	r2, r3
    24ca:	79eb      	ldrb	r3, [r5, #7]
    24cc:	061b      	lsls	r3, r3, #24
    24ce:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    24d0:	4a1f      	ldr	r2, [pc, #124]	; (2550 <_spi_m_sync_init+0x1f0>)
    24d2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    24d4:	4a1f      	ldr	r2, [pc, #124]	; (2554 <_spi_m_sync_init+0x1f4>)
    24d6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    24d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24da:	2207      	movs	r2, #7
    24dc:	69e3      	ldr	r3, [r4, #28]
    24de:	421a      	tst	r2, r3
    24e0:	d1fc      	bne.n	24dc <_spi_m_sync_init+0x17c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    24e2:	7a2b      	ldrb	r3, [r5, #8]
    24e4:	7a6a      	ldrb	r2, [r5, #9]
    24e6:	0212      	lsls	r2, r2, #8
    24e8:	431a      	orrs	r2, r3
    24ea:	7aab      	ldrb	r3, [r5, #10]
    24ec:	041b      	lsls	r3, r3, #16
    24ee:	431a      	orrs	r2, r3
    24f0:	7aeb      	ldrb	r3, [r5, #11]
    24f2:	061b      	lsls	r3, r3, #24
    24f4:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    24f6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    24f8:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    24fa:	2330      	movs	r3, #48	; 0x30
    24fc:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    24fe:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2500:	2b00      	cmp	r3, #0
    2502:	d1fc      	bne.n	24fe <_spi_m_sync_init+0x19e>
    2504:	e7b0      	b.n	2468 <_spi_m_sync_init+0x108>
		return ERR_INVALID_ARG;
    2506:	200d      	movs	r0, #13
    2508:	4240      	negs	r0, r0
    250a:	e7ba      	b.n	2482 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    250c:	4a09      	ldr	r2, [pc, #36]	; (2534 <_spi_m_sync_init+0x1d4>)
    250e:	490a      	ldr	r1, [pc, #40]	; (2538 <_spi_m_sync_init+0x1d8>)
    2510:	2000      	movs	r0, #0
    2512:	4b0a      	ldr	r3, [pc, #40]	; (253c <_spi_m_sync_init+0x1dc>)
    2514:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2516:	200d      	movs	r0, #13
    2518:	4240      	negs	r0, r0
    251a:	e7b2      	b.n	2482 <_spi_m_sync_init+0x122>
	ASSERT(dev && hw);
    251c:	4a05      	ldr	r2, [pc, #20]	; (2534 <_spi_m_sync_init+0x1d4>)
    251e:	4906      	ldr	r1, [pc, #24]	; (2538 <_spi_m_sync_init+0x1d8>)
    2520:	2001      	movs	r0, #1
    2522:	4b06      	ldr	r3, [pc, #24]	; (253c <_spi_m_sync_init+0x1dc>)
    2524:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2526:	200d      	movs	r0, #13
    2528:	4240      	negs	r0, r0
    252a:	e7aa      	b.n	2482 <_spi_m_sync_init+0x122>
    252c:	bdfff800 	.word	0xbdfff800
    2530:	000031a0 	.word	0x000031a0
    2534:	00000925 	.word	0x00000925
    2538:	000031dc 	.word	0x000031dc
    253c:	00001985 	.word	0x00001985
    2540:	000008ef 	.word	0x000008ef
    2544:	fffffefc 	.word	0xfffffefc
    2548:	fffd1dbf 	.word	0xfffd1dbf
    254c:	00000903 	.word	0x00000903
    2550:	fffdddbf 	.word	0xfffdddbf
    2554:	00020240 	.word	0x00020240

00002558 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    2558:	b510      	push	{r4, lr}
    255a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    255c:	d00c      	beq.n	2578 <_spi_m_sync_enable+0x20>
    255e:	6800      	ldr	r0, [r0, #0]
    2560:	1e43      	subs	r3, r0, #1
    2562:	4198      	sbcs	r0, r3
    2564:	b2c0      	uxtb	r0, r0
    2566:	2298      	movs	r2, #152	; 0x98
    2568:	0112      	lsls	r2, r2, #4
    256a:	4904      	ldr	r1, [pc, #16]	; (257c <_spi_m_sync_enable+0x24>)
    256c:	4b04      	ldr	r3, [pc, #16]	; (2580 <_spi_m_sync_enable+0x28>)
    256e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2570:	6820      	ldr	r0, [r4, #0]
    2572:	4b04      	ldr	r3, [pc, #16]	; (2584 <_spi_m_sync_enable+0x2c>)
    2574:	4798      	blx	r3
}
    2576:	bd10      	pop	{r4, pc}
    2578:	2000      	movs	r0, #0
    257a:	e7f4      	b.n	2566 <_spi_m_sync_enable+0xe>
    257c:	000031dc 	.word	0x000031dc
    2580:	00001985 	.word	0x00001985
    2584:	00002301 	.word	0x00002301

00002588 <_spi_m_sync_set_baudrate>:
	rc = ((clk >> 1) / baud) - 1;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	0005      	movs	r5, r0
    258c:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    258e:	2800      	cmp	r0, #0
    2590:	d00f      	beq.n	25b2 <_spi_m_sync_set_baudrate+0x2a>
    2592:	6800      	ldr	r0, [r0, #0]
    2594:	1e43      	subs	r3, r0, #1
    2596:	4198      	sbcs	r0, r3
    2598:	b2c0      	uxtb	r0, r0
    259a:	4a08      	ldr	r2, [pc, #32]	; (25bc <_spi_m_sync_set_baudrate+0x34>)
    259c:	4908      	ldr	r1, [pc, #32]	; (25c0 <_spi_m_sync_set_baudrate+0x38>)
    259e:	4b09      	ldr	r3, [pc, #36]	; (25c4 <_spi_m_sync_set_baudrate+0x3c>)
    25a0:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
    25a2:	682b      	ldr	r3, [r5, #0]
    25a4:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    25a6:	07d2      	lsls	r2, r2, #31
    25a8:	d405      	bmi.n	25b6 <_spi_m_sync_set_baudrate+0x2e>
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    25aa:	b2e4      	uxtb	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    25ac:	731c      	strb	r4, [r3, #12]
	return ERR_NONE;
    25ae:	2000      	movs	r0, #0
}
    25b0:	bd70      	pop	{r4, r5, r6, pc}
    25b2:	2000      	movs	r0, #0
    25b4:	e7f1      	b.n	259a <_spi_m_sync_set_baudrate+0x12>
		return ERR_BUSY;
    25b6:	2004      	movs	r0, #4
    25b8:	4240      	negs	r0, r0
	return _spi_set_baudrate(dev->prvt, baud_val);
    25ba:	e7f9      	b.n	25b0 <_spi_m_sync_set_baudrate+0x28>
    25bc:	000009e7 	.word	0x000009e7
    25c0:	000031dc 	.word	0x000031dc
    25c4:	00001985 	.word	0x00001985

000025c8 <_spi_m_sync_set_char_size>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
    25c8:	b570      	push	{r4, r5, r6, lr}
    25ca:	0005      	movs	r5, r0
    25cc:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    25ce:	2800      	cmp	r0, #0
    25d0:	d00d      	beq.n	25ee <_spi_m_sync_set_char_size+0x26>
    25d2:	6800      	ldr	r0, [r0, #0]
    25d4:	1e43      	subs	r3, r0, #1
    25d6:	4198      	sbcs	r0, r3
    25d8:	b2c0      	uxtb	r0, r0
    25da:	4a06      	ldr	r2, [pc, #24]	; (25f4 <_spi_m_sync_set_char_size+0x2c>)
    25dc:	4906      	ldr	r1, [pc, #24]	; (25f8 <_spi_m_sync_set_char_size+0x30>)
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <_spi_m_sync_set_char_size+0x34>)
    25e0:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
    25e2:	1d2a      	adds	r2, r5, #4
    25e4:	6828      	ldr	r0, [r5, #0]
    25e6:	0021      	movs	r1, r4
    25e8:	4b05      	ldr	r3, [pc, #20]	; (2600 <_spi_m_sync_set_char_size+0x38>)
    25ea:	4798      	blx	r3
}
    25ec:	bd70      	pop	{r4, r5, r6, pc}
    25ee:	2000      	movs	r0, #0
    25f0:	e7f3      	b.n	25da <_spi_m_sync_set_char_size+0x12>
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	000009f5 	.word	0x000009f5
    25f8:	000031dc 	.word	0x000031dc
    25fc:	00001985 	.word	0x00001985
    2600:	00002321 	.word	0x00002321

00002604 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	46de      	mov	lr, fp
    2608:	4657      	mov	r7, sl
    260a:	464e      	mov	r6, r9
    260c:	4645      	mov	r5, r8
    260e:	b5e0      	push	{r5, r6, r7, lr}
    2610:	b083      	sub	sp, #12
    2612:	4681      	mov	r9, r0
    2614:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    2616:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2618:	680b      	ldr	r3, [r1, #0]
    261a:	4698      	mov	r8, r3
    261c:	684d      	ldr	r5, [r1, #4]
    261e:	7903      	ldrb	r3, [r0, #4]
    2620:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2622:	2800      	cmp	r0, #0
    2624:	d015      	beq.n	2652 <_spi_m_sync_trans+0x4e>
    2626:	0020      	movs	r0, r4
    2628:	1e43      	subs	r3, r0, #1
    262a:	4198      	sbcs	r0, r3
    262c:	b2c0      	uxtb	r0, r0
    262e:	4a36      	ldr	r2, [pc, #216]	; (2708 <_spi_m_sync_trans+0x104>)
    2630:	4936      	ldr	r1, [pc, #216]	; (270c <_spi_m_sync_trans+0x108>)
    2632:	4b37      	ldr	r3, [pc, #220]	; (2710 <_spi_m_sync_trans+0x10c>)
    2634:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2636:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2638:	075b      	lsls	r3, r3, #29
    263a:	d13f      	bne.n	26bc <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    263c:	2303      	movs	r3, #3
    263e:	69e0      	ldr	r0, [r4, #28]
    2640:	4018      	ands	r0, r3
    2642:	d1fc      	bne.n	263e <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2644:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2646:	079b      	lsls	r3, r3, #30
    2648:	d53b      	bpl.n	26c2 <_spi_m_sync_trans+0xbe>
    264a:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    264c:	2301      	movs	r3, #1
    264e:	469c      	mov	ip, r3
    2650:	e009      	b.n	2666 <_spi_m_sync_trans+0x62>
    2652:	2000      	movs	r0, #0
    2654:	e7eb      	b.n	262e <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    2656:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    2658:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    265a:	b25b      	sxtb	r3, r3
    265c:	2b00      	cmp	r3, #0
    265e:	db16      	blt.n	268e <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2660:	68b3      	ldr	r3, [r6, #8]
    2662:	4283      	cmp	r3, r0
    2664:	d927      	bls.n	26b6 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2666:	7e23      	ldrb	r3, [r4, #24]
    2668:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    266a:	2104      	movs	r1, #4
    266c:	4219      	tst	r1, r3
    266e:	d02b      	beq.n	26c8 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2670:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2672:	2d00      	cmp	r5, #0
    2674:	d0f0      	beq.n	2658 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    2676:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    2678:	9901      	ldr	r1, [sp, #4]
    267a:	2901      	cmp	r1, #1
    267c:	d9eb      	bls.n	2656 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    267e:	0a3f      	lsrs	r7, r7, #8
    2680:	706f      	strb	r7, [r5, #1]
    2682:	3502      	adds	r5, #2
    2684:	e7e8      	b.n	2658 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    2686:	2101      	movs	r1, #1
    2688:	468b      	mov	fp, r1
    268a:	44d8      	add	r8, fp
    268c:	e037      	b.n	26fe <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    268e:	2301      	movs	r3, #1
    2690:	425b      	negs	r3, r3
    2692:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2694:	3381      	adds	r3, #129	; 0x81
    2696:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2698:	2013      	movs	r0, #19
    269a:	4240      	negs	r0, r0
	tmp &= mask;
    269c:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    269e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    26a0:	4213      	tst	r3, r2
    26a2:	d0fc      	beq.n	269e <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    26a4:	2303      	movs	r3, #3
    26a6:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    26a8:	b003      	add	sp, #12
    26aa:	bc3c      	pop	{r2, r3, r4, r5}
    26ac:	4690      	mov	r8, r2
    26ae:	4699      	mov	r9, r3
    26b0:	46a2      	mov	sl, r4
    26b2:	46ab      	mov	fp, r5
    26b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    26b6:	4293      	cmp	r3, r2
    26b8:	d8d5      	bhi.n	2666 <_spi_m_sync_trans+0x62>
    26ba:	e7ef      	b.n	269c <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    26bc:	2004      	movs	r0, #4
    26be:	4240      	negs	r0, r0
    26c0:	e7f2      	b.n	26a8 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    26c2:	2014      	movs	r0, #20
    26c4:	4240      	negs	r0, r0
    26c6:	e7ef      	b.n	26a8 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    26c8:	4290      	cmp	r0, r2
    26ca:	d8c6      	bhi.n	265a <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    26cc:	4667      	mov	r7, ip
    26ce:	421f      	tst	r7, r3
    26d0:	d0c3      	beq.n	265a <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    26d2:	464f      	mov	r7, r9
    26d4:	88ff      	ldrh	r7, [r7, #6]
    26d6:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    26d8:	4647      	mov	r7, r8
    26da:	2f00      	cmp	r7, #0
    26dc:	d00f      	beq.n	26fe <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    26de:	783f      	ldrb	r7, [r7, #0]
    26e0:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    26e2:	9901      	ldr	r1, [sp, #4]
    26e4:	2901      	cmp	r1, #1
    26e6:	d9ce      	bls.n	2686 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    26e8:	4647      	mov	r7, r8
    26ea:	787f      	ldrb	r7, [r7, #1]
    26ec:	023f      	lsls	r7, r7, #8
    26ee:	46bb      	mov	fp, r7
    26f0:	4657      	mov	r7, sl
    26f2:	4659      	mov	r1, fp
    26f4:	430f      	orrs	r7, r1
    26f6:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    26f8:	2102      	movs	r1, #2
    26fa:	468b      	mov	fp, r1
    26fc:	44d8      	add	r8, fp
	ctrl->txcnt++;
    26fe:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2700:	4657      	mov	r7, sl
    2702:	62a7      	str	r7, [r4, #40]	; 0x28
    2704:	e7a9      	b.n	265a <_spi_m_sync_trans+0x56>
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	00000a85 	.word	0x00000a85
    270c:	000031dc 	.word	0x000031dc
    2710:	00001985 	.word	0x00001985

00002714 <_sysctrl_init_sources>:
    2714:	4b0e      	ldr	r3, [pc, #56]	; (2750 <_sysctrl_init_sources+0x3c>)
    2716:	6a1a      	ldr	r2, [r3, #32]
    2718:	6a19      	ldr	r1, [r3, #32]
    271a:	480e      	ldr	r0, [pc, #56]	; (2754 <_sysctrl_init_sources+0x40>)
    271c:	4002      	ands	r2, r0
    271e:	0f89      	lsrs	r1, r1, #30
    2720:	0789      	lsls	r1, r1, #30
    2722:	480d      	ldr	r0, [pc, #52]	; (2758 <_sysctrl_init_sources+0x44>)
    2724:	4301      	orrs	r1, r0
    2726:	430a      	orrs	r2, r1
    2728:	621a      	str	r2, [r3, #32]
    272a:	699a      	ldr	r2, [r3, #24]
    272c:	2102      	movs	r1, #2
    272e:	430a      	orrs	r2, r1
    2730:	619a      	str	r2, [r3, #24]
    2732:	7f1a      	ldrb	r2, [r3, #28]
    2734:	311d      	adds	r1, #29
    2736:	400a      	ands	r2, r1
    2738:	771a      	strb	r2, [r3, #28]
    273a:	0019      	movs	r1, r3
    273c:	2208      	movs	r2, #8
    273e:	68cb      	ldr	r3, [r1, #12]
    2740:	421a      	tst	r2, r3
    2742:	d0fc      	beq.n	273e <_sysctrl_init_sources+0x2a>
    2744:	4a02      	ldr	r2, [pc, #8]	; (2750 <_sysctrl_init_sources+0x3c>)
    2746:	6a13      	ldr	r3, [r2, #32]
    2748:	2180      	movs	r1, #128	; 0x80
    274a:	430b      	orrs	r3, r1
    274c:	6213      	str	r3, [r2, #32]
    274e:	4770      	bx	lr
    2750:	40000800 	.word	0x40000800
    2754:	0fff0000 	.word	0x0fff0000
    2758:	00000302 	.word	0x00000302

0000275c <_sysctrl_init_referenced_generators>:
    275c:	4a02      	ldr	r2, [pc, #8]	; (2768 <_sysctrl_init_referenced_generators+0xc>)
    275e:	6993      	ldr	r3, [r2, #24]
    2760:	2102      	movs	r1, #2
    2762:	438b      	bics	r3, r1
    2764:	6193      	str	r3, [r2, #24]
    2766:	4770      	bx	lr
    2768:	40000800 	.word	0x40000800

0000276c <_delay_init>:
    276c:	4b02      	ldr	r3, [pc, #8]	; (2778 <_delay_init+0xc>)
    276e:	4a03      	ldr	r2, [pc, #12]	; (277c <_delay_init+0x10>)
    2770:	605a      	str	r2, [r3, #4]
    2772:	2205      	movs	r2, #5
    2774:	601a      	str	r2, [r3, #0]
    2776:	4770      	bx	lr
    2778:	e000e010 	.word	0xe000e010
    277c:	00ffffff 	.word	0x00ffffff

00002780 <_delay_cycles>:
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	0e0b      	lsrs	r3, r1, #24
    2784:	1e5e      	subs	r6, r3, #1
    2786:	b2f6      	uxtb	r6, r6
    2788:	2b00      	cmp	r3, #0
    278a:	d013      	beq.n	27b4 <_delay_cycles+0x34>
    278c:	0034      	movs	r4, r6
    278e:	4a0e      	ldr	r2, [pc, #56]	; (27c8 <_delay_cycles+0x48>)
    2790:	4d0e      	ldr	r5, [pc, #56]	; (27cc <_delay_cycles+0x4c>)
    2792:	2080      	movs	r0, #128	; 0x80
    2794:	0240      	lsls	r0, r0, #9
    2796:	6055      	str	r5, [r2, #4]
    2798:	6095      	str	r5, [r2, #8]
    279a:	6813      	ldr	r3, [r2, #0]
    279c:	4203      	tst	r3, r0
    279e:	d0fc      	beq.n	279a <_delay_cycles+0x1a>
    27a0:	3c01      	subs	r4, #1
    27a2:	b2e4      	uxtb	r4, r4
    27a4:	2cff      	cmp	r4, #255	; 0xff
    27a6:	d1f6      	bne.n	2796 <_delay_cycles+0x16>
    27a8:	0633      	lsls	r3, r6, #24
    27aa:	1af6      	subs	r6, r6, r3
    27ac:	4b08      	ldr	r3, [pc, #32]	; (27d0 <_delay_cycles+0x50>)
    27ae:	469c      	mov	ip, r3
    27b0:	4461      	add	r1, ip
    27b2:	1871      	adds	r1, r6, r1
    27b4:	4b04      	ldr	r3, [pc, #16]	; (27c8 <_delay_cycles+0x48>)
    27b6:	6059      	str	r1, [r3, #4]
    27b8:	6099      	str	r1, [r3, #8]
    27ba:	0019      	movs	r1, r3
    27bc:	2280      	movs	r2, #128	; 0x80
    27be:	0252      	lsls	r2, r2, #9
    27c0:	680b      	ldr	r3, [r1, #0]
    27c2:	4213      	tst	r3, r2
    27c4:	d0fc      	beq.n	27c0 <_delay_cycles+0x40>
    27c6:	bd70      	pop	{r4, r5, r6, pc}
    27c8:	e000e010 	.word	0xe000e010
    27cc:	00ffffff 	.word	0x00ffffff
    27d0:	ff000001 	.word	0xff000001

000027d4 <get_tc_index>:
    27d4:	b510      	push	{r4, lr}
    27d6:	4b0a      	ldr	r3, [pc, #40]	; (2800 <get_tc_index+0x2c>)
    27d8:	469c      	mov	ip, r3
    27da:	4460      	add	r0, ip
    27dc:	0a80      	lsrs	r0, r0, #10
    27de:	3003      	adds	r0, #3
    27e0:	4b08      	ldr	r3, [pc, #32]	; (2804 <get_tc_index+0x30>)
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	b2c0      	uxtb	r0, r0
    27e6:	4283      	cmp	r3, r0
    27e8:	d008      	beq.n	27fc <get_tc_index+0x28>
    27ea:	225a      	movs	r2, #90	; 0x5a
    27ec:	32ff      	adds	r2, #255	; 0xff
    27ee:	4906      	ldr	r1, [pc, #24]	; (2808 <get_tc_index+0x34>)
    27f0:	2000      	movs	r0, #0
    27f2:	4b06      	ldr	r3, [pc, #24]	; (280c <get_tc_index+0x38>)
    27f4:	4798      	blx	r3
    27f6:	2001      	movs	r0, #1
    27f8:	4240      	negs	r0, r0
    27fa:	bd10      	pop	{r4, pc}
    27fc:	2000      	movs	r0, #0
    27fe:	e7fc      	b.n	27fa <get_tc_index+0x26>
    2800:	bdffd400 	.word	0xbdffd400
    2804:	20000000 	.word	0x20000000
    2808:	000031f8 	.word	0x000031f8
    280c:	00001985 	.word	0x00001985

00002810 <_pwm_init>:
    2810:	b570      	push	{r4, r5, r6, lr}
    2812:	0005      	movs	r5, r0
    2814:	000c      	movs	r4, r1
    2816:	0008      	movs	r0, r1
    2818:	4b30      	ldr	r3, [pc, #192]	; (28dc <_pwm_init+0xcc>)
    281a:	4798      	blx	r3
    281c:	612c      	str	r4, [r5, #16]
    281e:	7be3      	ldrb	r3, [r4, #15]
    2820:	09db      	lsrs	r3, r3, #7
    2822:	d1fc      	bne.n	281e <_pwm_init+0xe>
    2824:	8823      	ldrh	r3, [r4, #0]
    2826:	079b      	lsls	r3, r3, #30
    2828:	d504      	bpl.n	2834 <_pwm_init+0x24>
    282a:	2300      	movs	r3, #0
    282c:	8023      	strh	r3, [r4, #0]
    282e:	7be3      	ldrb	r3, [r4, #15]
    2830:	09db      	lsrs	r3, r3, #7
    2832:	d1fc      	bne.n	282e <_pwm_init+0x1e>
    2834:	2301      	movs	r3, #1
    2836:	8023      	strh	r3, [r4, #0]
    2838:	7be3      	ldrb	r3, [r4, #15]
    283a:	09db      	lsrs	r3, r3, #7
    283c:	d1fc      	bne.n	2838 <_pwm_init+0x28>
    283e:	0083      	lsls	r3, r0, #2
    2840:	181b      	adds	r3, r3, r0
    2842:	009a      	lsls	r2, r3, #2
    2844:	4b26      	ldr	r3, [pc, #152]	; (28e0 <_pwm_init+0xd0>)
    2846:	189b      	adds	r3, r3, r2
    2848:	885a      	ldrh	r2, [r3, #2]
    284a:	8022      	strh	r2, [r4, #0]
    284c:	7919      	ldrb	r1, [r3, #4]
    284e:	7221      	strb	r1, [r4, #8]
    2850:	88db      	ldrh	r3, [r3, #6]
    2852:	8163      	strh	r3, [r4, #10]
    2854:	230c      	movs	r3, #12
    2856:	4013      	ands	r3, r2
    2858:	2b08      	cmp	r3, #8
    285a:	d029      	beq.n	28b0 <_pwm_init+0xa0>
    285c:	2b00      	cmp	r3, #0
    285e:	d138      	bne.n	28d2 <_pwm_init+0xc2>
    2860:	491f      	ldr	r1, [pc, #124]	; (28e0 <_pwm_init+0xd0>)
    2862:	0083      	lsls	r3, r0, #2
    2864:	181a      	adds	r2, r3, r0
    2866:	0092      	lsls	r2, r2, #2
    2868:	188a      	adds	r2, r1, r2
    286a:	8992      	ldrh	r2, [r2, #12]
    286c:	8322      	strh	r2, [r4, #24]
    286e:	1818      	adds	r0, r3, r0
    2870:	0080      	lsls	r0, r0, #2
    2872:	1808      	adds	r0, r1, r0
    2874:	8a03      	ldrh	r3, [r0, #16]
    2876:	8363      	strh	r3, [r4, #26]
    2878:	4b1a      	ldr	r3, [pc, #104]	; (28e4 <_pwm_init+0xd4>)
    287a:	429c      	cmp	r4, r3
    287c:	d025      	beq.n	28ca <_pwm_init+0xba>
    287e:	4b1a      	ldr	r3, [pc, #104]	; (28e8 <_pwm_init+0xd8>)
    2880:	469c      	mov	ip, r3
    2882:	4464      	add	r4, ip
    2884:	0aa4      	lsrs	r4, r4, #10
    2886:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    2888:	b2e3      	uxtb	r3, r4
    288a:	0622      	lsls	r2, r4, #24
    288c:	d424      	bmi.n	28d8 <_pwm_init+0xc8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    288e:	221f      	movs	r2, #31
    2890:	401a      	ands	r2, r3
    2892:	2301      	movs	r3, #1
    2894:	4093      	lsls	r3, r2
    2896:	4a15      	ldr	r2, [pc, #84]	; (28ec <_pwm_init+0xdc>)
    2898:	2180      	movs	r1, #128	; 0x80
    289a:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    289c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28a0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28a4:	3101      	adds	r1, #1
    28a6:	31ff      	adds	r1, #255	; 0xff
    28a8:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28aa:	6013      	str	r3, [r2, #0]
    28ac:	2000      	movs	r0, #0
    28ae:	bd70      	pop	{r4, r5, r6, pc}
    28b0:	490b      	ldr	r1, [pc, #44]	; (28e0 <_pwm_init+0xd0>)
    28b2:	0083      	lsls	r3, r0, #2
    28b4:	181a      	adds	r2, r3, r0
    28b6:	0092      	lsls	r2, r2, #2
    28b8:	188a      	adds	r2, r1, r2
    28ba:	68d2      	ldr	r2, [r2, #12]
    28bc:	61a2      	str	r2, [r4, #24]
    28be:	1818      	adds	r0, r3, r0
    28c0:	0080      	lsls	r0, r0, #2
    28c2:	1808      	adds	r0, r1, r0
    28c4:	6903      	ldr	r3, [r0, #16]
    28c6:	61e3      	str	r3, [r4, #28]
    28c8:	e7d6      	b.n	2878 <_pwm_init+0x68>
    28ca:	4b09      	ldr	r3, [pc, #36]	; (28f0 <_pwm_init+0xe0>)
    28cc:	601d      	str	r5, [r3, #0]
    28ce:	2312      	movs	r3, #18
    28d0:	e7dd      	b.n	288e <_pwm_init+0x7e>
    28d2:	2001      	movs	r0, #1
    28d4:	4240      	negs	r0, r0
    28d6:	e7ea      	b.n	28ae <_pwm_init+0x9e>
    28d8:	2000      	movs	r0, #0
    28da:	e7e8      	b.n	28ae <_pwm_init+0x9e>
    28dc:	000027d5 	.word	0x000027d5
    28e0:	20000000 	.word	0x20000000
    28e4:	42002c00 	.word	0x42002c00
    28e8:	bdffd400 	.word	0xbdffd400
    28ec:	e000e100 	.word	0xe000e100
    28f0:	20000090 	.word	0x20000090

000028f4 <_tc_get_pwm>:
    28f4:	2000      	movs	r0, #0
    28f6:	4770      	bx	lr

000028f8 <TC3_Handler>:
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	4b0c      	ldr	r3, [pc, #48]	; (292c <TC3_Handler+0x34>)
    28fc:	681d      	ldr	r5, [r3, #0]
    28fe:	692c      	ldr	r4, [r5, #16]
    2900:	7ba3      	ldrb	r3, [r4, #14]
    2902:	07db      	lsls	r3, r3, #31
    2904:	d506      	bpl.n	2914 <TC3_Handler+0x1c>
    2906:	2301      	movs	r3, #1
    2908:	73a3      	strb	r3, [r4, #14]
    290a:	682b      	ldr	r3, [r5, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	d001      	beq.n	2914 <TC3_Handler+0x1c>
    2910:	0028      	movs	r0, r5
    2912:	4798      	blx	r3
    2914:	7b63      	ldrb	r3, [r4, #13]
    2916:	079b      	lsls	r3, r3, #30
    2918:	d506      	bpl.n	2928 <TC3_Handler+0x30>
    291a:	2302      	movs	r3, #2
    291c:	73a3      	strb	r3, [r4, #14]
    291e:	686b      	ldr	r3, [r5, #4]
    2920:	2b00      	cmp	r3, #0
    2922:	d001      	beq.n	2928 <TC3_Handler+0x30>
    2924:	0028      	movs	r0, r5
    2926:	4798      	blx	r3
    2928:	bd70      	pop	{r4, r5, r6, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	20000090 	.word	0x20000090

00002930 <_wdt_init>:
    2930:	b510      	push	{r4, lr}
    2932:	1e04      	subs	r4, r0, #0
    2934:	d025      	beq.n	2982 <_wdt_init+0x52>
    2936:	6800      	ldr	r0, [r0, #0]
    2938:	1e43      	subs	r3, r0, #1
    293a:	4198      	sbcs	r0, r3
    293c:	b2c0      	uxtb	r0, r0
    293e:	224f      	movs	r2, #79	; 0x4f
    2940:	4914      	ldr	r1, [pc, #80]	; (2994 <_wdt_init+0x64>)
    2942:	4b15      	ldr	r3, [pc, #84]	; (2998 <_wdt_init+0x68>)
    2944:	4798      	blx	r3
    2946:	6822      	ldr	r2, [r4, #0]
    2948:	79d3      	ldrb	r3, [r2, #7]
    294a:	09db      	lsrs	r3, r3, #7
    294c:	d1fc      	bne.n	2948 <_wdt_init+0x18>
    294e:	7813      	ldrb	r3, [r2, #0]
    2950:	09db      	lsrs	r3, r3, #7
    2952:	d118      	bne.n	2986 <_wdt_init+0x56>
    2954:	79d3      	ldrb	r3, [r2, #7]
    2956:	09db      	lsrs	r3, r3, #7
    2958:	d1fc      	bne.n	2954 <_wdt_init+0x24>
    295a:	7813      	ldrb	r3, [r2, #0]
    295c:	079b      	lsls	r3, r3, #30
    295e:	d415      	bmi.n	298c <_wdt_init+0x5c>
    2960:	7813      	ldrb	r3, [r2, #0]
    2962:	2104      	movs	r1, #4
    2964:	438b      	bics	r3, r1
    2966:	7013      	strb	r3, [r2, #0]
    2968:	79d3      	ldrb	r3, [r2, #7]
    296a:	09db      	lsrs	r3, r3, #7
    296c:	d1fc      	bne.n	2968 <_wdt_init+0x38>
    296e:	6822      	ldr	r2, [r4, #0]
    2970:	7853      	ldrb	r3, [r2, #1]
    2972:	210f      	movs	r1, #15
    2974:	438b      	bics	r3, r1
    2976:	7053      	strb	r3, [r2, #1]
    2978:	79d3      	ldrb	r3, [r2, #7]
    297a:	09db      	lsrs	r3, r3, #7
    297c:	d1fc      	bne.n	2978 <_wdt_init+0x48>
    297e:	2000      	movs	r0, #0
    2980:	bd10      	pop	{r4, pc}
    2982:	2000      	movs	r0, #0
    2984:	e7db      	b.n	293e <_wdt_init+0xe>
    2986:	2011      	movs	r0, #17
    2988:	4240      	negs	r0, r0
    298a:	e7f9      	b.n	2980 <_wdt_init+0x50>
    298c:	2011      	movs	r0, #17
    298e:	4240      	negs	r0, r0
    2990:	e7f6      	b.n	2980 <_wdt_init+0x50>
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	0000320c 	.word	0x0000320c
    2998:	00001985 	.word	0x00001985

0000299c <main>:
/**********************************************************************************************
 * Begin main function
**********************************************************************************************/

int main(void)
{
    299c:	b510      	push	{r4, lr}
    299e:	b082      	sub	sp, #8
	basal_insulin_delivered = false;
    29a0:	2300      	movs	r3, #0
    29a2:	4a37      	ldr	r2, [pc, #220]	; (2a80 <main+0xe4>)
    29a4:	7013      	strb	r3, [r2, #0]
	bolus_insulin_delivered = false;
    29a6:	4a37      	ldr	r2, [pc, #220]	; (2a84 <main+0xe8>)
    29a8:	7013      	strb	r3, [r2, #0]
	cycle_complete = false;
    29aa:	4a37      	ldr	r2, [pc, #220]	; (2a88 <main+0xec>)
    29ac:	7013      	strb	r3, [r2, #0]
	
	
	atmel_start_init(); // Initializes MCU, drivers and middleware.
    29ae:	4b37      	ldr	r3, [pc, #220]	; (2a8c <main+0xf0>)
    29b0:	4798      	blx	r3
	
	SPI_Begin(); // Start SPI Peripheral.
    29b2:	4b37      	ldr	r3, [pc, #220]	; (2a90 <main+0xf4>)
    29b4:	4798      	blx	r3
	
	TIMER_0_setup(); // Setup TIMER_0 Peripheral used for debouncing
    29b6:	4b37      	ldr	r3, [pc, #220]	; (2a94 <main+0xf8>)
    29b8:	4798      	blx	r3
	
	init_interrupts(); // Register interrupts and tie them to a callback function.
    29ba:	4b37      	ldr	r3, [pc, #220]	; (2a98 <main+0xfc>)
    29bc:	4798      	blx	r3
	
	// Check a general purpose bit in the RTC to find out if the
	// time was set previously. Set it if not.
	if(!check_rtc_initialised()) 
    29be:	4b37      	ldr	r3, [pc, #220]	; (2a9c <main+0x100>)
    29c0:	4798      	blx	r3
    29c2:	2800      	cmp	r0, #0
    29c4:	d147      	bne.n	2a56 <main+0xba>
	{
		initialise_rtc();
    29c6:	4b36      	ldr	r3, [pc, #216]	; (2aa0 <main+0x104>)
    29c8:	4798      	blx	r3
		rtc_set_current_time(20, 8, 21, 16, 28, 00); // Enter date and time values here
    29ca:	2300      	movs	r3, #0
    29cc:	9301      	str	r3, [sp, #4]
    29ce:	331c      	adds	r3, #28
    29d0:	9300      	str	r3, [sp, #0]
    29d2:	3b0c      	subs	r3, #12
    29d4:	2215      	movs	r2, #21
    29d6:	2108      	movs	r1, #8
    29d8:	2014      	movs	r0, #20
    29da:	4c32      	ldr	r4, [pc, #200]	; (2aa4 <main+0x108>)
    29dc:	47a0      	blx	r4
		basal_insulin_delivered = true; // Set true so insulin isn't delivered on first start up
    29de:	2201      	movs	r2, #1
    29e0:	4b27      	ldr	r3, [pc, #156]	; (2a80 <main+0xe4>)
    29e2:	701a      	strb	r2, [r3, #0]
		flash_initialise();
    29e4:	4b30      	ldr	r3, [pc, #192]	; (2aa8 <main+0x10c>)
    29e6:	4798      	blx	r3
		get_delivery_data();
    29e8:	4b30      	ldr	r3, [pc, #192]	; (2aac <main+0x110>)
    29ea:	4798      	blx	r3
		check_writes();
    29ec:	4b30      	ldr	r3, [pc, #192]	; (2ab0 <main+0x114>)
    29ee:	4798      	blx	r3
	//while(1)
	//{
		//turn_x_steps(false, ONE_UNIT);
	//}
	
	while(!cycle_complete)
    29f0:	4b25      	ldr	r3, [pc, #148]	; (2a88 <main+0xec>)
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	2b00      	cmp	r3, #0
    29f6:	d11b      	bne.n	2a30 <main+0x94>
	
	{
		set_leds(button_array[0]);
    29f8:	4b2e      	ldr	r3, [pc, #184]	; (2ab4 <main+0x118>)
    29fa:	7818      	ldrb	r0, [r3, #0]
    29fc:	4b2e      	ldr	r3, [pc, #184]	; (2ab8 <main+0x11c>)
    29fe:	4798      	blx	r3
		// Deliver insulin when RTC interrupts and resets MCU
		if(!basal_insulin_delivered)
    2a00:	4b1f      	ldr	r3, [pc, #124]	; (2a80 <main+0xe4>)
    2a02:	781b      	ldrb	r3, [r3, #0]
    2a04:	2b00      	cmp	r3, #0
    2a06:	d109      	bne.n	2a1c <main+0x80>
		{
			count[0]++;
    2a08:	4a2a      	ldr	r2, [pc, #168]	; (2ab4 <main+0x118>)
    2a0a:	7913      	ldrb	r3, [r2, #4]
    2a0c:	3301      	adds	r3, #1
    2a0e:	b2db      	uxtb	r3, r3
    2a10:	7113      	strb	r3, [r2, #4]
			if (count[0] < 6)
    2a12:	2b05      	cmp	r3, #5
    2a14:	d902      	bls.n	2a1c <main+0x80>
			{
			 //do nothing
			} else {
				button_array[0]++;
    2a16:	7813      	ldrb	r3, [r2, #0]
    2a18:	3301      	adds	r3, #1
    2a1a:	7013      	strb	r3, [r2, #0]
			}
		}
		
		// Increment array when button 1 is pushed and decrement array when button 2 is pushed
		
		button_array[0]++; //increment for testing purposes only!
    2a1c:	4a25      	ldr	r2, [pc, #148]	; (2ab4 <main+0x118>)
    2a1e:	7813      	ldrb	r3, [r2, #0]
    2a20:	3301      	adds	r3, #1
    2a22:	b2db      	uxtb	r3, r3
    2a24:	7013      	strb	r3, [r2, #0]
		if(button_array[0] > 0)
    2a26:	2b00      	cmp	r3, #0
    2a28:	d120      	bne.n	2a6c <main+0xd0>
		{
			turn_x_steps(true, ONE_TENTH_UNIT);
			button_array[0]--;
		}
		
		cycle_complete = true;
    2a2a:	2201      	movs	r2, #1
    2a2c:	4b16      	ldr	r3, [pc, #88]	; (2a88 <main+0xec>)
    2a2e:	701a      	strb	r2, [r3, #0]
	}
	
	flash_erase(&FLASH_0, flash_address, 1);
    2a30:	4b22      	ldr	r3, [pc, #136]	; (2abc <main+0x120>)
    2a32:	8819      	ldrh	r1, [r3, #0]
    2a34:	2201      	movs	r2, #1
    2a36:	4822      	ldr	r0, [pc, #136]	; (2ac0 <main+0x124>)
    2a38:	4b22      	ldr	r3, [pc, #136]	; (2ac4 <main+0x128>)
    2a3a:	4798      	blx	r3
	store_delivery_data();
    2a3c:	4b22      	ldr	r3, [pc, #136]	; (2ac8 <main+0x12c>)
    2a3e:	4798      	blx	r3
	delay_ms(5000);
    2a40:	4822      	ldr	r0, [pc, #136]	; (2acc <main+0x130>)
    2a42:	4b23      	ldr	r3, [pc, #140]	; (2ad0 <main+0x134>)
    2a44:	4798      	blx	r3
	leds_off();
    2a46:	4b23      	ldr	r3, [pc, #140]	; (2ad4 <main+0x138>)
    2a48:	4798      	blx	r3
	sleep(2);
    2a4a:	2002      	movs	r0, #2
    2a4c:	4b22      	ldr	r3, [pc, #136]	; (2ad8 <main+0x13c>)
    2a4e:	4798      	blx	r3
}
    2a50:	2000      	movs	r0, #0
    2a52:	b002      	add	sp, #8
    2a54:	bd10      	pop	{r4, pc}
		rtc_clear_interrupts();
    2a56:	4b21      	ldr	r3, [pc, #132]	; (2adc <main+0x140>)
    2a58:	4798      	blx	r3
		get_delivery_data();
    2a5a:	4b14      	ldr	r3, [pc, #80]	; (2aac <main+0x110>)
    2a5c:	4798      	blx	r3
		check_writes();
    2a5e:	4b14      	ldr	r3, [pc, #80]	; (2ab0 <main+0x114>)
    2a60:	4798      	blx	r3
		set_leds(button_array[0]);
    2a62:	4b14      	ldr	r3, [pc, #80]	; (2ab4 <main+0x118>)
    2a64:	7818      	ldrb	r0, [r3, #0]
    2a66:	4b14      	ldr	r3, [pc, #80]	; (2ab8 <main+0x11c>)
    2a68:	4798      	blx	r3
    2a6a:	e7c1      	b.n	29f0 <main+0x54>
			turn_x_steps(true, ONE_TENTH_UNIT);
    2a6c:	2147      	movs	r1, #71	; 0x47
    2a6e:	2001      	movs	r0, #1
    2a70:	4b1b      	ldr	r3, [pc, #108]	; (2ae0 <main+0x144>)
    2a72:	4798      	blx	r3
			button_array[0]--;
    2a74:	4a0f      	ldr	r2, [pc, #60]	; (2ab4 <main+0x118>)
    2a76:	7813      	ldrb	r3, [r2, #0]
    2a78:	3b01      	subs	r3, #1
    2a7a:	7013      	strb	r3, [r2, #0]
    2a7c:	e7d5      	b.n	2a2a <main+0x8e>
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	2000016f 	.word	0x2000016f
    2a84:	2000013c 	.word	0x2000013c
    2a88:	2000016e 	.word	0x2000016e
    2a8c:	00000115 	.word	0x00000115
    2a90:	00002de5 	.word	0x00002de5
    2a94:	00000175 	.word	0x00000175
    2a98:	000001a1 	.word	0x000001a1
    2a9c:	00002dc9 	.word	0x00002dc9
    2aa0:	00002d05 	.word	0x00002d05
    2aa4:	00002d41 	.word	0x00002d41
    2aa8:	00000dcd 	.word	0x00000dcd
    2aac:	00000e25 	.word	0x00000e25
    2ab0:	00000ea5 	.word	0x00000ea5
    2ab4:	20000094 	.word	0x20000094
    2ab8:	00000219 	.word	0x00000219
    2abc:	20000014 	.word	0x20000014
    2ac0:	200000bc 	.word	0x200000bc
    2ac4:	0000139d 	.word	0x0000139d
    2ac8:	00000d49 	.word	0x00000d49
    2acc:	00001388 	.word	0x00001388
    2ad0:	00000ffd 	.word	0x00000ffd
    2ad4:	00000371 	.word	0x00000371
    2ad8:	0000153d 	.word	0x0000153d
    2adc:	00002db1 	.word	0x00002db1
    2ae0:	00002b39 	.word	0x00002b39

00002ae4 <set_motor_direction>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2ae4:	2800      	cmp	r0, #0
    2ae6:	d105      	bne.n	2af4 <set_motor_direction+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ae8:	2280      	movs	r2, #128	; 0x80
    2aea:	0212      	lsls	r2, r2, #8
    2aec:	23c0      	movs	r3, #192	; 0xc0
    2aee:	05db      	lsls	r3, r3, #23
    2af0:	615a      	str	r2, [r3, #20]

void set_motor_direction(bool direction)
// call this function to change the value of the DIR pin on the IC which controls the direction the motor turns
{
	gpio_set_pin_level(DIR, direction);
}
    2af2:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2af4:	2280      	movs	r2, #128	; 0x80
    2af6:	0212      	lsls	r2, r2, #8
    2af8:	23c0      	movs	r3, #192	; 0xc0
    2afa:	05db      	lsls	r3, r3, #23
    2afc:	619a      	str	r2, [r3, #24]
    2afe:	e7f8      	b.n	2af2 <set_motor_direction+0xe>

00002b00 <step_motor>:

void step_motor(bool direction)
/* this function will call set_motor_direction() to set the motor function to turn one step in the direction of the passed variable. If there is a falult with the motor nothing will happen.
   One step will then be recorded in the steps_turned variable to keep track of how much the motor has turned */
{
    2b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
		set_motor_direction(direction);
    2b02:	4b0a      	ldr	r3, [pc, #40]	; (2b2c <step_motor+0x2c>)
    2b04:	4798      	blx	r3
    2b06:	26c0      	movs	r6, #192	; 0xc0
    2b08:	05f6      	lsls	r6, r6, #23
    2b0a:	2780      	movs	r7, #128	; 0x80
    2b0c:	01ff      	lsls	r7, r7, #7
    2b0e:	61b7      	str	r7, [r6, #24]
		gpio_set_pin_level(STEP, 1);
		delay_us(DELAY_TIME);
    2b10:	25fa      	movs	r5, #250	; 0xfa
    2b12:	006d      	lsls	r5, r5, #1
    2b14:	0028      	movs	r0, r5
    2b16:	4c06      	ldr	r4, [pc, #24]	; (2b30 <step_motor+0x30>)
    2b18:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b1a:	6177      	str	r7, [r6, #20]
		gpio_set_pin_level(STEP, 0);
		delay_us(DELAY_TIME);
    2b1c:	0028      	movs	r0, r5
    2b1e:	47a0      	blx	r4
		steps_turned += 1;
    2b20:	4a04      	ldr	r2, [pc, #16]	; (2b34 <step_motor+0x34>)
    2b22:	6813      	ldr	r3, [r2, #0]
    2b24:	3301      	adds	r3, #1
    2b26:	6013      	str	r3, [r2, #0]
	
	
}
    2b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00002ae5 	.word	0x00002ae5
    2b30:	00000fdd 	.word	0x00000fdd
    2b34:	2000009c 	.word	0x2000009c

00002b38 <turn_x_steps>:

void turn_x_steps(bool direction, uint16_t steps_to_turn)
/* this function will turn the motor a x number of steps in the specified direction. x will have to be worked out from the basal rate, bolus rate, and motor testing to determine
   how much insulin is actually required */ 
{
    2b38:	b570      	push	{r4, r5, r6, lr}
    2b3a:	0005      	movs	r5, r0
    2b3c:	000c      	movs	r4, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b3e:	2208      	movs	r2, #8
    2b40:	23c0      	movs	r3, #192	; 0xc0
    2b42:	05db      	lsls	r3, r3, #23
    2b44:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(BOOST_EN, true);
	delay_ms(20);
    2b46:	2014      	movs	r0, #20
    2b48:	4b07      	ldr	r3, [pc, #28]	; (2b68 <turn_x_steps+0x30>)
    2b4a:	4798      	blx	r3
	while(steps_to_turn > 0)
    2b4c:	2c00      	cmp	r4, #0
    2b4e:	d006      	beq.n	2b5e <turn_x_steps+0x26>
	{
		step_motor(direction);
    2b50:	4e06      	ldr	r6, [pc, #24]	; (2b6c <turn_x_steps+0x34>)
    2b52:	0028      	movs	r0, r5
    2b54:	47b0      	blx	r6
		steps_to_turn -=1;
    2b56:	3c01      	subs	r4, #1
    2b58:	b2a4      	uxth	r4, r4
	while(steps_to_turn > 0)
    2b5a:	2c00      	cmp	r4, #0
    2b5c:	d1f9      	bne.n	2b52 <turn_x_steps+0x1a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b5e:	2208      	movs	r2, #8
    2b60:	23c0      	movs	r3, #192	; 0xc0
    2b62:	05db      	lsls	r3, r3, #23
    2b64:	615a      	str	r2, [r3, #20]
	}
	gpio_set_pin_level(BOOST_EN, false);
}
    2b66:	bd70      	pop	{r4, r5, r6, pc}
    2b68:	00000ffd 	.word	0x00000ffd
    2b6c:	00002b01 	.word	0x00002b01

00002b70 <bin2bcd>:
// bcd2bin and bin2bcd written by max
uint8_t bcd2bin(uint8_t value){
	return (value & 0x0F) + ((value >> 4) * 10);
}

uint8_t bin2bcd(uint8_t value){
    2b70:	b570      	push	{r4, r5, r6, lr}
    2b72:	0005      	movs	r5, r0
	return ((value / 10) << 4) + value % 10;
    2b74:	210a      	movs	r1, #10
    2b76:	4b05      	ldr	r3, [pc, #20]	; (2b8c <bin2bcd+0x1c>)
    2b78:	4798      	blx	r3
    2b7a:	0104      	lsls	r4, r0, #4
    2b7c:	210a      	movs	r1, #10
    2b7e:	0028      	movs	r0, r5
    2b80:	4b03      	ldr	r3, [pc, #12]	; (2b90 <bin2bcd+0x20>)
    2b82:	4798      	blx	r3
    2b84:	1864      	adds	r4, r4, r1
    2b86:	b2e0      	uxtb	r0, r4
}
    2b88:	bd70      	pop	{r4, r5, r6, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	00002e25 	.word	0x00002e25
    2b90:	00002f31 	.word	0x00002f31

00002b94 <rtc_write_operation>:

// generic function to write address and any data to the rtc, complies the data and address into a
// single array and writes in one go, can be used to write multiple subsequent registers.
void rtc_write_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b96:	af00      	add	r7, sp, #0
    2b98:	000e      	movs	r6, r1
	uint8_t address_and_data[(data_length + 1)]; // create an array one element larger to hold 8bit address and data
    2b9a:	1c55      	adds	r5, r2, #1
    2b9c:	0013      	movs	r3, r2
    2b9e:	3308      	adds	r3, #8
    2ba0:	08db      	lsrs	r3, r3, #3
    2ba2:	00db      	lsls	r3, r3, #3
    2ba4:	4669      	mov	r1, sp
    2ba6:	1acb      	subs	r3, r1, r3
    2ba8:	469d      	mov	sp, r3
    2baa:	4669      	mov	r1, sp
	uint8_t i;
	address_and_data[0] = address; // set first element as address
    2bac:	7008      	strb	r0, [r1, #0]
	for(i = 1; i < (data_length + 1); i++)
    2bae:	2d01      	cmp	r5, #1
    2bb0:	dd0a      	ble.n	2bc8 <rtc_write_operation+0x34>
    2bb2:	2401      	movs	r4, #1
    2bb4:	2301      	movs	r3, #1
	{
		address_and_data[i] = data[(i-1)];
    2bb6:	18f0      	adds	r0, r6, r3
    2bb8:	3801      	subs	r0, #1
    2bba:	7800      	ldrb	r0, [r0, #0]
    2bbc:	5508      	strb	r0, [r1, r4]
	for(i = 1; i < (data_length + 1); i++)
    2bbe:	3301      	adds	r3, #1
    2bc0:	b2db      	uxtb	r3, r3
    2bc2:	001c      	movs	r4, r3
    2bc4:	429d      	cmp	r5, r3
    2bc6:	dcf6      	bgt.n	2bb6 <rtc_write_operation+0x22>
    2bc8:	24c0      	movs	r4, #192	; 0xc0
    2bca:	05e4      	lsls	r4, r4, #23
    2bcc:	2501      	movs	r5, #1
    2bce:	6165      	str	r5, [r4, #20]
	}
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address_and_data[0], (data_length + 1 ));
    2bd0:	3201      	adds	r2, #1
    2bd2:	4b03      	ldr	r3, [pc, #12]	; (2be0 <rtc_write_operation+0x4c>)
    2bd4:	6818      	ldr	r0, [r3, #0]
    2bd6:	4b03      	ldr	r3, [pc, #12]	; (2be4 <rtc_write_operation+0x50>)
    2bd8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bda:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2bdc:	46bd      	mov	sp, r7
    2bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2be0:	20000138 	.word	0x20000138
    2be4:	00001475 	.word	0x00001475

00002be8 <rtc_read_operation>:

// generic function to read data from the rtc, as above can read subsequent registers in one go.
void rtc_read_operation(uint8_t address, uint8_t data[], uint8_t data_length)
{
    2be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bea:	b083      	sub	sp, #12
    2bec:	000e      	movs	r6, r1
    2bee:	9200      	str	r2, [sp, #0]
    2bf0:	466b      	mov	r3, sp
    2bf2:	1dd9      	adds	r1, r3, #7
    2bf4:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bf6:	25c0      	movs	r5, #192	; 0xc0
    2bf8:	05ed      	lsls	r5, r5, #23
    2bfa:	2701      	movs	r7, #1
    2bfc:	616f      	str	r7, [r5, #20]
	gpio_set_pin_level(SS_RTC, false);
	io_write(spi_io, &address, 1);
    2bfe:	4c07      	ldr	r4, [pc, #28]	; (2c1c <rtc_read_operation+0x34>)
    2c00:	2201      	movs	r2, #1
    2c02:	6820      	ldr	r0, [r4, #0]
    2c04:	4b06      	ldr	r3, [pc, #24]	; (2c20 <rtc_read_operation+0x38>)
    2c06:	4798      	blx	r3
	io_read(spi_io, &data[0], data_length);
    2c08:	466b      	mov	r3, sp
    2c0a:	881a      	ldrh	r2, [r3, #0]
    2c0c:	6820      	ldr	r0, [r4, #0]
    2c0e:	0031      	movs	r1, r6
    2c10:	4b04      	ldr	r3, [pc, #16]	; (2c24 <rtc_read_operation+0x3c>)
    2c12:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c14:	61af      	str	r7, [r5, #24]
	gpio_set_pin_level(SS_RTC, true);
}
    2c16:	b003      	add	sp, #12
    2c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	20000138 	.word	0x20000138
    2c20:	00001475 	.word	0x00001475
    2c24:	000014a9 	.word	0x000014a9

00002c28 <set_control_1_register>:

// following functions set registers on the rtc


void set_control_1_register()
{
    2c28:	b500      	push	{lr}
    2c2a:	b083      	sub	sp, #12
	uint8_t address = 0x90; // 0x10 with a 1 bit shifted to bit 7 to denote a write = 0x90 = 10010000
	uint8_t data[1] = {0b00010101};
    2c2c:	a901      	add	r1, sp, #4
    2c2e:	2315      	movs	r3, #21
    2c30:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c32:	2201      	movs	r2, #1
    2c34:	2090      	movs	r0, #144	; 0x90
    2c36:	4b02      	ldr	r3, [pc, #8]	; (2c40 <set_control_1_register+0x18>)
    2c38:	4798      	blx	r3
}
    2c3a:	b003      	add	sp, #12
    2c3c:	bd00      	pop	{pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	00002b95 	.word	0x00002b95

00002c44 <set_control_2_register>:

void set_control_2_register()
{
    2c44:	b500      	push	{lr}
    2c46:	b083      	sub	sp, #12
	uint8_t address = 0x91; // 0x11 with a 1 bit shifted to bit 7 to allow write = 0x91 = 10010001
	uint8_t data[1] = {0b00011011};
    2c48:	a901      	add	r1, sp, #4
    2c4a:	231b      	movs	r3, #27
    2c4c:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c4e:	2201      	movs	r2, #1
    2c50:	2091      	movs	r0, #145	; 0x91
    2c52:	4b02      	ldr	r3, [pc, #8]	; (2c5c <set_control_2_register+0x18>)
    2c54:	4798      	blx	r3
}
    2c56:	b003      	add	sp, #12
    2c58:	bd00      	pop	{pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00002b95 	.word	0x00002b95

00002c60 <set_status_register>:

void set_status_register()
{
    2c60:	b500      	push	{lr}
    2c62:	b083      	sub	sp, #12
	uint8_t address = 0x9D; // 0x1D |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2c64:	a901      	add	r1, sp, #4
    2c66:	2300      	movs	r3, #0
    2c68:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c6a:	2201      	movs	r2, #1
    2c6c:	209d      	movs	r0, #157	; 0x9d
    2c6e:	4b02      	ldr	r3, [pc, #8]	; (2c78 <set_status_register+0x18>)
    2c70:	4798      	blx	r3
}
    2c72:	b003      	add	sp, #12
    2c74:	bd00      	pop	{pc}
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	00002b95 	.word	0x00002b95

00002c7c <set_interrupt_mask_register>:

void set_interrupt_mask_register()
{
    2c7c:	b500      	push	{lr}
    2c7e:	b083      	sub	sp, #12
	uint8_t address = 0x92;// 0x12 |= (1 << 7)
	uint8_t data[1] = {0b01101100}; //0b01101100
    2c80:	a901      	add	r1, sp, #4
    2c82:	236c      	movs	r3, #108	; 0x6c
    2c84:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);
    2c86:	2201      	movs	r2, #1
    2c88:	2092      	movs	r0, #146	; 0x92
    2c8a:	4b02      	ldr	r3, [pc, #8]	; (2c94 <set_interrupt_mask_register+0x18>)
    2c8c:	4798      	blx	r3
}
    2c8e:	b003      	add	sp, #12
    2c90:	bd00      	pop	{pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	00002b95 	.word	0x00002b95

00002c98 <set_squarewave_register>:

void set_squarewave_register()
{
    2c98:	b500      	push	{lr}
    2c9a:	b083      	sub	sp, #12
	uint8_t address = 0x93; // 0x13 |= (1 << 7)
	uint8_t data[1] = {0b00000000};
    2c9c:	a901      	add	r1, sp, #4
    2c9e:	2300      	movs	r3, #0
    2ca0:	700b      	strb	r3, [r1, #0]
	rtc_write_operation(address, data, 1);	
    2ca2:	2201      	movs	r2, #1
    2ca4:	2093      	movs	r0, #147	; 0x93
    2ca6:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <set_squarewave_register+0x18>)
    2ca8:	4798      	blx	r3
}
    2caa:	b003      	add	sp, #12
    2cac:	bd00      	pop	{pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00002b95 	.word	0x00002b95

00002cb4 <set_osc_control>:

void set_osc_control()
{
    2cb4:	b530      	push	{r4, r5, lr}
    2cb6:	b083      	sub	sp, #12
	// need to write config key with value 0xA1 to change osc control
	uint8_t address = 0x9F; // 0x1F |= (1 << 7)
	uint8_t data[1] = {0xA1};
    2cb8:	ac01      	add	r4, sp, #4
    2cba:	23a1      	movs	r3, #161	; 0xa1
    2cbc:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2cbe:	2201      	movs	r2, #1
    2cc0:	0021      	movs	r1, r4
    2cc2:	209f      	movs	r0, #159	; 0x9f
    2cc4:	4d04      	ldr	r5, [pc, #16]	; (2cd8 <set_osc_control+0x24>)
    2cc6:	47a8      	blx	r5
	address = 0x9C; // 0x1C |= (1 << 7)
	data[1] = 0b01001000;
    2cc8:	2348      	movs	r3, #72	; 0x48
    2cca:	7063      	strb	r3, [r4, #1]
	rtc_write_operation(address, data, 1);
    2ccc:	2201      	movs	r2, #1
    2cce:	0021      	movs	r1, r4
    2cd0:	209c      	movs	r0, #156	; 0x9c
    2cd2:	47a8      	blx	r5
}
    2cd4:	b003      	add	sp, #12
    2cd6:	bd30      	pop	{r4, r5, pc}
    2cd8:	00002b95 	.word	0x00002b95

00002cdc <set_alarm_register>:

void set_alarm_register()
{
    2cdc:	b530      	push	{r4, r5, lr}
    2cde:	b083      	sub	sp, #12
	uint8_t address = 0x98; // 0x18 |= (1 << 7)
	uint8_t data[1] = {0b00010100};
    2ce0:	ac01      	add	r4, sp, #4
    2ce2:	2314      	movs	r3, #20
    2ce4:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2ce6:	2201      	movs	r2, #1
    2ce8:	0021      	movs	r1, r4
    2cea:	2098      	movs	r0, #152	; 0x98
    2cec:	4d04      	ldr	r5, [pc, #16]	; (2d00 <set_alarm_register+0x24>)
    2cee:	47a8      	blx	r5
	address = 0x8A; //0x0A |= (1 << 7)
	data[0] = 0b00110000;
    2cf0:	2330      	movs	r3, #48	; 0x30
    2cf2:	7023      	strb	r3, [r4, #0]
	rtc_write_operation(address, data, 1);
    2cf4:	2201      	movs	r2, #1
    2cf6:	0021      	movs	r1, r4
    2cf8:	208a      	movs	r0, #138	; 0x8a
    2cfa:	47a8      	blx	r5
}
    2cfc:	b003      	add	sp, #12
    2cfe:	bd30      	pop	{r4, r5, pc}
    2d00:	00002b95 	.word	0x00002b95

00002d04 <initialise_rtc>:

// combine all initialisation functions and send at once
void initialise_rtc()
{
    2d04:	b510      	push	{r4, lr}
	set_control_1_register();
    2d06:	4b07      	ldr	r3, [pc, #28]	; (2d24 <initialise_rtc+0x20>)
    2d08:	4798      	blx	r3
	set_control_2_register();
    2d0a:	4b07      	ldr	r3, [pc, #28]	; (2d28 <initialise_rtc+0x24>)
    2d0c:	4798      	blx	r3
	set_status_register();
    2d0e:	4b07      	ldr	r3, [pc, #28]	; (2d2c <initialise_rtc+0x28>)
    2d10:	4798      	blx	r3
	set_interrupt_mask_register();
    2d12:	4b07      	ldr	r3, [pc, #28]	; (2d30 <initialise_rtc+0x2c>)
    2d14:	4798      	blx	r3
	set_squarewave_register();
    2d16:	4b07      	ldr	r3, [pc, #28]	; (2d34 <initialise_rtc+0x30>)
    2d18:	4798      	blx	r3
	set_osc_control();
    2d1a:	4b07      	ldr	r3, [pc, #28]	; (2d38 <initialise_rtc+0x34>)
    2d1c:	4798      	blx	r3
	set_alarm_register();
    2d1e:	4b07      	ldr	r3, [pc, #28]	; (2d3c <initialise_rtc+0x38>)
    2d20:	4798      	blx	r3
	//rtc_clear_interrupts();
}
    2d22:	bd10      	pop	{r4, pc}
    2d24:	00002c29 	.word	0x00002c29
    2d28:	00002c45 	.word	0x00002c45
    2d2c:	00002c61 	.word	0x00002c61
    2d30:	00002c7d 	.word	0x00002c7d
    2d34:	00002c99 	.word	0x00002c99
    2d38:	00002cb5 	.word	0x00002cb5
    2d3c:	00002cdd 	.word	0x00002cdd

00002d40 <rtc_set_current_time>:

// converts the input time to bcd format and sends to the rtc
void rtc_set_current_time(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second)
{
    2d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d42:	b085      	sub	sp, #20
    2d44:	0004      	movs	r4, r0
    2d46:	000f      	movs	r7, r1
    2d48:	9200      	str	r2, [sp, #0]
    2d4a:	9301      	str	r3, [sp, #4]
    2d4c:	ab0a      	add	r3, sp, #40	; 0x28
    2d4e:	781e      	ldrb	r6, [r3, #0]
    2d50:	ab0b      	add	r3, sp, #44	; 0x2c
    2d52:	781d      	ldrb	r5, [r3, #0]
	uint8_t date_and_time[5] = {0};  // year values must range from 0 to 99
    2d54:	2205      	movs	r2, #5
    2d56:	2100      	movs	r1, #0
    2d58:	a802      	add	r0, sp, #8
    2d5a:	4b12      	ldr	r3, [pc, #72]	; (2da4 <rtc_set_current_time+0x64>)
    2d5c:	4798      	blx	r3
	date_and_time[5] = bin2bcd(year);
    2d5e:	0020      	movs	r0, r4
    2d60:	4c11      	ldr	r4, [pc, #68]	; (2da8 <rtc_set_current_time+0x68>)
    2d62:	47a0      	blx	r4
    2d64:	a902      	add	r1, sp, #8
    2d66:	7148      	strb	r0, [r1, #5]
	date_and_time[4] = bin2bcd(month);
    2d68:	0038      	movs	r0, r7
    2d6a:	47a0      	blx	r4
    2d6c:	a902      	add	r1, sp, #8
    2d6e:	7108      	strb	r0, [r1, #4]
	date_and_time[3] = bin2bcd(day);
    2d70:	9800      	ldr	r0, [sp, #0]
    2d72:	47a0      	blx	r4
    2d74:	aa02      	add	r2, sp, #8
    2d76:	70d0      	strb	r0, [r2, #3]
	date_and_time[2] = bin2bcd(hour);
    2d78:	9801      	ldr	r0, [sp, #4]
    2d7a:	47a0      	blx	r4
    2d7c:	ab02      	add	r3, sp, #8
    2d7e:	7098      	strb	r0, [r3, #2]
	date_and_time[1] = bin2bcd(minute);
    2d80:	0030      	movs	r0, r6
    2d82:	47a0      	blx	r4
    2d84:	ab02      	add	r3, sp, #8
    2d86:	7058      	strb	r0, [r3, #1]
	date_and_time[0] = bin2bcd(second);
    2d88:	0028      	movs	r0, r5
    2d8a:	47a0      	blx	r4
	// writes the GP0 bit of the seconds register so this can be checked later to see if the rtc has been initialised
	// and the time has been set. 
	date_and_time[0] |= (1 << 7); 
    2d8c:	2380      	movs	r3, #128	; 0x80
    2d8e:	425b      	negs	r3, r3
    2d90:	4318      	orrs	r0, r3
    2d92:	ab02      	add	r3, sp, #8
    2d94:	7018      	strb	r0, [r3, #0]
	rtc_write_operation(0x81, date_and_time, 6);
    2d96:	2206      	movs	r2, #6
    2d98:	0019      	movs	r1, r3
    2d9a:	2081      	movs	r0, #129	; 0x81
    2d9c:	4b03      	ldr	r3, [pc, #12]	; (2dac <rtc_set_current_time+0x6c>)
    2d9e:	4798      	blx	r3
}
    2da0:	b005      	add	sp, #20
    2da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2da4:	00002fd9 	.word	0x00002fd9
    2da8:	00002b71 	.word	0x00002b71
    2dac:	00002b95 	.word	0x00002b95

00002db0 <rtc_clear_interrupts>:
	ascii[1] = (byte & 0x0F) + 48;
}

// reads the status register in the rtc to clear all interrupts
void rtc_clear_interrupts()
{
    2db0:	b500      	push	{lr}
    2db2:	b083      	sub	sp, #12
	uint8_t data[1];
	rtc_read_operation(0x0F, data, 1);
    2db4:	2201      	movs	r2, #1
    2db6:	a901      	add	r1, sp, #4
    2db8:	200f      	movs	r0, #15
    2dba:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <rtc_clear_interrupts+0x14>)
    2dbc:	4798      	blx	r3
}
    2dbe:	b003      	add	sp, #12
    2dc0:	bd00      	pop	{pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	00002be9 	.word	0x00002be9

00002dc8 <check_rtc_initialised>:
	gpio_set_pin_level(SS_RTC, true);
}

// reads the seconds register to check if GP0 has been set. does an & comparison and if it is set will output true.
bool check_rtc_initialised()
{
    2dc8:	b510      	push	{r4, lr}
    2dca:	b082      	sub	sp, #8
	uint8_t data[1];
	bool result;
	rtc_read_operation(0x01, data, 1);
    2dcc:	ac01      	add	r4, sp, #4
    2dce:	2201      	movs	r2, #1
    2dd0:	0021      	movs	r1, r4
    2dd2:	2001      	movs	r0, #1
    2dd4:	4b02      	ldr	r3, [pc, #8]	; (2de0 <check_rtc_initialised+0x18>)
    2dd6:	4798      	blx	r3
	uint8_t GP0 = data[0] & 0b10000000;
	if (GP0 == 0b10000000)
    2dd8:	7820      	ldrb	r0, [r4, #0]
    2dda:	09c0      	lsrs	r0, r0, #7
		result = true;
	} else {
		result = false;
	}
	return result;
}
    2ddc:	b002      	add	sp, #8
    2dde:	bd10      	pop	{r4, pc}
    2de0:	00002be9 	.word	0x00002be9

00002de4 <SPI_Begin>:
#include <driver_init.h>


extern struct io_descriptor *spi_io;

void SPI_Begin(void){
    2de4:	b510      	push	{r4, lr}
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_io);
    2de6:	4c08      	ldr	r4, [pc, #32]	; (2e08 <SPI_Begin+0x24>)
    2de8:	4908      	ldr	r1, [pc, #32]	; (2e0c <SPI_Begin+0x28>)
    2dea:	0020      	movs	r0, r4
    2dec:	4b08      	ldr	r3, [pc, #32]	; (2e10 <SPI_Begin+0x2c>)
    2dee:	4798      	blx	r3
	spi_m_sync_set_baudrate(&SPI_0, 100000);
    2df0:	4908      	ldr	r1, [pc, #32]	; (2e14 <SPI_Begin+0x30>)
    2df2:	0020      	movs	r0, r4
    2df4:	4b08      	ldr	r3, [pc, #32]	; (2e18 <SPI_Begin+0x34>)
    2df6:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
    2df8:	2100      	movs	r1, #0
    2dfa:	0020      	movs	r0, r4
    2dfc:	4b07      	ldr	r3, [pc, #28]	; (2e1c <SPI_Begin+0x38>)
    2dfe:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2e00:	0020      	movs	r0, r4
    2e02:	4b07      	ldr	r3, [pc, #28]	; (2e20 <SPI_Begin+0x3c>)
    2e04:	4798      	blx	r3
}
    2e06:	bd10      	pop	{r4, pc}
    2e08:	20000104 	.word	0x20000104
    2e0c:	20000138 	.word	0x20000138
    2e10:	000016f1 	.word	0x000016f1
    2e14:	000186a0 	.word	0x000186a0
    2e18:	000015d9 	.word	0x000015d9
    2e1c:	00001605 	.word	0x00001605
    2e20:	000015b1 	.word	0x000015b1

00002e24 <__udivsi3>:
    2e24:	2200      	movs	r2, #0
    2e26:	0843      	lsrs	r3, r0, #1
    2e28:	428b      	cmp	r3, r1
    2e2a:	d374      	bcc.n	2f16 <__udivsi3+0xf2>
    2e2c:	0903      	lsrs	r3, r0, #4
    2e2e:	428b      	cmp	r3, r1
    2e30:	d35f      	bcc.n	2ef2 <__udivsi3+0xce>
    2e32:	0a03      	lsrs	r3, r0, #8
    2e34:	428b      	cmp	r3, r1
    2e36:	d344      	bcc.n	2ec2 <__udivsi3+0x9e>
    2e38:	0b03      	lsrs	r3, r0, #12
    2e3a:	428b      	cmp	r3, r1
    2e3c:	d328      	bcc.n	2e90 <__udivsi3+0x6c>
    2e3e:	0c03      	lsrs	r3, r0, #16
    2e40:	428b      	cmp	r3, r1
    2e42:	d30d      	bcc.n	2e60 <__udivsi3+0x3c>
    2e44:	22ff      	movs	r2, #255	; 0xff
    2e46:	0209      	lsls	r1, r1, #8
    2e48:	ba12      	rev	r2, r2
    2e4a:	0c03      	lsrs	r3, r0, #16
    2e4c:	428b      	cmp	r3, r1
    2e4e:	d302      	bcc.n	2e56 <__udivsi3+0x32>
    2e50:	1212      	asrs	r2, r2, #8
    2e52:	0209      	lsls	r1, r1, #8
    2e54:	d065      	beq.n	2f22 <__udivsi3+0xfe>
    2e56:	0b03      	lsrs	r3, r0, #12
    2e58:	428b      	cmp	r3, r1
    2e5a:	d319      	bcc.n	2e90 <__udivsi3+0x6c>
    2e5c:	e000      	b.n	2e60 <__udivsi3+0x3c>
    2e5e:	0a09      	lsrs	r1, r1, #8
    2e60:	0bc3      	lsrs	r3, r0, #15
    2e62:	428b      	cmp	r3, r1
    2e64:	d301      	bcc.n	2e6a <__udivsi3+0x46>
    2e66:	03cb      	lsls	r3, r1, #15
    2e68:	1ac0      	subs	r0, r0, r3
    2e6a:	4152      	adcs	r2, r2
    2e6c:	0b83      	lsrs	r3, r0, #14
    2e6e:	428b      	cmp	r3, r1
    2e70:	d301      	bcc.n	2e76 <__udivsi3+0x52>
    2e72:	038b      	lsls	r3, r1, #14
    2e74:	1ac0      	subs	r0, r0, r3
    2e76:	4152      	adcs	r2, r2
    2e78:	0b43      	lsrs	r3, r0, #13
    2e7a:	428b      	cmp	r3, r1
    2e7c:	d301      	bcc.n	2e82 <__udivsi3+0x5e>
    2e7e:	034b      	lsls	r3, r1, #13
    2e80:	1ac0      	subs	r0, r0, r3
    2e82:	4152      	adcs	r2, r2
    2e84:	0b03      	lsrs	r3, r0, #12
    2e86:	428b      	cmp	r3, r1
    2e88:	d301      	bcc.n	2e8e <__udivsi3+0x6a>
    2e8a:	030b      	lsls	r3, r1, #12
    2e8c:	1ac0      	subs	r0, r0, r3
    2e8e:	4152      	adcs	r2, r2
    2e90:	0ac3      	lsrs	r3, r0, #11
    2e92:	428b      	cmp	r3, r1
    2e94:	d301      	bcc.n	2e9a <__udivsi3+0x76>
    2e96:	02cb      	lsls	r3, r1, #11
    2e98:	1ac0      	subs	r0, r0, r3
    2e9a:	4152      	adcs	r2, r2
    2e9c:	0a83      	lsrs	r3, r0, #10
    2e9e:	428b      	cmp	r3, r1
    2ea0:	d301      	bcc.n	2ea6 <__udivsi3+0x82>
    2ea2:	028b      	lsls	r3, r1, #10
    2ea4:	1ac0      	subs	r0, r0, r3
    2ea6:	4152      	adcs	r2, r2
    2ea8:	0a43      	lsrs	r3, r0, #9
    2eaa:	428b      	cmp	r3, r1
    2eac:	d301      	bcc.n	2eb2 <__udivsi3+0x8e>
    2eae:	024b      	lsls	r3, r1, #9
    2eb0:	1ac0      	subs	r0, r0, r3
    2eb2:	4152      	adcs	r2, r2
    2eb4:	0a03      	lsrs	r3, r0, #8
    2eb6:	428b      	cmp	r3, r1
    2eb8:	d301      	bcc.n	2ebe <__udivsi3+0x9a>
    2eba:	020b      	lsls	r3, r1, #8
    2ebc:	1ac0      	subs	r0, r0, r3
    2ebe:	4152      	adcs	r2, r2
    2ec0:	d2cd      	bcs.n	2e5e <__udivsi3+0x3a>
    2ec2:	09c3      	lsrs	r3, r0, #7
    2ec4:	428b      	cmp	r3, r1
    2ec6:	d301      	bcc.n	2ecc <__udivsi3+0xa8>
    2ec8:	01cb      	lsls	r3, r1, #7
    2eca:	1ac0      	subs	r0, r0, r3
    2ecc:	4152      	adcs	r2, r2
    2ece:	0983      	lsrs	r3, r0, #6
    2ed0:	428b      	cmp	r3, r1
    2ed2:	d301      	bcc.n	2ed8 <__udivsi3+0xb4>
    2ed4:	018b      	lsls	r3, r1, #6
    2ed6:	1ac0      	subs	r0, r0, r3
    2ed8:	4152      	adcs	r2, r2
    2eda:	0943      	lsrs	r3, r0, #5
    2edc:	428b      	cmp	r3, r1
    2ede:	d301      	bcc.n	2ee4 <__udivsi3+0xc0>
    2ee0:	014b      	lsls	r3, r1, #5
    2ee2:	1ac0      	subs	r0, r0, r3
    2ee4:	4152      	adcs	r2, r2
    2ee6:	0903      	lsrs	r3, r0, #4
    2ee8:	428b      	cmp	r3, r1
    2eea:	d301      	bcc.n	2ef0 <__udivsi3+0xcc>
    2eec:	010b      	lsls	r3, r1, #4
    2eee:	1ac0      	subs	r0, r0, r3
    2ef0:	4152      	adcs	r2, r2
    2ef2:	08c3      	lsrs	r3, r0, #3
    2ef4:	428b      	cmp	r3, r1
    2ef6:	d301      	bcc.n	2efc <__udivsi3+0xd8>
    2ef8:	00cb      	lsls	r3, r1, #3
    2efa:	1ac0      	subs	r0, r0, r3
    2efc:	4152      	adcs	r2, r2
    2efe:	0883      	lsrs	r3, r0, #2
    2f00:	428b      	cmp	r3, r1
    2f02:	d301      	bcc.n	2f08 <__udivsi3+0xe4>
    2f04:	008b      	lsls	r3, r1, #2
    2f06:	1ac0      	subs	r0, r0, r3
    2f08:	4152      	adcs	r2, r2
    2f0a:	0843      	lsrs	r3, r0, #1
    2f0c:	428b      	cmp	r3, r1
    2f0e:	d301      	bcc.n	2f14 <__udivsi3+0xf0>
    2f10:	004b      	lsls	r3, r1, #1
    2f12:	1ac0      	subs	r0, r0, r3
    2f14:	4152      	adcs	r2, r2
    2f16:	1a41      	subs	r1, r0, r1
    2f18:	d200      	bcs.n	2f1c <__udivsi3+0xf8>
    2f1a:	4601      	mov	r1, r0
    2f1c:	4152      	adcs	r2, r2
    2f1e:	4610      	mov	r0, r2
    2f20:	4770      	bx	lr
    2f22:	e7ff      	b.n	2f24 <__udivsi3+0x100>
    2f24:	b501      	push	{r0, lr}
    2f26:	2000      	movs	r0, #0
    2f28:	f000 f806 	bl	2f38 <__aeabi_idiv0>
    2f2c:	bd02      	pop	{r1, pc}
    2f2e:	46c0      	nop			; (mov r8, r8)

00002f30 <__aeabi_uidivmod>:
    2f30:	2900      	cmp	r1, #0
    2f32:	d0f7      	beq.n	2f24 <__udivsi3+0x100>
    2f34:	e776      	b.n	2e24 <__udivsi3>
    2f36:	4770      	bx	lr

00002f38 <__aeabi_idiv0>:
    2f38:	4770      	bx	lr
    2f3a:	46c0      	nop			; (mov r8, r8)

00002f3c <__ffssi2>:
    2f3c:	b510      	push	{r4, lr}
    2f3e:	2300      	movs	r3, #0
    2f40:	2800      	cmp	r0, #0
    2f42:	d002      	beq.n	2f4a <__ffssi2+0xe>
    2f44:	f000 f804 	bl	2f50 <__ctzsi2>
    2f48:	1c43      	adds	r3, r0, #1
    2f4a:	0018      	movs	r0, r3
    2f4c:	bd10      	pop	{r4, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)

00002f50 <__ctzsi2>:
    2f50:	4241      	negs	r1, r0
    2f52:	4008      	ands	r0, r1
    2f54:	211c      	movs	r1, #28
    2f56:	2301      	movs	r3, #1
    2f58:	041b      	lsls	r3, r3, #16
    2f5a:	4298      	cmp	r0, r3
    2f5c:	d301      	bcc.n	2f62 <__ctzsi2+0x12>
    2f5e:	0c00      	lsrs	r0, r0, #16
    2f60:	3910      	subs	r1, #16
    2f62:	0a1b      	lsrs	r3, r3, #8
    2f64:	4298      	cmp	r0, r3
    2f66:	d301      	bcc.n	2f6c <__ctzsi2+0x1c>
    2f68:	0a00      	lsrs	r0, r0, #8
    2f6a:	3908      	subs	r1, #8
    2f6c:	091b      	lsrs	r3, r3, #4
    2f6e:	4298      	cmp	r0, r3
    2f70:	d301      	bcc.n	2f76 <__ctzsi2+0x26>
    2f72:	0900      	lsrs	r0, r0, #4
    2f74:	3904      	subs	r1, #4
    2f76:	a202      	add	r2, pc, #8	; (adr r2, 2f80 <__ctzsi2+0x30>)
    2f78:	5c10      	ldrb	r0, [r2, r0]
    2f7a:	1a40      	subs	r0, r0, r1
    2f7c:	4770      	bx	lr
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	1d1d1c1b 	.word	0x1d1d1c1b
    2f84:	1e1e1e1e 	.word	0x1e1e1e1e
    2f88:	1f1f1f1f 	.word	0x1f1f1f1f
    2f8c:	1f1f1f1f 	.word	0x1f1f1f1f

00002f90 <__libc_init_array>:
    2f90:	b570      	push	{r4, r5, r6, lr}
    2f92:	2600      	movs	r6, #0
    2f94:	4d0c      	ldr	r5, [pc, #48]	; (2fc8 <__libc_init_array+0x38>)
    2f96:	4c0d      	ldr	r4, [pc, #52]	; (2fcc <__libc_init_array+0x3c>)
    2f98:	1b64      	subs	r4, r4, r5
    2f9a:	10a4      	asrs	r4, r4, #2
    2f9c:	42a6      	cmp	r6, r4
    2f9e:	d109      	bne.n	2fb4 <__libc_init_array+0x24>
    2fa0:	2600      	movs	r6, #0
    2fa2:	f000 f93f 	bl	3224 <_init>
    2fa6:	4d0a      	ldr	r5, [pc, #40]	; (2fd0 <__libc_init_array+0x40>)
    2fa8:	4c0a      	ldr	r4, [pc, #40]	; (2fd4 <__libc_init_array+0x44>)
    2faa:	1b64      	subs	r4, r4, r5
    2fac:	10a4      	asrs	r4, r4, #2
    2fae:	42a6      	cmp	r6, r4
    2fb0:	d105      	bne.n	2fbe <__libc_init_array+0x2e>
    2fb2:	bd70      	pop	{r4, r5, r6, pc}
    2fb4:	00b3      	lsls	r3, r6, #2
    2fb6:	58eb      	ldr	r3, [r5, r3]
    2fb8:	4798      	blx	r3
    2fba:	3601      	adds	r6, #1
    2fbc:	e7ee      	b.n	2f9c <__libc_init_array+0xc>
    2fbe:	00b3      	lsls	r3, r6, #2
    2fc0:	58eb      	ldr	r3, [r5, r3]
    2fc2:	4798      	blx	r3
    2fc4:	3601      	adds	r6, #1
    2fc6:	e7f2      	b.n	2fae <__libc_init_array+0x1e>
    2fc8:	00003230 	.word	0x00003230
    2fcc:	00003230 	.word	0x00003230
    2fd0:	00003230 	.word	0x00003230
    2fd4:	00003234 	.word	0x00003234

00002fd8 <memset>:
    2fd8:	0003      	movs	r3, r0
    2fda:	1882      	adds	r2, r0, r2
    2fdc:	4293      	cmp	r3, r2
    2fde:	d100      	bne.n	2fe2 <memset+0xa>
    2fe0:	4770      	bx	lr
    2fe2:	7019      	strb	r1, [r3, #0]
    2fe4:	3301      	adds	r3, #1
    2fe6:	e7f9      	b.n	2fdc <memset+0x4>
    2fe8:	682f2e2e 	.word	0x682f2e2e
    2fec:	692f6c61 	.word	0x692f6c61
    2ff0:	756c636e 	.word	0x756c636e
    2ff4:	682f6564 	.word	0x682f6564
    2ff8:	775f6c61 	.word	0x775f6c61
    2ffc:	682e7464 	.word	0x682e7464
    3000:	00000000 	.word	0x00000000
    3004:	682f2e2e 	.word	0x682f2e2e
    3008:	732f6c61 	.word	0x732f6c61
    300c:	682f6372 	.word	0x682f6372
    3010:	615f6c61 	.word	0x615f6c61
    3014:	735f6364 	.word	0x735f6364
    3018:	2e636e79 	.word	0x2e636e79
    301c:	00000063 	.word	0x00000063
    3020:	682f2e2e 	.word	0x682f2e2e
    3024:	732f6c61 	.word	0x732f6c61
    3028:	682f6372 	.word	0x682f6372
    302c:	645f6c61 	.word	0x645f6c61
    3030:	735f6361 	.word	0x735f6361
    3034:	2e636e79 	.word	0x2e636e79
    3038:	00000063 	.word	0x00000063
    303c:	682f2e2e 	.word	0x682f2e2e
    3040:	732f6c61 	.word	0x732f6c61
    3044:	682f6372 	.word	0x682f6372
    3048:	665f6c61 	.word	0x665f6c61
    304c:	6873616c 	.word	0x6873616c
    3050:	0000632e 	.word	0x0000632e
    3054:	682f2e2e 	.word	0x682f2e2e
    3058:	732f6c61 	.word	0x732f6c61
    305c:	682f6372 	.word	0x682f6372
    3060:	695f6c61 	.word	0x695f6c61
    3064:	00632e6f 	.word	0x00632e6f
    3068:	682f2e2e 	.word	0x682f2e2e
    306c:	732f6c61 	.word	0x732f6c61
    3070:	682f6372 	.word	0x682f6372
    3074:	705f6c61 	.word	0x705f6c61
    3078:	632e6d77 	.word	0x632e6d77
    307c:	00000000 	.word	0x00000000
    3080:	682f2e2e 	.word	0x682f2e2e
    3084:	732f6c61 	.word	0x732f6c61
    3088:	682f6372 	.word	0x682f6372
    308c:	735f6c61 	.word	0x735f6c61
    3090:	6d5f6970 	.word	0x6d5f6970
    3094:	6e79735f 	.word	0x6e79735f
    3098:	00632e63 	.word	0x00632e63
    309c:	682f2e2e 	.word	0x682f2e2e
    30a0:	732f6c61 	.word	0x732f6c61
    30a4:	682f6372 	.word	0x682f6372
    30a8:	745f6c61 	.word	0x745f6c61
    30ac:	72656d69 	.word	0x72656d69
    30b0:	0000632e 	.word	0x0000632e
    30b4:	682f2e2e 	.word	0x682f2e2e
    30b8:	752f6c61 	.word	0x752f6c61
    30bc:	736c6974 	.word	0x736c6974
    30c0:	6372732f 	.word	0x6372732f
    30c4:	6974752f 	.word	0x6974752f
    30c8:	6c5f736c 	.word	0x6c5f736c
    30cc:	2e747369 	.word	0x2e747369
    30d0:	00000063 	.word	0x00000063

000030d4 <_adcs>:
    30d4:	00000200 00000000 00000000 00000000     ................
	...
    30f0:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3100:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3110:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003120 <_map>:
    3120:	00000005 00000005 00000006 00000006     ................
    3130:	00000008 0000001c 00000009 00000009     ................
    3140:	0000000d 00000019 0000000f 0000001b     ................
    3150:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    3160:	632e6369 00000000 682f2e2e 6e2f6c70     ic.c....../hpl/n
    3170:	74636d76 682f6c72 6e5f6c70 74636d76     vmctrl/hpl_nvmct
    3180:	632e6c72 00000000 682f2e2e 722f6c70     rl.c....../hpl/r
    3190:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....

000031a0 <_i2cms>:
	...

000031b8 <sercomspi_regs>:
    31b8:	0001000c 00020000 00000000 01ff0009     ................
    31c8:	01000c00 02000000 00000000 ff000900     ................
    31d8:	00000301 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    31e8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    31f8:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    3208:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    3218:	775f6c70 632e7464 00000000              pl_wdt.c....

00003224 <_init>:
    3224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	bcf8      	pop	{r3, r4, r5, r6, r7}
    322a:	bc08      	pop	{r3}
    322c:	469e      	mov	lr, r3
    322e:	4770      	bx	lr

00003230 <__init_array_start>:
    3230:	000000dd 	.word	0x000000dd

00003234 <_fini>:
    3234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3236:	46c0      	nop			; (mov r8, r8)
    3238:	bcf8      	pop	{r3, r4, r5, r6, r7}
    323a:	bc08      	pop	{r3}
    323c:	469e      	mov	lr, r3
    323e:	4770      	bx	lr

00003240 <__fini_array_start>:
    3240:	000000b5 	.word	0x000000b5
